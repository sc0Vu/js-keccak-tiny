var KECCAK=function(t){var r={};function i(n){if(r[n])return r[n].exports;var e=r[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,i),e.l=!0,e.exports}return i.m=t,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(e,n){if(1&n&&(e=i(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)i.d(t,r,function(n){return e[n]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="",i(i.s="./index-browser.js")}({"./index-browser.js":function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(Buffer) {const KeccakTinyWasm = __webpack_require__(/*! ./lib/keccak-tiny-browser.wasm */ \"./lib/keccak-tiny-browser.wasm\")\nconst Keccak = __webpack_require__(/*! ./lib/keccak-tiny-browser.js */ \"./lib/keccak-tiny-browser.js\")\nconst isBuffer = __webpack_require__(/*! is-buffer */ \"./node_modules/is-buffer/index.js\")\n\nmodule.exports = function (options) {\n  options = {\n    instantiateWasm: function (info, successCallback) {\n      return KeccakTinyWasm(info)\n              .then(function (i) {\n                return successCallback(i.instance)\n              })\n    }\n  }\n  return new Promise(function (resolve, reject) {\n    Keccak(options).then(function (k) {\n      console.log(k)\n      let keccakTiny = {}\n      keccakTiny.hashAlgos = {\n        shake128: {\n          length: 16,\n          functionName: '_shake128'\n        },\n        shake256: {\n          length: 32,\n          functionName: '_shake256'\n        },\n        sha3_224: {\n          length: 28,\n          functionName: '_sha3_224'\n        },\n        sha3_256: {\n          length: 32,\n          functionName: '_sha3_256'\n        },\n        sha3_384: {\n          length: 48,\n          functionName: '_sha3_384'\n        },\n        sha3_512: {\n          length: 64,\n          functionName: '_sha3_512'\n        },\n        keccak224: {\n          length: 28,\n          functionName: '_keccak_224'\n        },\n        keccak256: {\n          length: 32,\n          functionName: '_keccak_256'\n        },\n        keccak384: {\n          length: 48,\n          functionName: '_keccak_384'\n        },\n        keccak512: {\n          length: 64,\n          functionName: '_keccak_512'\n        }\n      }\n      keccakTiny.k = k\n      keccakTiny.hash = function (hashAlgoName, msg) {\n        if (typeof hashAlgoName !== 'string') {\n          throw new Error('Hash algorithm name must be string.')\n        }\n        if (typeof this.hashAlgos[hashAlgoName] === undefined) {\n          throw new Error('Unknown hash algorithm.')\n        }\n        if (isBuffer(msg) !== true) {\n          throw new Error('Message must be buffer.')\n        }\n        let hashAlgo = this.hashAlgos[hashAlgoName]\n        let hashLen = hashAlgo.length\n        let hashMem = this.k._malloc(hashLen)\n        let msgLen = msg.length\n        let msgMem = this.k._malloc(msgLen)\n        let hash = new Uint8Array(hashLen)\n        let hashFunc = this.k[hashAlgo.functionName]\n        this.k.HEAP8.set(msg, msgMem)\n        let res = hashFunc(hashMem, hashLen, msgMem, msgLen)\n        if (res === -1) {\n          this.k._free(hashMem)\n          this.k._free(msgMem)\n          throw new Error('Hash failed.')\n        }\n        for (var i=0; i<hashLen; i++) {\n          var v = this.k.getValue(hashMem + i, 'i8')\n          hash[i] = v\n        }\n        // free memory\n        this.k._free(hashMem)\n        this.k._free(msgMem)\n        return Buffer.from(hash)\n      }\n      Object.keys(keccakTiny.hashAlgos).forEach(function (hashAlgoName) {\n        keccakTiny[hashAlgoName] = function (msg) {\n          let msgBuf = Buffer.from(msg)\n          return keccakTiny.hash(hashAlgoName, msgBuf)\n        }\n      })\n      resolve(keccakTiny)\n    })\n  })\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://KECCAK/./index-browser.js?")},"./lib/keccak-tiny-browser.js":function(module,exports,__webpack_require__){eval('\nvar KECCAK = (function() {\n  var _scriptDir = typeof document !== \'undefined\' && document.currentScript ? document.currentScript.src : undefined;\n  return (\nfunction(KECCAK) {\n  KECCAK = KECCAK || {};\n\nvar Module=typeof KECCAK!=="undefined"?KECCAK:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}Module["arguments"]=[];Module["thisProgram"]="./this.program";Module["quit"]=function(status,toThrow){throw toThrow};Module["preRun"]=[];Module["postRun"]=[];var ENVIRONMENT_IS_WEB=true;var ENVIRONMENT_IS_WORKER=false;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}else{return scriptDirectory+path}}if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1)}else{scriptDirectory=""}Module["read"]=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){Module["readBinary"]=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)};Module["setWindowTitle"]=function(title){document.title=title}}else{}var out=Module["print"]||(typeof console!=="undefined"?console.log.bind(console):typeof print!=="undefined"?print:null);var err=Module["printErr"]||(typeof printErr!=="undefined"?printErr:typeof console!=="undefined"&&console.warn.bind(console)||out);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var asm2wasmImports={"f64-rem":function(x,y){return x%y},"debugger":function(){debugger}};var functionPointers=new Array(0);if(typeof WebAssembly!=="object"){err("no native wasm support detected")}function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for getValue: "+type)}return null}var wasmMemory;var wasmTable;var ABORT=false;var EXITSTATUS=0;var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBuffer(buf){Module["buffer"]=buffer=buf}function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)}var DYNAMIC_BASE=5245872,DYNAMICTOP_PTR=2736;var TOTAL_STACK=5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;if(TOTAL_MEMORY<TOTAL_STACK)err("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");if(Module["buffer"]){buffer=Module["buffer"]}else{if(typeof WebAssembly==="object"&&typeof WebAssembly.Memory==="function"){wasmMemory=new WebAssembly.Memory({"initial":TOTAL_MEMORY/WASM_PAGE_SIZE});buffer=wasmMemory.buffer}else{buffer=new ArrayBuffer(TOTAL_MEMORY)}Module["buffer"]=buffer}updateGlobalBufferViews();HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func)}else{Module["dynCall_vi"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}var wasmBinaryFile="keccak-tiny-browser.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(Module["wasmBinary"]){return new Uint8Array(Module["wasmBinary"])}if(Module["readBinary"]){return Module["readBinary"](wasmBinaryFile)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!Module["wasmBinary"]&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at \'"+wasmBinaryFile+"\'"}return response["arrayBuffer"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(env){var info={"env":env,"global":{"NaN":NaN,Infinity:Infinity},"global.Math":Math,"asm2wasm":asm2wasmImports};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");if(Module["instantiateWasm"]){try{return Module["instantiateWasm"](info,receiveInstance)}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}function receiveInstantiatedSource(output){receiveInstance(output["instance"])}function instantiateArrayBuffer(receiver){getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}if(!Module["wasmBinary"]&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&typeof fetch==="function"){WebAssembly.instantiateStreaming(fetch(wasmBinaryFile,{credentials:"same-origin"}),info).then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");instantiateArrayBuffer(receiveInstantiatedSource)})}else{instantiateArrayBuffer(receiveInstantiatedSource)}return{}}Module["asm"]=function(global,env,providedBuffer){env["memory"]=wasmMemory;env["table"]=wasmTable=new WebAssembly.Table({"initial":0,"maximum":0,"element":"anyfunc"});env["__memory_base"]=1024;env["__table_base"]=0;var exports=createWasm(env);return exports};function ___errno_location(){err("missing function: __errno_location");abort(-1)}function _emscripten_get_heap_size(){return TOTAL_MEMORY}function abortOnCannotGrowMemory(requestedSize){abort("Cannot enlarge memory arrays to size "+requestedSize+" bytes. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function emscripten_realloc_buffer(size){var PAGE_MULTIPLE=65536;size=alignUp(size,PAGE_MULTIPLE);var old=Module["buffer"];var oldSize=old.byteLength;try{var result=wasmMemory.grow((size-oldSize)/65536);if(result!==(-1|0)){return Module["buffer"]=wasmMemory.buffer}else{return null}}catch(e){return null}}function _emscripten_resize_heap(requestedSize){var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var LIMIT=2147483648-PAGE_MULTIPLE;if(requestedSize>LIMIT){return false}var MIN_TOTAL_MEMORY=16777216;var newSize=Math.max(oldSize,MIN_TOTAL_MEMORY);while(newSize<requestedSize){if(newSize<=536870912){newSize=alignUp(2*newSize,PAGE_MULTIPLE)}else{newSize=Math.min(alignUp((3*newSize+2147483648)/4,PAGE_MULTIPLE),LIMIT)}}var replacement=emscripten_realloc_buffer(newSize);if(!replacement||replacement.byteLength!=newSize){return false}updateGlobalBuffer(replacement);updateGlobalBufferViews();TOTAL_MEMORY=newSize;HEAPU32[DYNAMICTOP_PTR>>2]=requestedSize;return true}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest)}function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}var asmGlobalArg={};var asmLibraryArg={"g":___errno_location,"b":___setErrNo,"f":_emscripten_get_heap_size,"e":_emscripten_memcpy_big,"d":_emscripten_resize_heap,"c":abortOnCannotGrowMemory,"a":DYNAMICTOP_PTR};var asm=Module["asm"](asmGlobalArg,asmLibraryArg,buffer);Module["asm"]=asm;var _free=Module["_free"]=function(){return Module["asm"]["h"].apply(null,arguments)};var _keccak_224=Module["_keccak_224"]=function(){return Module["asm"]["i"].apply(null,arguments)};var _keccak_256=Module["_keccak_256"]=function(){return Module["asm"]["j"].apply(null,arguments)};var _keccak_384=Module["_keccak_384"]=function(){return Module["asm"]["k"].apply(null,arguments)};var _keccak_512=Module["_keccak_512"]=function(){return Module["asm"]["l"].apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return Module["asm"]["m"].apply(null,arguments)};var _sha3_224=Module["_sha3_224"]=function(){return Module["asm"]["n"].apply(null,arguments)};var _sha3_256=Module["_sha3_256"]=function(){return Module["asm"]["o"].apply(null,arguments)};var _sha3_384=Module["_sha3_384"]=function(){return Module["asm"]["p"].apply(null,arguments)};var _sha3_512=Module["_sha3_512"]=function(){return Module["asm"]["q"].apply(null,arguments)};var _shake128=Module["_shake128"]=function(){return Module["asm"]["r"].apply(null,arguments)};var _shake256=Module["_shake256"]=function(){return Module["asm"]["s"].apply(null,arguments)};Module["asm"]=asm;Module["getValue"]=getValue;Module["then"]=function(func){if(Module["calledRun"]){func(Module)}else{var old=Module["onRuntimeInitialized"];Module["onRuntimeInitialized"]=function(){if(old)old();func(Module)}}return Module};function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};function run(args){args=args||Module["arguments"];if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}}Module["run"]=run;function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}if(what!==undefined){out(what);err(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;throw"abort("+what+"). Build with -s ASSERTIONS=1 for more info."}Module["abort"]=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}Module["noExitRuntime"]=true;run();\n\n\n  return KECCAK;\n}\n);\n})();\nif (true)\n      module.exports = KECCAK;\n    else {}\n    \n\n//# sourceURL=webpack://KECCAK/./lib/keccak-tiny-browser.js?')},"./lib/keccak-tiny-browser.wasm":function(module,exports){eval("var buffer = new ArrayBuffer(15031);var uint8 = new Uint8Array(buffer);uint8.set([0,97,115,109,1,0,0,0,1,29,5,96,0,1,127,96,1,127,0,96,3,127,127,127,1,127,96,1,127,1,127,96,4,127,127,127,127,1,127,2,73,8,3,101,110,118,1,98,0,1,3,101,110,118,1,99,0,3,3,101,110,118,1,100,0,3,3,101,110,118,1,101,0,2,3,101,110,118,1,102,0,0,3,101,110,118,1,103,0,0,3,101,110,118,1,97,3,127,0,3,101,110,118,6,109,101,109,111,114,121,2,0,128,2,3,17,16,1,2,3,2,4,4,4,4,4,1,3,4,4,4,4,4,6,12,2,127,1,35,0,11,127,1,65,176,23,11,7,49,12,1,104,0,15,1,105,0,20,1,106,0,19,1,107,0,18,1,108,0,17,1,109,0,16,1,110,0,12,1,111,0,11,1,112,0,10,1,113,0,21,1,114,0,14,1,115,0,13,10,163,114,16,147,11,2,25,127,40,126,32,0,65,40,106,34,2,41,3,0,33,38,32,0,41,3,0,33,39,32,0,65,208,0,106,34,3,41,3,0,33,45,32,0,65,248,0,106,34,4,41,3,0,33,59,32,0,65,160,1,106,34,5,41,3,0,33,33,32,0,65,48,106,34,6,41,3,0,33,46,32,0,65,8,106,34,7,41,3,0,33,47,32,0,65,216,0,106,34,8,41,3,0,33,40,32,0,65,128,1,106,34,9,41,3,0,33,34,32,0,65,168,1,106,34,10,41,3,0,33,60,32,0,65,56,106,34,11,41,3,0,33,30,32,0,65,16,106,34,12,41,3,0,33,48,32,0,65,224,0,106,34,13,41,3,0,33,35,32,0,65,136,1,106,34,14,41,3,0,33,49,32,0,65,176,1,106,34,15,41,3,0,33,31,32,0,65,64,107,34,16,41,3,0,33,41,32,0,65,24,106,34,17,41,3,0,33,50,32,0,65,232,0,106,34,18,41,3,0,33,51,32,0,65,144,1,106,34,19,41,3,0,33,28,32,0,65,184,1,106,34,20,41,3,0,33,36,32,0,65,200,0,106,34,21,41,3,0,33,52,32,0,65,32,106,34,22,41,3,0,33,53,32,0,65,240,0,106,34,23,41,3,0,33,27,32,0,65,152,1,106,34,24,41,3,0,33,37,32,0,65,192,1,106,34,25,41,3,0,33,26,3,64,32,39,32,52,32,53,133,32,27,133,32,37,133,32,26,133,34,42,32,46,32,47,133,32,40,133,32,34,133,32,60,133,34,43,66,1,134,32,43,66,63,136,132,133,34,54,133,33,61,32,38,32,39,133,32,45,133,32,59,133,32,33,133,34,44,32,30,32,48,133,32,35,133,32,49,133,32,31,133,34,32,66,1,134,32,32,66,63,136,132,133,34,55,32,47,133,33,62,32,41,32,50,133,32,51,133,32,28,133,32,36,133,34,29,66,1,134,32,29,66,63,136,132,32,43,133,34,56,32,48,133,33,63,32,42,66,1,134,32,42,66,63,136,132,32,32,133,34,57,32,50,133,33,32,32,44,66,1,134,32,44,66,63,136,132,32,29,133,34,58,32,53,133,33,64,32,46,32,55,133,34,29,66,44,134,32,29,66,20,136,132,34,65,32,28,32,57,133,34,28,66,21,134,32,28,66,43,136,132,34,29,32,35,32,56,133,34,28,66,43,134,32,28,66,21,136,132,34,42,66,127,133,131,133,33,47,32,42,32,26,32,58,133,34,26,66,14,134,32,26,66,50,136,132,34,26,32,29,66,127,133,131,133,33,48,32,29,32,26,66,127,133,32,61,131,133,33,50,32,26,32,65,32,61,66,127,133,131,133,33,53,32,32,66,28,134,32,32,66,36,136,132,34,32,32,45,32,54,133,34,26,66,3,134,32,26,66,61,136,132,34,35,32,52,32,58,133,34,26,66,20,134,32,26,66,44,136,132,34,29,66,127,133,131,133,33,39,32,29,32,34,32,55,133,34,26,66,45,134,32,26,66,19,136,132,34,28,32,35,66,127,133,131,133,33,46,32,35,32,31,32,56,133,34,26,66,61,134,32,26,66,3,136,132,34,26,32,28,66,127,133,131,133,33,43,32,28,32,32,32,26,66,127,133,131,133,33,44,32,26,32,29,32,32,66,127,133,131,133,33,52,32,62,66,1,134,32,62,66,63,136,132,34,34,32,51,32,57,133,34,26,66,25,134,32,26,66,39,136,132,34,28,32,30,32,56,133,34,26,66,6,134,32,26,66,58,136,132,34,30,66,127,133,131,133,33,45,32,30,32,37,32,58,133,34,26,66,8,134,32,26,66,56,136,132,34,31,32,28,66,127,133,131,133,33,32,32,28,32,33,32,54,133,34,26,66,18,134,32,26,66,46,136,132,34,26,32,31,66,127,133,131,133,33,35,32,31,32,34,32,26,66,127,133,131,133,33,51,32,26,32,30,32,34,66,127,133,131,133,33,29,32,64,66,27,134,32,64,66,37,136,132,34,33,32,40,32,55,133,34,26,66,10,134,32,26,66,54,136,132,34,37,32,38,32,54,133,34,26,66,36,134,32,26,66,28,136,132,34,30,66,127,133,131,133,33,40,32,30,32,49,32,56,133,34,26,66,15,134,32,26,66,49,136,132,34,31,32,37,66,127,133,131,133,33,34,32,37,32,36,32,57,133,34,26,66,56,134,32,26,66,8,136,132,34,26,32,31,66,127,133,131,133,33,49,32,31,32,33,32,26,66,127,133,131,133,33,28,32,26,32,30,32,33,66,127,133,131,133,33,37,32,63,66,62,134,32,63,66,2,136,132,34,38,32,27,32,58,133,34,27,66,39,134,32,27,66,25,136,132,34,36,32,41,32,57,133,34,27,66,55,134,32,27,66,9,136,132,34,33,66,127,133,131,133,33,30,32,33,32,54,32,59,133,34,27,66,41,134,32,27,66,23,136,132,34,26,32,36,66,127,133,131,133,33,31,32,36,32,55,32,60,133,34,27,66,2,134,32,27,66,62,136,132,34,27,32,26,66,127,133,131,133,33,41,32,26,32,38,32,27,66,127,133,131,133,33,36,32,27,32,33,32,38,66,127,133,131,133,33,26,32,1,65,3,116,65,128,8,106,41,3,0,32,42,32,65,66,127,133,131,32,61,133,133,33,27,32,1,65,1,106,34,1,65,24,71,4,64,32,39,33,38,32,27,33,39,32,40,33,59,32,30,33,33,32,32,33,40,32,31,33,60,32,43,33,30,32,41,33,31,32,44,33,41,32,29,33,27,12,1,11,11,32,0,32,27,55,3,0,32,2,32,39,55,3,0,32,3,32,45,55,3,0,32,4,32,40,55,3,0,32,5,32,30,55,3,0,32,7,32,47,55,3,0,32,6,32,46,55,3,0,32,8,32,32,55,3,0,32,9,32,34,55,3,0,32,10,32,31,55,3,0,32,12,32,48,55,3,0,32,11,32,43,55,3,0,32,13,32,35,55,3,0,32,14,32,49,55,3,0,32,15,32,41,55,3,0,32,17,32,50,55,3,0,32,16,32,44,55,3,0,32,18,32,51,55,3,0,32,19,32,28,55,3,0,32,20,32,36,55,3,0,32,22,32,53,55,3,0,32,21,32,52,55,3,0,32,23,32,29,55,3,0,32,24,32,37,55,3,0,32,25,32,26,55,3,0,11,152,2,1,4,127,32,0,32,2,106,33,4,32,1,65,255,1,113,33,1,32,2,65,195,0,78,4,64,3,64,32,0,65,3,113,4,64,32,0,32,1,58,0,0,32,0,65,1,106,33,0,12,1,11,11,32,1,65,8,116,32,1,114,32,1,65,16,116,114,32,1,65,24,116,114,33,3,32,4,65,124,113,34,5,65,64,106,33,6,3,64,32,0,32,6,76,4,64,32,0,32,3,54,2,0,32,0,32,3,54,2,4,32,0,32,3,54,2,8,32,0,32,3,54,2,12,32,0,32,3,54,2,16,32,0,32,3,54,2,20,32,0,32,3,54,2,24,32,0,32,3,54,2,28,32,0,32,3,54,2,32,32,0,32,3,54,2,36,32,0,32,3,54,2,40,32,0,32,3,54,2,44,32,0,32,3,54,2,48,32,0,32,3,54,2,52,32,0,32,3,54,2,56,32,0,32,3,54,2,60,32,0,65,64,107,33,0,12,1,11,11,3,64,32,0,32,5,72,4,64,32,0,32,3,54,2,0,32,0,65,4,106,33,0,12,1,11,11,11,3,64,32,0,32,4,72,4,64,32,0,32,1,58,0,0,32,0,65,1,106,33,0,12,1,11,11,32,4,32,2,107,11,79,1,2,127,32,0,35,1,40,2,0,34,2,106,34,1,32,2,72,32,0,65,0,74,113,32,1,65,0,72,114,4,64,32,1,16,1,26,65,12,16,0,65,127,15,11,32,1,16,4,76,4,64,35,1,32,1,54,2,0,5,32,1,16,2,69,4,64,65,12,16,0,65,127,15,11,11,32,2,11,198,3,1,3,127,32,2,65,128,192,0,78,4,64,32,0,32,1,32,2,16,3,26,32,0,15,11,32,0,33,4,32,0,32,2,106,33,3,32,0,65,3,113,32,1,65,3,113,70,4,64,3,64,32,0,65,3,113,4,64,32,2,69,4,64,32,4,15,11,32,0,32,1,44,0,0,58,0,0,32,0,65,1,106,33,0,32,1,65,1,106,33,1,32,2,65,1,107,33,2,12,1,11,11,32,3,65,124,113,34,2,65,64,106,33,5,3,64,32,0,32,5,76,4,64,32,0,32,1,40,2,0,54,2,0,32,0,32,1,40,2,4,54,2,4,32,0,32,1,40,2,8,54,2,8,32,0,32,1,40,2,12,54,2,12,32,0,32,1,40,2,16,54,2,16,32,0,32,1,40,2,20,54,2,20,32,0,32,1,40,2,24,54,2,24,32,0,32,1,40,2,28,54,2,28,32,0,32,1,40,2,32,54,2,32,32,0,32,1,40,2,36,54,2,36,32,0,32,1,40,2,40,54,2,40,32,0,32,1,40,2,44,54,2,44,32,0,32,1,40,2,48,54,2,48,32,0,32,1,40,2,52,54,2,52,32,0,32,1,40,2,56,54,2,56,32,0,32,1,40,2,60,54,2,60,32,0,65,64,107,33,0,32,1,65,64,107,33,1,12,1,11,11,3,64,32,0,32,2,72,4,64,32,0,32,1,40,2,0,54,2,0,32,0,65,4,106,33,0,32,1,65,4,106,33,1,12,1,11,11,5,32,3,65,4,107,33,2,3,64,32,0,32,2,72,4,64,32,0,32,1,44,0,0,58,0,0,32,0,32,1,44,0,1,58,0,1,32,0,32,1,44,0,2,58,0,2,32,0,32,1,44,0,3,58,0,3,32,0,65,4,106,33,0,32,1,65,4,106,33,1,12,1,11,11,11,3,64,32,0,32,3,72,4,64,32,0,32,1,44,0,0,58,0,0,32,0,65,1,106,33,0,32,1,65,1,106,33,1,12,1,11,11,32,4,11,223,3,1,3,127,35,2,33,4,35,2,65,208,1,106,36,2,2,64,32,1,65,48,75,13,0,32,0,69,13,0,32,2,69,32,3,65,0,71,113,13,0,32,4,65,0,65,200,1,16,7,26,32,3,65,232,0,79,4,64,3,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,65,232,0,71,13,0,11,32,4,16,6,32,2,65,232,0,106,33,2,32,3,65,152,127,106,34,3,65,232,0,79,13,0,11,11,32,3,32,4,106,34,5,32,5,44,0,0,65,6,115,58,0,0,32,4,65,231,0,106,34,5,32,5,44,0,0,65,128,127,115,58,0,0,32,3,4,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,32,3,71,13,0,11,11,32,4,16,6,32,1,65,232,0,79,4,64,32,0,33,2,65,0,33,3,3,127,32,0,32,3,65,232,0,108,106,34,5,32,4,41,0,0,55,0,0,32,5,32,4,41,0,8,55,0,8,32,5,32,4,41,0,16,55,0,16,32,5,32,4,41,0,24,55,0,24,32,5,32,4,41,0,32,55,0,32,32,5,32,4,41,0,40,55,0,40,32,5,32,4,41,0,48,55,0,48,32,5,32,4,41,0,56,55,0,56,32,5,65,64,107,32,4,65,64,107,41,0,0,55,0,0,32,5,32,4,41,0,72,55,0,72,32,5,32,4,41,0,80,55,0,80,32,5,32,4,41,0,88,55,0,88,32,5,32,4,41,0,96,55,0,96,32,4,16,6,32,2,65,232,0,106,33,2,32,3,65,1,106,33,3,32,1,65,152,127,106,34,1,65,232,0,79,13,0,32,2,11,33,0,11,32,1,4,64,65,0,33,2,3,64,32,0,32,2,106,32,2,32,4,106,44,0,0,58,0,0,32,2,65,1,106,34,2,32,1,71,13,0,11,11,32,4,36,2,65,0,15,11,32,4,36,2,65,127,11,223,2,1,3,127,35,2,33,4,35,2,65,208,1,106,36,2,2,64,32,1,65,32,75,13,0,32,0,69,13,0,32,2,69,32,3,65,0,71,113,13,0,32,4,65,0,65,200,1,16,7,26,32,3,65,136,1,79,4,64,3,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,65,136,1,71,13,0,11,32,4,16,6,32,2,65,136,1,106,33,2,32,3,65,248,126,106,34,3,65,136,1,79,13,0,11,11,32,3,32,4,106,34,5,32,5,44,0,0,65,6,115,58,0,0,32,4,65,135,1,106,34,5,32,5,44,0,0,65,128,127,115,58,0,0,32,3,4,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,32,3,71,13,0,11,11,32,4,16,6,32,1,65,136,1,79,4,64,32,0,33,2,65,0,33,3,3,127,32,0,32,3,65,136,1,108,106,32,4,65,136,1,16,9,26,32,4,16,6,32,2,65,136,1,106,33,2,32,3,65,1,106,33,3,32,1,65,248,126,106,34,1,65,136,1,79,13,0,32,2,11,33,0,11,32,1,4,64,65,0,33,2,3,64,32,0,32,2,106,32,2,32,4,106,44,0,0,58,0,0,32,2,65,1,106,34,2,32,1,71,13,0,11,11,32,4,36,2,65,0,15,11,32,4,36,2,65,127,11,223,2,1,3,127,35,2,33,4,35,2,65,208,1,106,36,2,2,64,32,1,65,28,75,13,0,32,0,69,13,0,32,2,69,32,3,65,0,71,113,13,0,32,4,65,0,65,200,1,16,7,26,32,3,65,144,1,79,4,64,3,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,65,144,1,71,13,0,11,32,4,16,6,32,2,65,144,1,106,33,2,32,3,65,240,126,106,34,3,65,144,1,79,13,0,11,11,32,3,32,4,106,34,5,32,5,44,0,0,65,6,115,58,0,0,32,4,65,143,1,106,34,5,32,5,44,0,0,65,128,127,115,58,0,0,32,3,4,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,32,3,71,13,0,11,11,32,4,16,6,32,1,65,144,1,79,4,64,32,0,33,2,65,0,33,3,3,127,32,0,32,3,65,144,1,108,106,32,4,65,144,1,16,9,26,32,4,16,6,32,2,65,144,1,106,33,2,32,3,65,1,106,33,3,32,1,65,240,126,106,34,1,65,144,1,79,13,0,32,2,11,33,0,11,32,1,4,64,65,0,33,2,3,64,32,0,32,2,106,32,2,32,4,106,44,0,0,58,0,0,32,2,65,1,106,34,2,32,1,71,13,0,11,11,32,4,36,2,65,0,15,11,32,4,36,2,65,127,11,222,2,1,3,127,35,2,33,4,35,2,65,208,1,106,36,2,32,0,69,4,64,32,4,36,2,65,127,15,11,32,2,69,32,3,65,0,71,113,4,64,32,4,36,2,65,127,15,11,32,4,65,0,65,200,1,16,7,26,32,3,65,136,1,79,4,64,3,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,65,136,1,71,13,0,11,32,4,16,6,32,2,65,136,1,106,33,2,32,3,65,248,126,106,34,3,65,136,1,79,13,0,11,11,32,3,32,4,106,34,5,32,5,44,0,0,65,31,115,58,0,0,32,4,65,135,1,106,34,5,32,5,44,0,0,65,128,127,115,58,0,0,32,3,4,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,32,3,71,13,0,11,11,32,4,16,6,32,1,65,136,1,79,4,64,32,0,33,2,65,0,33,3,3,127,32,0,32,3,65,136,1,108,106,32,4,65,136,1,16,9,26,32,4,16,6,32,2,65,136,1,106,33,2,32,3,65,1,106,33,3,32,1,65,248,126,106,34,1,65,136,1,79,13,0,32,2,11,33,0,11,32,1,4,64,65,0,33,2,3,64,32,0,32,2,106,32,2,32,4,106,44,0,0,58,0,0,32,2,65,1,106,34,2,32,1,71,13,0,11,11,32,4,36,2,65,0,11,222,2,1,3,127,35,2,33,4,35,2,65,208,1,106,36,2,32,0,69,4,64,32,4,36,2,65,127,15,11,32,2,69,32,3,65,0,71,113,4,64,32,4,36,2,65,127,15,11,32,4,65,0,65,200,1,16,7,26,32,3,65,168,1,79,4,64,3,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,65,168,1,71,13,0,11,32,4,16,6,32,2,65,168,1,106,33,2,32,3,65,216,126,106,34,3,65,168,1,79,13,0,11,11,32,3,32,4,106,34,5,32,5,44,0,0,65,31,115,58,0,0,32,4,65,167,1,106,34,5,32,5,44,0,0,65,128,127,115,58,0,0,32,3,4,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,32,3,71,13,0,11,11,32,4,16,6,32,1,65,168,1,79,4,64,32,0,33,2,65,0,33,3,3,127,32,0,32,3,65,168,1,108,106,32,4,65,168,1,16,9,26,32,4,16,6,32,2,65,168,1,106,33,2,32,3,65,1,106,33,3,32,1,65,216,126,106,34,1,65,168,1,79,13,0,32,2,11,33,0,11,32,1,4,64,65,0,33,2,3,64,32,0,32,2,106,32,2,32,4,106,44,0,0,58,0,0,32,2,65,1,106,34,2,32,1,71,13,0,11,11,32,4,36,2,65,0,11,188,13,1,9,127,32,0,69,4,64,15,11,65,208,9,40,2,0,33,2,32,0,65,120,106,34,3,32,0,65,124,106,40,2,0,34,1,65,120,113,34,0,106,33,5,32,1,65,1,113,4,127,32,3,5,2,127,32,1,65,3,113,69,4,64,15,11,32,3,32,3,40,2,0,34,1,107,34,3,32,2,73,4,64,15,11,32,0,32,1,106,33,0,32,3,65,212,9,40,2,0,70,4,64,32,3,32,5,65,4,106,34,1,40,2,0,34,2,65,3,113,65,3,71,13,1,26,65,200,9,32,0,54,2,0,32,1,32,2,65,126,113,54,2,0,32,3,32,0,65,1,114,54,2,4,32,0,32,3,106,32,0,54,2,0,15,11,32,1,65,3,118,33,4,32,1,65,128,2,73,4,64,32,3,40,2,8,34,1,32,3,40,2,12,34,2,70,4,64,65,192,9,65,192,9,40,2,0,65,1,32,4,116,65,127,115,113,54,2,0,5,32,1,32,2,54,2,12,32,2,32,1,54,2,8,11,32,3,12,1,11,32,3,40,2,24,33,7,32,3,32,3,40,2,12,34,1,70,4,64,2,64,32,3,65,16,106,34,2,65,4,106,34,4,40,2,0,34,1,4,64,32,4,33,2,5,32,2,40,2,0,34,1,69,4,64,65,0,33,1,12,2,11,11,3,64,2,64,32,1,65,20,106,34,4,40,2,0,34,6,69,4,64,32,1,65,16,106,34,4,40,2,0,34,6,69,13,1,11,32,4,33,2,32,6,33,1,12,1,11,11,32,2,65,0,54,2,0,11,5,32,3,40,2,8,34,2,32,1,54,2,12,32,1,32,2,54,2,8,11,32,7,4,127,32,3,32,3,40,2,28,34,2,65,2,116,65,240,11,106,34,4,40,2,0,70,4,64,32,4,32,1,54,2,0,32,1,69,4,64,65,196,9,65,196,9,40,2,0,65,1,32,2,116,65,127,115,113,54,2,0,32,3,12,3,11,5,32,7,65,16,106,34,2,32,7,65,20,106,32,3,32,2,40,2,0,70,27,32,1,54,2,0,32,3,32,1,69,13,2,26,11,32,1,32,7,54,2,24,32,3,65,16,106,34,4,40,2,0,34,2,4,64,32,1,32,2,54,2,16,32,2,32,1,54,2,24,11,32,4,40,2,4,34,2,4,64,32,1,32,2,54,2,20,32,2,32,1,54,2,24,11,32,3,5,32,3,11,11,11,34,7,32,5,79,4,64,15,11,32,5,65,4,106,34,1,40,2,0,34,8,65,1,113,69,4,64,15,11,32,8,65,2,113,4,64,32,1,32,8,65,126,113,54,2,0,32,3,32,0,65,1,114,54,2,4,32,0,32,7,106,32,0,54,2,0,32,0,33,2,5,32,5,65,216,9,40,2,0,70,4,64,65,204,9,32,0,65,204,9,40,2,0,106,34,0,54,2,0,65,216,9,32,3,54,2,0,32,3,32,0,65,1,114,54,2,4,65,212,9,40,2,0,32,3,71,4,64,15,11,65,212,9,65,0,54,2,0,65,200,9,65,0,54,2,0,15,11,65,212,9,40,2,0,32,5,70,4,64,65,200,9,32,0,65,200,9,40,2,0,106,34,0,54,2,0,65,212,9,32,7,54,2,0,32,3,32,0,65,1,114,54,2,4,32,0,32,7,106,32,0,54,2,0,15,11,32,8,65,3,118,33,4,32,8,65,128,2,73,4,64,32,5,40,2,8,34,1,32,5,40,2,12,34,2,70,4,64,65,192,9,65,192,9,40,2,0,65,1,32,4,116,65,127,115,113,54,2,0,5,32,1,32,2,54,2,12,32,2,32,1,54,2,8,11,5,2,64,32,5,40,2,24,33,9,32,5,40,2,12,34,1,32,5,70,4,64,2,64,32,5,65,16,106,34,2,65,4,106,34,4,40,2,0,34,1,4,64,32,4,33,2,5,32,2,40,2,0,34,1,69,4,64,65,0,33,1,12,2,11,11,3,64,2,64,32,1,65,20,106,34,4,40,2,0,34,6,69,4,64,32,1,65,16,106,34,4,40,2,0,34,6,69,13,1,11,32,4,33,2,32,6,33,1,12,1,11,11,32,2,65,0,54,2,0,11,5,32,5,40,2,8,34,2,32,1,54,2,12,32,1,32,2,54,2,8,11,32,9,4,64,32,5,40,2,28,34,2,65,2,116,65,240,11,106,34,4,40,2,0,32,5,70,4,64,32,4,32,1,54,2,0,32,1,69,4,64,65,196,9,65,196,9,40,2,0,65,1,32,2,116,65,127,115,113,54,2,0,12,3,11,5,32,9,65,16,106,34,2,32,9,65,20,106,32,2,40,2,0,32,5,70,27,32,1,54,2,0,32,1,69,13,2,11,32,1,32,9,54,2,24,32,5,65,16,106,34,4,40,2,0,34,2,4,64,32,1,32,2,54,2,16,32,2,32,1,54,2,24,11,32,4,40,2,4,34,2,4,64,32,1,32,2,54,2,20,32,2,32,1,54,2,24,11,11,11,11,32,3,32,0,32,8,65,120,113,106,34,2,65,1,114,54,2,4,32,2,32,7,106,32,2,54,2,0,32,3,65,212,9,40,2,0,70,4,64,65,200,9,32,2,54,2,0,15,11,11,32,2,65,3,118,33,1,32,2,65,128,2,73,4,64,32,1,65,3,116,65,232,9,106,33,0,65,192,9,40,2,0,34,2,65,1,32,1,116,34,1,113,4,127,32,0,65,8,106,34,2,40,2,0,5,65,192,9,32,1,32,2,114,54,2,0,32,0,65,8,106,33,2,32,0,11,33,1,32,2,32,3,54,2,0,32,1,32,3,54,2,12,32,3,32,1,54,2,8,32,3,32,0,54,2,12,15,11,32,2,65,8,118,34,0,4,127,32,2,65,255,255,255,7,75,4,127,65,31,5,32,0,32,0,65,128,254,63,106,65,16,118,65,8,113,34,1,116,34,4,65,128,224,31,106,65,16,118,65,4,113,33,0,65,14,32,0,32,1,114,32,4,32,0,116,34,0,65,128,128,15,106,65,16,118,65,2,113,34,1,114,107,32,0,32,1,116,65,15,118,106,34,0,65,1,116,32,2,32,0,65,7,106,118,65,1,113,114,11,5,65,0,11,34,1,65,2,116,65,240,11,106,33,0,32,3,32,1,54,2,28,32,3,65,0,54,2,20,32,3,65,0,54,2,16,65,196,9,40,2,0,34,4,65,1,32,1,116,34,6,113,4,64,2,64,32,2,32,0,40,2,0,34,0,40,2,4,65,120,113,70,4,64,32,0,33,1,5,2,64,32,2,65,0,65,25,32,1,65,1,118,107,32,1,65,31,70,27,116,33,4,3,64,32,0,65,16,106,32,4,65,31,118,65,2,116,106,34,6,40,2,0,34,1,4,64,32,4,65,1,116,33,4,32,2,32,1,40,2,4,65,120,113,70,13,2,32,1,33,0,12,1,11,11,32,6,32,3,54,2,0,32,3,32,0,54,2,24,32,3,32,3,54,2,12,32,3,32,3,54,2,8,12,2,11,11,32,1,65,8,106,34,0,40,2,0,34,2,32,3,54,2,12,32,0,32,3,54,2,0,32,3,32,2,54,2,8,32,3,32,1,54,2,12,32,3,65,0,54,2,24,11,5,65,196,9,32,4,32,6,114,54,2,0,32,0,32,3,54,2,0,32,3,32,0,54,2,24,32,3,32,3,54,2,12,32,3,32,3,54,2,8,11,65,224,9,65,224,9,40,2,0,65,127,106,34,0,54,2,0,32,0,4,64,15,11,65,136,13,33,0,3,64,32,0,40,2,0,34,3,65,8,106,33,0,32,3,13,0,11,65,224,9,65,127,54,2,0,11,161,52,1,12,127,35,2,33,10,35,2,65,16,106,36,2,32,0,65,245,1,73,4,64,65,192,9,40,2,0,34,5,65,16,32,0,65,11,106,65,120,113,32,0,65,11,73,27,34,2,65,3,118,34,0,118,34,1,65,3,113,4,64,32,1,65,1,113,65,1,115,32,0,106,34,1,65,3,116,65,232,9,106,34,2,65,8,106,34,4,40,2,0,34,3,65,8,106,34,6,40,2,0,33,0,32,0,32,2,70,4,64,65,192,9,65,1,32,1,116,65,127,115,32,5,113,54,2,0,5,32,0,32,2,54,2,12,32,4,32,0,54,2,0,11,32,3,32,1,65,3,116,34,0,65,3,114,54,2,4,32,0,32,3,106,65,4,106,34,0,32,0,40,2,0,65,1,114,54,2,0,32,10,36,2,32,6,15,11,32,2,65,200,9,40,2,0,34,7,75,4,127,32,1,4,64,32,1,32,0,116,65,2,32,0,116,34,0,65,0,32,0,107,114,113,34,0,65,0,32,0,107,113,65,127,106,34,0,65,12,118,65,16,113,34,1,32,0,32,1,118,34,0,65,5,118,65,8,113,34,1,114,32,0,32,1,118,34,0,65,2,118,65,4,113,34,1,114,32,0,32,1,118,34,0,65,1,118,65,2,113,34,1,114,32,0,32,1,118,34,0,65,1,118,65,1,113,34,1,114,32,0,32,1,118,106,34,3,65,3,116,65,232,9,106,34,4,65,8,106,34,6,40,2,0,34,1,65,8,106,34,8,40,2,0,33,0,32,0,32,4,70,4,64,65,192,9,65,1,32,3,116,65,127,115,32,5,113,34,0,54,2,0,5,32,0,32,4,54,2,12,32,6,32,0,54,2,0,32,5,33,0,11,32,1,32,2,65,3,114,54,2,4,32,1,32,2,106,34,4,32,3,65,3,116,34,3,32,2,107,34,5,65,1,114,54,2,4,32,1,32,3,106,32,5,54,2,0,32,7,4,64,65,212,9,40,2,0,33,3,32,7,65,3,118,34,2,65,3,116,65,232,9,106,33,1,65,1,32,2,116,34,2,32,0,113,4,127,32,1,65,8,106,34,2,40,2,0,5,65,192,9,32,0,32,2,114,54,2,0,32,1,65,8,106,33,2,32,1,11,33,0,32,2,32,3,54,2,0,32,0,32,3,54,2,12,32,3,32,0,54,2,8,32,3,32,1,54,2,12,11,65,200,9,32,5,54,2,0,65,212,9,32,4,54,2,0,32,10,36,2,32,8,15,11,65,196,9,40,2,0,34,11,4,127,65,0,32,11,107,32,11,113,65,127,106,34,0,65,12,118,65,16,113,34,1,32,0,32,1,118,34,0,65,5,118,65,8,113,34,1,114,32,0,32,1,118,34,0,65,2,118,65,4,113,34,1,114,32,0,32,1,118,34,0,65,1,118,65,2,113,34,1,114,32,0,32,1,118,34,0,65,1,118,65,1,113,34,1,114,32,0,32,1,118,106,65,2,116,65,240,11,106,40,2,0,34,3,33,0,32,3,40,2,4,65,120,113,32,2,107,33,8,3,64,2,64,32,0,40,2,16,34,1,4,64,32,1,33,0,5,32,0,40,2,20,34,0,69,13,1,11,32,0,32,3,32,0,40,2,4,65,120,113,32,2,107,34,1,32,8,73,34,4,27,33,3,32,1,32,8,32,4,27,33,8,12,1,11,11,32,2,32,3,106,34,12,32,3,75,4,127,32,3,40,2,24,33,9,32,3,32,3,40,2,12,34,0,70,4,64,2,64,32,3,65,20,106,34,1,40,2,0,34,0,69,4,64,32,3,65,16,106,34,1,40,2,0,34,0,69,4,64,65,0,33,0,12,2,11,11,3,64,2,64,32,0,65,20,106,34,4,40,2,0,34,6,69,4,64,32,0,65,16,106,34,4,40,2,0,34,6,69,13,1,11,32,4,33,1,32,6,33,0,12,1,11,11,32,1,65,0,54,2,0,11,5,32,3,40,2,8,34,1,32,0,54,2,12,32,0,32,1,54,2,8,11,32,9,4,64,2,64,32,3,32,3,40,2,28,34,1,65,2,116,65,240,11,106,34,4,40,2,0,70,4,64,32,4,32,0,54,2,0,32,0,69,4,64,65,196,9,65,1,32,1,116,65,127,115,32,11,113,54,2,0,12,2,11,5,32,9,65,16,106,34,1,32,9,65,20,106,32,3,32,1,40,2,0,70,27,32,0,54,2,0,32,0,69,13,1,11,32,0,32,9,54,2,24,32,3,40,2,16,34,1,4,64,32,0,32,1,54,2,16,32,1,32,0,54,2,24,11,32,3,40,2,20,34,1,4,64,32,0,32,1,54,2,20,32,1,32,0,54,2,24,11,11,11,32,8,65,16,73,4,64,32,3,32,2,32,8,106,34,0,65,3,114,54,2,4,32,0,32,3,106,65,4,106,34,0,32,0,40,2,0,65,1,114,54,2,0,5,32,3,32,2,65,3,114,54,2,4,32,12,32,8,65,1,114,54,2,4,32,8,32,12,106,32,8,54,2,0,32,7,4,64,65,212,9,40,2,0,33,4,32,7,65,3,118,34,1,65,3,116,65,232,9,106,33,0,65,1,32,1,116,34,1,32,5,113,4,127,32,0,65,8,106,34,2,40,2,0,5,65,192,9,32,1,32,5,114,54,2,0,32,0,65,8,106,33,2,32,0,11,33,1,32,2,32,4,54,2,0,32,1,32,4,54,2,12,32,4,32,1,54,2,8,32,4,32,0,54,2,12,11,65,200,9,32,8,54,2,0,65,212,9,32,12,54,2,0,11,32,10,36,2,32,3,65,8,106,15,5,32,2,11,5,32,2,11,5,32,2,11,33,0,5,32,0,65,191,127,75,4,64,65,127,33,0,5,2,64,32,0,65,11,106,34,1,65,120,113,33,0,65,196,9,40,2,0,34,5,4,64,32,1,65,8,118,34,1,4,127,32,0,65,255,255,255,7,75,4,127,65,31,5,32,1,32,1,65,128,254,63,106,65,16,118,65,8,113,34,2,116,34,3,65,128,224,31,106,65,16,118,65,4,113,33,1,65,14,32,1,32,2,114,32,3,32,1,116,34,1,65,128,128,15,106,65,16,118,65,2,113,34,2,114,107,32,1,32,2,116,65,15,118,106,34,1,65,1,116,32,0,32,1,65,7,106,118,65,1,113,114,11,5,65,0,11,33,7,65,0,32,0,107,33,3,2,64,2,64,32,7,65,2,116,65,240,11,106,40,2,0,34,1,4,127,65,0,33,2,32,0,65,0,65,25,32,7,65,1,118,107,32,7,65,31,70,27,116,33,6,3,127,32,1,40,2,4,65,120,113,32,0,107,34,8,32,3,73,4,64,32,8,4,127,32,8,33,3,32,1,5,65,0,33,3,32,1,33,2,12,4,11,33,2,11,32,4,32,1,40,2,20,34,4,32,4,69,32,4,32,1,65,16,106,32,6,65,31,118,65,2,116,106,40,2,0,34,1,70,114,27,33,4,32,6,65,1,116,33,6,32,1,13,0,32,2,11,5,65,0,11,33,1,32,1,32,4,114,4,127,32,4,5,32,5,65,2,32,7,116,34,1,65,0,32,1,107,114,113,34,2,69,13,4,65,0,33,1,32,2,65,0,32,2,107,113,65,127,106,34,2,65,12,118,65,16,113,34,4,32,2,32,4,118,34,2,65,5,118,65,8,113,34,4,114,32,2,32,4,118,34,2,65,2,118,65,4,113,34,4,114,32,2,32,4,118,34,2,65,1,118,65,2,113,34,4,114,32,2,32,4,118,34,2,65,1,118,65,1,113,34,4,114,32,2,32,4,118,106,65,2,116,65,240,11,106,40,2,0,11,34,2,13,0,32,1,33,4,12,1,11,32,1,33,4,32,3,33,1,3,127,32,2,40,2,16,34,3,69,4,64,32,2,40,2,20,33,3,11,32,2,40,2,4,65,120,113,32,0,107,34,8,32,1,73,33,6,32,8,32,1,32,6,27,33,1,32,2,32,4,32,6,27,33,4,32,3,4,127,32,3,33,2,12,1,5,32,1,11,11,33,3,11,32,4,4,64,32,3,65,200,9,40,2,0,32,0,107,73,4,64,32,0,32,4,106,34,7,32,4,75,4,64,32,4,40,2,24,33,9,32,4,32,4,40,2,12,34,1,70,4,64,2,64,32,4,65,20,106,34,2,40,2,0,34,1,69,4,64,32,4,65,16,106,34,2,40,2,0,34,1,69,4,64,65,0,33,1,12,2,11,11,3,64,2,64,32,1,65,20,106,34,6,40,2,0,34,8,69,4,64,32,1,65,16,106,34,6,40,2,0,34,8,69,13,1,11,32,6,33,2,32,8,33,1,12,1,11,11,32,2,65,0,54,2,0,11,5,32,4,40,2,8,34,2,32,1,54,2,12,32,1,32,2,54,2,8,11,32,9,4,64,2,64,32,4,32,4,40,2,28,34,2,65,2,116,65,240,11,106,34,6,40,2,0,70,4,64,32,6,32,1,54,2,0,32,1,69,4,64,65,196,9,32,5,65,1,32,2,116,65,127,115,113,34,1,54,2,0,12,2,11,5,32,9,65,16,106,34,2,32,9,65,20,106,32,4,32,2,40,2,0,70,27,32,1,54,2,0,32,1,69,4,64,32,5,33,1,12,2,11,11,32,1,32,9,54,2,24,32,4,40,2,16,34,2,4,64,32,1,32,2,54,2,16,32,2,32,1,54,2,24,11,32,4,40,2,20,34,2,4,64,32,1,32,2,54,2,20,32,2,32,1,54,2,24,11,32,5,33,1,11,5,32,5,33,1,11,32,3,65,16,73,4,64,32,4,32,0,32,3,106,34,0,65,3,114,54,2,4,32,0,32,4,106,65,4,106,34,0,32,0,40,2,0,65,1,114,54,2,0,5,2,64,32,4,32,0,65,3,114,54,2,4,32,7,32,3,65,1,114,54,2,4,32,3,32,7,106,32,3,54,2,0,32,3,65,3,118,33,2,32,3,65,128,2,73,4,64,32,2,65,3,116,65,232,9,106,33,0,65,192,9,40,2,0,34,1,65,1,32,2,116,34,2,113,4,127,32,0,65,8,106,34,2,40,2,0,5,65,192,9,32,1,32,2,114,54,2,0,32,0,65,8,106,33,2,32,0,11,33,1,32,2,32,7,54,2,0,32,1,32,7,54,2,12,32,7,32,1,54,2,8,32,7,32,0,54,2,12,12,1,11,32,3,65,8,118,34,0,4,127,32,3,65,255,255,255,7,75,4,127,65,31,5,32,0,32,0,65,128,254,63,106,65,16,118,65,8,113,34,2,116,34,5,65,128,224,31,106,65,16,118,65,4,113,33,0,65,14,32,0,32,2,114,32,5,32,0,116,34,0,65,128,128,15,106,65,16,118,65,2,113,34,2,114,107,32,0,32,2,116,65,15,118,106,34,0,65,1,116,32,3,32,0,65,7,106,118,65,1,113,114,11,5,65,0,11,34,2,65,2,116,65,240,11,106,33,0,32,7,32,2,54,2,28,32,7,65,16,106,34,5,65,0,54,2,4,32,5,65,0,54,2,0,65,1,32,2,116,34,5,32,1,113,69,4,64,65,196,9,32,1,32,5,114,54,2,0,32,0,32,7,54,2,0,32,7,32,0,54,2,24,32,7,32,7,54,2,12,32,7,32,7,54,2,8,12,1,11,32,3,32,0,40,2,0,34,0,40,2,4,65,120,113,70,4,64,32,0,33,1,5,2,64,32,3,65,0,65,25,32,2,65,1,118,107,32,2,65,31,70,27,116,33,2,3,64,32,0,65,16,106,32,2,65,31,118,65,2,116,106,34,5,40,2,0,34,1,4,64,32,2,65,1,116,33,2,32,3,32,1,40,2,4,65,120,113,70,13,2,32,1,33,0,12,1,11,11,32,5,32,7,54,2,0,32,7,32,0,54,2,24,32,7,32,7,54,2,12,32,7,32,7,54,2,8,12,2,11,11,32,1,65,8,106,34,0,40,2,0,34,2,32,7,54,2,12,32,0,32,7,54,2,0,32,7,32,2,54,2,8,32,7,32,1,54,2,12,32,7,65,0,54,2,24,11,11,32,10,36,2,32,4,65,8,106,15,11,11,11,11,11,11,11,2,64,65,200,9,40,2,0,34,2,32,0,79,4,64,65,212,9,40,2,0,33,1,32,2,32,0,107,34,3,65,15,75,4,64,65,212,9,32,0,32,1,106,34,5,54,2,0,65,200,9,32,3,54,2,0,32,5,32,3,65,1,114,54,2,4,32,1,32,2,106,32,3,54,2,0,32,1,32,0,65,3,114,54,2,4,5,65,200,9,65,0,54,2,0,65,212,9,65,0,54,2,0,32,1,32,2,65,3,114,54,2,4,32,1,32,2,106,65,4,106,34,0,32,0,40,2,0,65,1,114,54,2,0,11,12,1,11,2,64,65,204,9,40,2,0,34,2,32,0,75,4,64,65,204,9,32,2,32,0,107,34,2,54,2,0,12,1,11,32,0,65,47,106,34,4,65,152,13,40,2,0,4,127,65,160,13,40,2,0,5,65,160,13,65,128,32,54,2,0,65,156,13,65,128,32,54,2,0,65,164,13,65,127,54,2,0,65,168,13,65,127,54,2,0,65,172,13,65,0,54,2,0,65,252,12,65,0,54,2,0,65,152,13,32,10,65,112,113,65,216,170,213,170,5,115,54,2,0,65,128,32,11,34,1,106,34,6,65,0,32,1,107,34,8,113,34,5,32,0,77,4,64,32,10,36,2,65,0,15,11,65,248,12,40,2,0,34,1,4,64,32,5,65,240,12,40,2,0,34,3,106,34,7,32,3,77,32,7,32,1,75,114,4,64,32,10,36,2,65,0,15,11,11,32,0,65,48,106,33,7,2,64,2,64,65,252,12,40,2,0,65,4,113,4,64,65,0,33,2,5,2,64,2,64,2,64,65,216,9,40,2,0,34,1,69,13,0,65,128,13,33,3,3,64,2,64,32,3,40,2,0,34,9,32,1,77,4,64,32,9,32,3,40,2,4,106,32,1,75,13,1,11,32,3,40,2,8,34,3,13,1,12,2,11,11,32,8,32,6,32,2,107,113,34,2,65,255,255,255,255,7,73,4,64,32,2,16,8,34,1,32,3,40,2,0,32,3,40,2,4,106,70,4,64,32,1,65,127,71,13,6,5,12,3,11,5,65,0,33,2,11,12,2,11,65,0,16,8,34,1,65,127,70,4,127,65,0,5,65,240,12,40,2,0,34,6,32,5,32,1,65,156,13,40,2,0,34,2,65,127,106,34,3,106,65,0,32,2,107,113,32,1,107,65,0,32,1,32,3,113,27,106,34,2,106,33,3,32,2,65,255,255,255,255,7,73,32,2,32,0,75,113,4,127,65,248,12,40,2,0,34,8,4,64,32,3,32,6,77,32,3,32,8,75,114,4,64,65,0,33,2,12,5,11,11,32,1,32,2,16,8,34,3,70,13,5,32,3,33,1,12,2,5,65,0,11,11,33,2,12,1,11,32,1,65,127,71,32,2,65,255,255,255,255,7,73,113,32,7,32,2,75,113,69,4,64,32,1,65,127,70,4,64,65,0,33,2,12,2,5,12,4,11,0,11,65,160,13,40,2,0,34,3,32,4,32,2,107,106,65,0,32,3,107,113,34,3,65,255,255,255,255,7,79,13,2,65,0,32,2,107,33,4,32,3,16,8,65,127,70,4,127,32,4,16,8,26,65,0,5,32,2,32,3,106,33,2,12,3,11,33,2,11,65,252,12,65,252,12,40,2,0,65,4,114,54,2,0,11,32,5,65,255,255,255,255,7,73,4,64,32,5,16,8,33,1,65,0,16,8,34,3,32,1,107,34,4,32,0,65,40,106,75,33,5,32,4,32,2,32,5,27,33,2,32,5,65,1,115,32,1,65,127,70,114,32,1,65,127,71,32,3,65,127,71,113,32,1,32,3,73,113,65,1,115,114,69,13,1,11,12,1,11,65,240,12,32,2,65,240,12,40,2,0,106,34,3,54,2,0,32,3,65,244,12,40,2,0,75,4,64,65,244,12,32,3,54,2,0,11,65,216,9,40,2,0,34,5,4,64,2,64,65,128,13,33,3,2,64,2,64,3,64,32,1,32,3,40,2,0,34,4,32,3,40,2,4,34,6,106,70,13,1,32,3,40,2,8,34,3,13,0,11,12,1,11,32,3,65,4,106,33,8,32,3,40,2,12,65,8,113,69,4,64,32,4,32,5,77,32,1,32,5,75,113,4,64,32,8,32,2,32,6,106,54,2,0,32,5,65,0,32,5,65,8,106,34,1,107,65,7,113,65,0,32,1,65,7,113,27,34,3,106,33,1,32,2,65,204,9,40,2,0,106,34,4,32,3,107,33,2,65,216,9,32,1,54,2,0,65,204,9,32,2,54,2,0,32,1,32,2,65,1,114,54,2,4,32,4,32,5,106,65,40,54,2,4,65,220,9,65,168,13,40,2,0,54,2,0,12,3,11,11,11,32,1,65,208,9,40,2,0,73,4,64,65,208,9,32,1,54,2,0,11,32,1,32,2,106,33,4,65,128,13,33,3,2,64,2,64,3,64,32,4,32,3,40,2,0,70,13,1,32,3,40,2,8,34,3,13,0,11,12,1,11,32,3,40,2,12,65,8,113,69,4,64,32,3,32,1,54,2,0,32,3,65,4,106,34,3,32,2,32,3,40,2,0,106,54,2,0,32,0,32,1,65,0,32,1,65,8,106,34,1,107,65,7,113,65,0,32,1,65,7,113,27,106,34,7,106,33,6,32,4,65,0,32,4,65,8,106,34,1,107,65,7,113,65,0,32,1,65,7,113,27,106,34,2,32,7,107,32,0,107,33,3,32,7,32,0,65,3,114,54,2,4,32,2,32,5,70,4,64,65,204,9,32,3,65,204,9,40,2,0,106,34,0,54,2,0,65,216,9,32,6,54,2,0,32,6,32,0,65,1,114,54,2,4,5,2,64,32,2,65,212,9,40,2,0,70,4,64,65,200,9,32,3,65,200,9,40,2,0,106,34,0,54,2,0,65,212,9,32,6,54,2,0,32,6,32,0,65,1,114,54,2,4,32,0,32,6,106,32,0,54,2,0,12,1,11,32,2,40,2,4,34,9,65,3,113,65,1,70,4,64,32,9,65,3,118,33,5,32,9,65,128,2,73,4,64,32,2,40,2,8,34,0,32,2,40,2,12,34,1,70,4,64,65,192,9,65,192,9,40,2,0,65,1,32,5,116,65,127,115,113,54,2,0,5,32,0,32,1,54,2,12,32,1,32,0,54,2,8,11,5,2,64,32,2,40,2,24,33,8,32,2,32,2,40,2,12,34,0,70,4,64,2,64,32,2,65,16,106,34,1,65,4,106,34,5,40,2,0,34,0,4,64,32,5,33,1,5,32,1,40,2,0,34,0,69,4,64,65,0,33,0,12,2,11,11,3,64,2,64,32,0,65,20,106,34,5,40,2,0,34,4,69,4,64,32,0,65,16,106,34,5,40,2,0,34,4,69,13,1,11,32,5,33,1,32,4,33,0,12,1,11,11,32,1,65,0,54,2,0,11,5,32,2,40,2,8,34,1,32,0,54,2,12,32,0,32,1,54,2,8,11,32,8,69,13,0,32,2,32,2,40,2,28,34,1,65,2,116,65,240,11,106,34,5,40,2,0,70,4,64,2,64,32,5,32,0,54,2,0,32,0,13,0,65,196,9,65,196,9,40,2,0,65,1,32,1,116,65,127,115,113,54,2,0,12,2,11,5,32,8,65,16,106,34,1,32,8,65,20,106,32,2,32,1,40,2,0,70,27,32,0,54,2,0,32,0,69,13,1,11,32,0,32,8,54,2,24,32,2,65,16,106,34,5,40,2,0,34,1,4,64,32,0,32,1,54,2,16,32,1,32,0,54,2,24,11,32,5,40,2,4,34,1,69,13,0,32,0,32,1,54,2,20,32,1,32,0,54,2,24,11,11,32,2,32,9,65,120,113,34,0,106,33,2,32,0,32,3,106,33,3,11,32,2,65,4,106,34,0,32,0,40,2,0,65,126,113,54,2,0,32,6,32,3,65,1,114,54,2,4,32,3,32,6,106,32,3,54,2,0,32,3,65,3,118,33,1,32,3,65,128,2,73,4,64,32,1,65,3,116,65,232,9,106,33,0,65,192,9,40,2,0,34,2,65,1,32,1,116,34,1,113,4,127,32,0,65,8,106,34,2,40,2,0,5,65,192,9,32,1,32,2,114,54,2,0,32,0,65,8,106,33,2,32,0,11,33,1,32,2,32,6,54,2,0,32,1,32,6,54,2,12,32,6,32,1,54,2,8,32,6,32,0,54,2,12,12,1,11,32,3,65,8,118,34,0,4,127,32,3,65,255,255,255,7,75,4,127,65,31,5,32,0,32,0,65,128,254,63,106,65,16,118,65,8,113,34,1,116,34,2,65,128,224,31,106,65,16,118,65,4,113,33,0,65,14,32,0,32,1,114,32,2,32,0,116,34,0,65,128,128,15,106,65,16,118,65,2,113,34,1,114,107,32,0,32,1,116,65,15,118,106,34,0,65,1,116,32,3,32,0,65,7,106,118,65,1,113,114,11,5,65,0,11,34,1,65,2,116,65,240,11,106,33,0,32,6,32,1,54,2,28,32,6,65,16,106,34,2,65,0,54,2,4,32,2,65,0,54,2,0,65,196,9,40,2,0,34,2,65,1,32,1,116,34,5,113,69,4,64,65,196,9,32,2,32,5,114,54,2,0,32,0,32,6,54,2,0,32,6,32,0,54,2,24,32,6,32,6,54,2,12,32,6,32,6,54,2,8,12,1,11,32,3,32,0,40,2,0,34,0,40,2,4,65,120,113,70,4,64,32,0,33,1,5,2,64,32,3,65,0,65,25,32,1,65,1,118,107,32,1,65,31,70,27,116,33,2,3,64,32,0,65,16,106,32,2,65,31,118,65,2,116,106,34,5,40,2,0,34,1,4,64,32,2,65,1,116,33,2,32,3,32,1,40,2,4,65,120,113,70,13,2,32,1,33,0,12,1,11,11,32,5,32,6,54,2,0,32,6,32,0,54,2,24,32,6,32,6,54,2,12,32,6,32,6,54,2,8,12,2,11,11,32,1,65,8,106,34,0,40,2,0,34,2,32,6,54,2,12,32,0,32,6,54,2,0,32,6,32,2,54,2,8,32,6,32,1,54,2,12,32,6,65,0,54,2,24,11,11,32,10,36,2,32,7,65,8,106,15,11,11,65,128,13,33,3,3,64,2,64,32,3,40,2,0,34,4,32,5,77,4,64,32,4,32,3,40,2,4,106,34,6,32,5,75,13,1,11,32,3,40,2,8,33,3,12,1,11,11,32,6,65,81,106,34,4,65,8,106,33,3,32,5,32,4,65,0,32,3,107,65,7,113,65,0,32,3,65,7,113,27,106,34,3,32,3,32,5,65,16,106,34,7,73,27,34,3,65,8,106,33,4,65,216,9,32,1,65,0,32,1,65,8,106,34,8,107,65,7,113,65,0,32,8,65,7,113,27,34,8,106,34,9,54,2,0,65,204,9,32,2,65,88,106,34,11,32,8,107,34,8,54,2,0,32,9,32,8,65,1,114,54,2,4,32,1,32,11,106,65,40,54,2,4,65,220,9,65,168,13,40,2,0,54,2,0,32,3,65,4,106,34,8,65,27,54,2,0,32,4,65,128,13,41,2,0,55,2,0,32,4,65,136,13,41,2,0,55,2,8,65,128,13,32,1,54,2,0,65,132,13,32,2,54,2,0,65,140,13,65,0,54,2,0,65,136,13,32,4,54,2,0,32,3,65,24,106,33,1,3,64,32,1,65,4,106,34,2,65,7,54,2,0,32,1,65,8,106,32,6,73,4,64,32,2,33,1,12,1,11,11,32,3,32,5,71,4,64,32,8,32,8,40,2,0,65,126,113,54,2,0,32,5,32,3,32,5,107,34,4,65,1,114,54,2,4,32,3,32,4,54,2,0,32,4,65,3,118,33,2,32,4,65,128,2,73,4,64,32,2,65,3,116,65,232,9,106,33,1,65,192,9,40,2,0,34,3,65,1,32,2,116,34,2,113,4,127,32,1,65,8,106,34,3,40,2,0,5,65,192,9,32,2,32,3,114,54,2,0,32,1,65,8,106,33,3,32,1,11,33,2,32,3,32,5,54,2,0,32,2,32,5,54,2,12,32,5,32,2,54,2,8,32,5,32,1,54,2,12,12,2,11,32,4,65,8,118,34,1,4,127,32,4,65,255,255,255,7,75,4,127,65,31,5,32,1,32,1,65,128,254,63,106,65,16,118,65,8,113,34,2,116,34,3,65,128,224,31,106,65,16,118,65,4,113,33,1,65,14,32,1,32,2,114,32,3,32,1,116,34,1,65,128,128,15,106,65,16,118,65,2,113,34,2,114,107,32,1,32,2,116,65,15,118,106,34,1,65,1,116,32,4,32,1,65,7,106,118,65,1,113,114,11,5,65,0,11,34,2,65,2,116,65,240,11,106,33,1,32,5,32,2,54,2,28,32,5,65,0,54,2,20,32,7,65,0,54,2,0,65,196,9,40,2,0,34,3,65,1,32,2,116,34,6,113,69,4,64,65,196,9,32,3,32,6,114,54,2,0,32,1,32,5,54,2,0,32,5,32,1,54,2,24,32,5,32,5,54,2,12,32,5,32,5,54,2,8,12,2,11,32,4,32,1,40,2,0,34,1,40,2,4,65,120,113,70,4,64,32,1,33,2,5,2,64,32,4,65,0,65,25,32,2,65,1,118,107,32,2,65,31,70,27,116,33,3,3,64,32,1,65,16,106,32,3,65,31,118,65,2,116,106,34,6,40,2,0,34,2,4,64,32,3,65,1,116,33,3,32,4,32,2,40,2,4,65,120,113,70,13,2,32,2,33,1,12,1,11,11,32,6,32,5,54,2,0,32,5,32,1,54,2,24,32,5,32,5,54,2,12,32,5,32,5,54,2,8,12,3,11,11,32,2,65,8,106,34,1,40,2,0,34,3,32,5,54,2,12,32,1,32,5,54,2,0,32,5,32,3,54,2,8,32,5,32,2,54,2,12,32,5,65,0,54,2,24,11,11,5,65,208,9,40,2,0,34,3,69,32,1,32,3,73,114,4,64,65,208,9,32,1,54,2,0,11,65,128,13,32,1,54,2,0,65,132,13,32,2,54,2,0,65,140,13,65,0,54,2,0,65,228,9,65,152,13,40,2,0,54,2,0,65,224,9,65,127,54,2,0,65,244,9,65,232,9,54,2,0,65,240,9,65,232,9,54,2,0,65,252,9,65,240,9,54,2,0,65,248,9,65,240,9,54,2,0,65,132,10,65,248,9,54,2,0,65,128,10,65,248,9,54,2,0,65,140,10,65,128,10,54,2,0,65,136,10,65,128,10,54,2,0,65,148,10,65,136,10,54,2,0,65,144,10,65,136,10,54,2,0,65,156,10,65,144,10,54,2,0,65,152,10,65,144,10,54,2,0,65,164,10,65,152,10,54,2,0,65,160,10,65,152,10,54,2,0,65,172,10,65,160,10,54,2,0,65,168,10,65,160,10,54,2,0,65,180,10,65,168,10,54,2,0,65,176,10,65,168,10,54,2,0,65,188,10,65,176,10,54,2,0,65,184,10,65,176,10,54,2,0,65,196,10,65,184,10,54,2,0,65,192,10,65,184,10,54,2,0,65,204,10,65,192,10,54,2,0,65,200,10,65,192,10,54,2,0,65,212,10,65,200,10,54,2,0,65,208,10,65,200,10,54,2,0,65,220,10,65,208,10,54,2,0,65,216,10,65,208,10,54,2,0,65,228,10,65,216,10,54,2,0,65,224,10,65,216,10,54,2,0,65,236,10,65,224,10,54,2,0,65,232,10,65,224,10,54,2,0,65,244,10,65,232,10,54,2,0,65,240,10,65,232,10,54,2,0,65,252,10,65,240,10,54,2,0,65,248,10,65,240,10,54,2,0,65,132,11,65,248,10,54,2,0,65,128,11,65,248,10,54,2,0,65,140,11,65,128,11,54,2,0,65,136,11,65,128,11,54,2,0,65,148,11,65,136,11,54,2,0,65,144,11,65,136,11,54,2,0,65,156,11,65,144,11,54,2,0,65,152,11,65,144,11,54,2,0,65,164,11,65,152,11,54,2,0,65,160,11,65,152,11,54,2,0,65,172,11,65,160,11,54,2,0,65,168,11,65,160,11,54,2,0,65,180,11,65,168,11,54,2,0,65,176,11,65,168,11,54,2,0,65,188,11,65,176,11,54,2,0,65,184,11,65,176,11,54,2,0,65,196,11,65,184,11,54,2,0,65,192,11,65,184,11,54,2,0,65,204,11,65,192,11,54,2,0,65,200,11,65,192,11,54,2,0,65,212,11,65,200,11,54,2,0,65,208,11,65,200,11,54,2,0,65,220,11,65,208,11,54,2,0,65,216,11,65,208,11,54,2,0,65,228,11,65,216,11,54,2,0,65,224,11,65,216,11,54,2,0,65,236,11,65,224,11,54,2,0,65,232,11,65,224,11,54,2,0,65,216,9,32,1,65,0,32,1,65,8,106,34,3,107,65,7,113,65,0,32,3,65,7,113,27,34,3,106,34,5,54,2,0,65,204,9,32,2,65,88,106,34,2,32,3,107,34,3,54,2,0,32,5,32,3,65,1,114,54,2,4,32,1,32,2,106,65,40,54,2,4,65,220,9,65,168,13,40,2,0,54,2,0,11,65,204,9,40,2,0,34,1,32,0,75,4,64,65,204,9,32,1,32,0,107,34,2,54,2,0,12,2,11,11,16,5,65,12,54,2,0,32,10,36,2,65,0,15,11,65,216,9,32,0,65,216,9,40,2,0,34,1,106,34,3,54,2,0,32,3,32,2,65,1,114,54,2,4,32,1,32,0,65,3,114,54,2,4,11,32,10,36,2,32,1,65,8,106,11,184,3,1,3,127,35,2,33,4,35,2,65,208,1,106,36,2,2,64,32,1,65,192,0,75,13,0,32,0,69,13,0,32,2,69,32,3,65,0,71,113,13,0,32,4,65,0,65,200,1,16,7,26,32,3,65,200,0,79,4,64,3,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,65,200,0,71,13,0,11,32,4,16,6,32,2,65,200,0,106,33,2,32,3,65,184,127,106,34,3,65,200,0,79,13,0,11,11,32,3,32,4,106,34,5,32,5,44,0,0,65,1,115,58,0,0,32,4,65,199,0,106,34,5,32,5,44,0,0,65,128,127,115,58,0,0,32,3,4,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,32,3,71,13,0,11,11,32,4,16,6,32,1,65,200,0,79,4,64,32,0,33,2,65,0,33,3,3,127,32,0,32,3,65,200,0,108,106,34,5,32,4,41,0,0,55,0,0,32,5,32,4,41,0,8,55,0,8,32,5,32,4,41,0,16,55,0,16,32,5,32,4,41,0,24,55,0,24,32,5,32,4,41,0,32,55,0,32,32,5,32,4,41,0,40,55,0,40,32,5,32,4,41,0,48,55,0,48,32,5,32,4,41,0,56,55,0,56,32,5,65,64,107,32,4,65,64,107,41,0,0,55,0,0,32,4,16,6,32,2,65,200,0,106,33,2,32,3,65,1,106,33,3,32,1,65,184,127,106,34,1,65,200,0,79,13,0,32,2,11,33,0,11,32,1,4,64,65,0,33,2,3,64,32,0,32,2,106,32,2,32,4,106,44,0,0,58,0,0,32,2,65,1,106,34,2,32,1,71,13,0,11,11,32,4,36,2,65,0,15,11,32,4,36,2,65,127,11,223,3,1,3,127,35,2,33,4,35,2,65,208,1,106,36,2,2,64,32,1,65,48,75,13,0,32,0,69,13,0,32,2,69,32,3,65,0,71,113,13,0,32,4,65,0,65,200,1,16,7,26,32,3,65,232,0,79,4,64,3,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,65,232,0,71,13,0,11,32,4,16,6,32,2,65,232,0,106,33,2,32,3,65,152,127,106,34,3,65,232,0,79,13,0,11,11,32,3,32,4,106,34,5,32,5,44,0,0,65,1,115,58,0,0,32,4,65,231,0,106,34,5,32,5,44,0,0,65,128,127,115,58,0,0,32,3,4,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,32,3,71,13,0,11,11,32,4,16,6,32,1,65,232,0,79,4,64,32,0,33,2,65,0,33,3,3,127,32,0,32,3,65,232,0,108,106,34,5,32,4,41,0,0,55,0,0,32,5,32,4,41,0,8,55,0,8,32,5,32,4,41,0,16,55,0,16,32,5,32,4,41,0,24,55,0,24,32,5,32,4,41,0,32,55,0,32,32,5,32,4,41,0,40,55,0,40,32,5,32,4,41,0,48,55,0,48,32,5,32,4,41,0,56,55,0,56,32,5,65,64,107,32,4,65,64,107,41,0,0,55,0,0,32,5,32,4,41,0,72,55,0,72,32,5,32,4,41,0,80,55,0,80,32,5,32,4,41,0,88,55,0,88,32,5,32,4,41,0,96,55,0,96,32,4,16,6,32,2,65,232,0,106,33,2,32,3,65,1,106,33,3,32,1,65,152,127,106,34,1,65,232,0,79,13,0,32,2,11,33,0,11,32,1,4,64,65,0,33,2,3,64,32,0,32,2,106,32,2,32,4,106,44,0,0,58,0,0,32,2,65,1,106,34,2,32,1,71,13,0,11,11,32,4,36,2,65,0,15,11,32,4,36,2,65,127,11,223,2,1,3,127,35,2,33,4,35,2,65,208,1,106,36,2,2,64,32,1,65,32,75,13,0,32,0,69,13,0,32,2,69,32,3,65,0,71,113,13,0,32,4,65,0,65,200,1,16,7,26,32,3,65,136,1,79,4,64,3,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,65,136,1,71,13,0,11,32,4,16,6,32,2,65,136,1,106,33,2,32,3,65,248,126,106,34,3,65,136,1,79,13,0,11,11,32,3,32,4,106,34,5,32,5,44,0,0,65,1,115,58,0,0,32,4,65,135,1,106,34,5,32,5,44,0,0,65,128,127,115,58,0,0,32,3,4,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,32,3,71,13,0,11,11,32,4,16,6,32,1,65,136,1,79,4,64,32,0,33,2,65,0,33,3,3,127,32,0,32,3,65,136,1,108,106,32,4,65,136,1,16,9,26,32,4,16,6,32,2,65,136,1,106,33,2,32,3,65,1,106,33,3,32,1,65,248,126,106,34,1,65,136,1,79,13,0,32,2,11,33,0,11,32,1,4,64,65,0,33,2,3,64,32,0,32,2,106,32,2,32,4,106,44,0,0,58,0,0,32,2,65,1,106,34,2,32,1,71,13,0,11,11,32,4,36,2,65,0,15,11,32,4,36,2,65,127,11,223,2,1,3,127,35,2,33,4,35,2,65,208,1,106,36,2,2,64,32,1,65,28,75,13,0,32,0,69,13,0,32,2,69,32,3,65,0,71,113,13,0,32,4,65,0,65,200,1,16,7,26,32,3,65,144,1,79,4,64,3,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,65,144,1,71,13,0,11,32,4,16,6,32,2,65,144,1,106,33,2,32,3,65,240,126,106,34,3,65,144,1,79,13,0,11,11,32,3,32,4,106,34,5,32,5,44,0,0,65,1,115,58,0,0,32,4,65,143,1,106,34,5,32,5,44,0,0,65,128,127,115,58,0,0,32,3,4,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,32,3,71,13,0,11,11,32,4,16,6,32,1,65,144,1,79,4,64,32,0,33,2,65,0,33,3,3,127,32,0,32,3,65,144,1,108,106,32,4,65,144,1,16,9,26,32,4,16,6,32,2,65,144,1,106,33,2,32,3,65,1,106,33,3,32,1,65,240,126,106,34,1,65,144,1,79,13,0,32,2,11,33,0,11,32,1,4,64,65,0,33,2,3,64,32,0,32,2,106,32,2,32,4,106,44,0,0,58,0,0,32,2,65,1,106,34,2,32,1,71,13,0,11,11,32,4,36,2,65,0,15,11,32,4,36,2,65,127,11,184,3,1,3,127,35,2,33,4,35,2,65,208,1,106,36,2,2,64,32,1,65,192,0,75,13,0,32,0,69,13,0,32,2,69,32,3,65,0,71,113,13,0,32,4,65,0,65,200,1,16,7,26,32,3,65,200,0,79,4,64,3,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,65,200,0,71,13,0,11,32,4,16,6,32,2,65,200,0,106,33,2,32,3,65,184,127,106,34,3,65,200,0,79,13,0,11,11,32,3,32,4,106,34,5,32,5,44,0,0,65,6,115,58,0,0,32,4,65,199,0,106,34,5,32,5,44,0,0,65,128,127,115,58,0,0,32,3,4,64,65,0,33,5,3,64,32,4,32,5,106,34,6,32,2,32,5,106,44,0,0,32,6,44,0,0,115,58,0,0,32,5,65,1,106,34,5,32,3,71,13,0,11,11,32,4,16,6,32,1,65,200,0,79,4,64,32,0,33,2,65,0,33,3,3,127,32,0,32,3,65,200,0,108,106,34,5,32,4,41,0,0,55,0,0,32,5,32,4,41,0,8,55,0,8,32,5,32,4,41,0,16,55,0,16,32,5,32,4,41,0,24,55,0,24,32,5,32,4,41,0,32,55,0,32,32,5,32,4,41,0,40,55,0,40,32,5,32,4,41,0,48,55,0,48,32,5,32,4,41,0,56,55,0,56,32,5,65,64,107,32,4,65,64,107,41,0,0,55,0,0,32,4,16,6,32,2,65,200,0,106,33,2,32,3,65,1,106,33,3,32,1,65,184,127,106,34,1,65,200,0,79,13,0,32,2,11,33,0,11,32,1,4,64,65,0,33,2,3,64,32,0,32,2,106,32,2,32,4,106,44,0,0,58,0,0,32,2,65,1,106,34,2,32,1,71,13,0,11,11,32,4,36,2,65,0,15,11,32,4,36,2,65,127,11,11,200,1,1,0,65,128,8,11,192,1,1,0,0,0,0,0,0,0,130,128,0,0,0,0,0,0,138,128,0,0,0,0,0,128,0,128,0,128,0,0,0,128,139,128,0,0,0,0,0,0,1,0,0,128,0,0,0,0,129,128,0,128,0,0,0,128,9,128,0,0,0,0,0,128,138,0,0,0,0,0,0,0,136,0,0,0,0,0,0,0,9,128,0,128,0,0,0,0,10,0,0,128,0,0,0,0,139,128,0,128,0,0,0,0,139,0,0,0,0,0,0,128,137,128,0,0,0,0,0,128,3,128,0,0,0,0,0,128,2,128,0,0,0,0,0,128,128,0,0,0,0,0,0,128,10,128,0,0,0,0,0,0,10,0,0,128,0,0,0,128,129,128,0,128,0,0,0,128,128,128,0,0,0,0,0,128,1,0,0,128,0,0,0,0,8,128,0,128,0,0,0,128,]);// This file will not run on it's own\n\nconst {\n  Module,\n  instantiate,\n  Memory,\n  Table\n} = WebAssembly;\n\nconst WebAssemblyModule = function(deps = {\n  'global': {},\n  'env': {\n    'memory': new Memory({initial: 10, limit: 100}),\n    'table': new Table({initial: 0, element: 'anyfunc'})\n  }\n}) {\n  return instantiate(buffer, deps);\n}\n\nmodule.exports = WebAssemblyModule;\n\n\n//# sourceURL=webpack://KECCAK/./lib/keccak-tiny-browser.wasm?")},"./node_modules/base64-js/index.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://KECCAK/./node_modules/base64-js/index.js?")},"./node_modules/buffer/index.js":function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://KECCAK/./node_modules/buffer/index.js?")},"./node_modules/ieee754/index.js":function(module,exports){eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://KECCAK/./node_modules/ieee754/index.js?")},"./node_modules/is-buffer/index.js":function(module,exports){eval("/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n\n//# sourceURL=webpack://KECCAK/./node_modules/is-buffer/index.js?")},"./node_modules/isarray/index.js":function(module,exports){eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack://KECCAK/./node_modules/isarray/index.js?")},"./node_modules/webpack/buildin/global.js":function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://KECCAK/(webpack)/buildin/global.js?')}});