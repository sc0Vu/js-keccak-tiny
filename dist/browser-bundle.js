var KECCAK =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index-browser.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index-browser.js":
/*!**************************!*\
  !*** ./index-browser.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {const KeccakTinyWasm = __webpack_require__(/*! ./lib/keccak-tiny-browser.wasm */ \"./lib/keccak-tiny-browser.wasm\")\nconst Keccak = __webpack_require__(/*! ./lib/keccak-tiny-browser.js */ \"./lib/keccak-tiny-browser.js\")\nconst isBuffer = __webpack_require__(/*! is-buffer */ \"./node_modules/is-buffer/index.js\")\n\nmodule.exports = function (options) {\n  options = {\n    instantiateWasm: function (info, successCallback) {\n      return KeccakTinyWasm(info)\n              .then(function (i) {\n                return successCallback(i.instance)\n              })\n    }\n  }\n  return new Promise(function (resolve, reject) {\n    Keccak(options).then(function (k) {\n      let keccakTiny = {}\n      keccakTiny.hashAlgos = {\n        shake128: {\n          length: 16,\n          functionName: '_shake128'\n        },\n        shake256: {\n          length: 32,\n          functionName: '_shake256'\n        },\n        sha3_224: {\n          length: 28,\n          functionName: '_sha3_224'\n        },\n        sha3_256: {\n          length: 32,\n          functionName: '_sha3_256'\n        },\n        sha3_384: {\n          length: 48,\n          functionName: '_sha3_384'\n        },\n        sha3_512: {\n          length: 64,\n          functionName: '_sha3_512'\n        },\n        keccak224: {\n          length: 28,\n          functionName: '_keccak_224'\n        },\n        keccak256: {\n          length: 32,\n          functionName: '_keccak_256'\n        },\n        keccak384: {\n          length: 48,\n          functionName: '_keccak_384'\n        },\n        keccak512: {\n          length: 64,\n          functionName: '_keccak_512'\n        }\n      }\n      keccakTiny.k = k\n      keccakTiny.hash = function (hashAlgoName, msg) {\n        if (typeof hashAlgoName !== 'string') {\n          throw new Error('Hash algorithm name must be string.')\n        }\n        if (typeof this.hashAlgos[hashAlgoName] === undefined) {\n          throw new Error('Unknown hash algorithm.')\n        }\n        if (isBuffer(msg) !== true) {\n          throw new Error('Message must be buffer.')\n        }\n        let hashAlgo = this.hashAlgos[hashAlgoName]\n        let hashLen = hashAlgo.length\n        let hashMem = this.k._malloc(hashLen)\n        let msgLen = msg.length\n        let msgMem = this.k._malloc(msgLen)\n        let hash = new Uint8Array(hashLen)\n        let hashFunc = this.k[hashAlgo.functionName]\n        this.k.HEAP8.set(msg, msgMem)\n        let res = hashFunc(hashMem, hashLen, msgMem, msgLen)\n        if (res === -1) {\n          throw new Error('Hash failed.')\n          return\n        }\n        for (var i=0; i<hashLen; i++) {\n          var v = this.k.getValue(hashMem + i, 'i8')\n          hash[i] = v\n        }\n        // free memory\n        this.k._free(hashMem)\n        return Buffer.from(hash)\n      }\n      Object.keys(keccakTiny.hashAlgos).forEach(function (hashAlgoName) {\n        keccakTiny[hashAlgoName] = function (msg) {\n          let msgBuf = Buffer.from(msg)\n          return keccakTiny.hash(hashAlgoName, msgBuf)\n        }\n      })\n      resolve(keccakTiny)\n    })\n  })\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://KECCAK/./index-browser.js?");

/***/ }),

/***/ "./lib/keccak-tiny-browser.js":
/*!************************************!*\
  !*** ./lib/keccak-tiny-browser.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar KECCAK = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  return (\nfunction(KECCAK) {\n  KECCAK = KECCAK || {};\n\n// Copyright 2010 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n// The Module object: Our interface to the outside world. We import\n// and export values on it. There are various ways Module can be used:\n// 1. Not defined. We create it here\n// 2. A function parameter, function(Module) { ..generated code.. }\n// 3. pre-run appended it, var Module = {}; ..generated code..\n// 4. External script tag defines var Module.\n// We need to check if Module already exists (e.g. case 3 above).\n// Substitution will be replaced with actual code on later stage of the build,\n// this way Closure Compiler will not mangle it (e.g. case 4. above).\n// Note that if you want to run closure, and also to use Module\n// after the generated code, you will need to define   var Module = {};\n// before the code. Then that object will be used in the code, and you\n// can continue to use Module afterwards as well.\nvar Module = typeof KECCAK !== 'undefined' ? KECCAK : {};\n\n// --pre-jses are emitted after the Module integration code, so that they can\n// refer to Module (if they choose; they can also define Module)\n// {{PRE_JSES}}\n\n// Sometimes an existing Module object exists with properties\n// meant to overwrite the default module functionality. Here\n// we collect those properties and reapply _after_ we configure\n// the current environment's defaults to avoid having to be so\n// defensive during initialization.\nvar moduleOverrides = {};\nvar key;\nfor (key in Module) {\n  if (Module.hasOwnProperty(key)) {\n    moduleOverrides[key] = Module[key];\n  }\n}\n\nModule['arguments'] = [];\nModule['thisProgram'] = './this.program';\nModule['quit'] = function(status, toThrow) {\n  throw toThrow;\n};\nModule['preRun'] = [];\nModule['postRun'] = [];\n\n// Determine the runtime environment we are in. You can customize this by\n// setting the ENVIRONMENT setting at compile time (see settings.js).\n\nvar ENVIRONMENT_IS_WEB = true;\nvar ENVIRONMENT_IS_WORKER = false;\nvar ENVIRONMENT_IS_NODE = false;\nvar ENVIRONMENT_IS_SHELL = false;\n\nif (Module['ENVIRONMENT']) {\n  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');\n}\n\n\n// Three configurations we can be running in:\n// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)\n// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)\n// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)\n\n\n\n\n// `/` should be present at the end if `scriptDirectory` is not empty\nvar scriptDirectory = '';\nfunction locateFile(path) {\n  if (Module['locateFile']) {\n    return Module['locateFile'](path, scriptDirectory);\n  } else {\n    return scriptDirectory + path;\n  }\n}\n\nif (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled\n    scriptDirectory = self.location.href;\n  } else if (document.currentScript) { // web\n    scriptDirectory = document.currentScript.src;\n  }\n  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript\n  // is gone, so we saved it, and we use it here instead of any other info.\n  if (_scriptDir) {\n    scriptDirectory = _scriptDir;\n  }\n  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\n  // otherwise, slice off the final part of the url to find the script directory.\n  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,\n  // and scriptDirectory will correctly be replaced with an empty string.\n  if (scriptDirectory.indexOf('blob:') !== 0) {\n    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);\n  } else {\n    scriptDirectory = '';\n  }\n\n  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');\n\n  Module['read'] = function shell_read(url) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, false);\n      xhr.send(null);\n      return xhr.responseText;\n  };\n\n  if (ENVIRONMENT_IS_WORKER) {\n    Module['readBinary'] = function readBinary(url) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, false);\n        xhr.responseType = 'arraybuffer';\n        xhr.send(null);\n        return new Uint8Array(xhr.response);\n    };\n  }\n\n  Module['readAsync'] = function readAsync(url, onload, onerror) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onload = function xhr_onload() {\n      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\n        onload(xhr.response);\n        return;\n      }\n      onerror();\n    };\n    xhr.onerror = onerror;\n    xhr.send(null);\n  };\n\n  Module['setWindowTitle'] = function(title) { document.title = title };\n} else\n{\n  throw new Error('environment detection error');\n}\n\n// Set up the out() and err() hooks, which are how we can print to stdout or\n// stderr, respectively.\n// If the user provided Module.print or printErr, use that. Otherwise,\n// console.log is checked first, as 'print' on the web will open a print dialogue\n// printErr is preferable to console.warn (works better in shells)\n// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.\nvar out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));\nvar err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));\n\n// Merge back in the overrides\nfor (key in moduleOverrides) {\n  if (moduleOverrides.hasOwnProperty(key)) {\n    Module[key] = moduleOverrides[key];\n  }\n}\n// Free the object hierarchy contained in the overrides, this lets the GC\n// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.\nmoduleOverrides = undefined;\n\n// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message\nassert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');\n\n\n\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n// {{PREAMBLE_ADDITIONS}}\n\nvar STACK_ALIGN = 16;\n\n// stack management, and other functionality that is provided by the compiled code,\n// should not be used before it is ready\nstackSave = stackRestore = stackAlloc = function() {\n  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');\n};\n\nfunction staticAlloc(size) {\n  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');\n}\n\nfunction dynamicAlloc(size) {\n  assert(DYNAMICTOP_PTR);\n  var ret = HEAP32[DYNAMICTOP_PTR>>2];\n  var end = (ret + size + 15) & -16;\n  if (end <= _emscripten_get_heap_size()) {\n    HEAP32[DYNAMICTOP_PTR>>2] = end;\n  } else {\n    var success = _emscripten_resize_heap(end);\n    if (!success) return 0;\n  }\n  return ret;\n}\n\nfunction alignMemory(size, factor) {\n  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default\n  return Math.ceil(size / factor) * factor;\n}\n\nfunction getNativeTypeSize(type) {\n  switch (type) {\n    case 'i1': case 'i8': return 1;\n    case 'i16': return 2;\n    case 'i32': return 4;\n    case 'i64': return 8;\n    case 'float': return 4;\n    case 'double': return 8;\n    default: {\n      if (type[type.length-1] === '*') {\n        return 4; // A pointer\n      } else if (type[0] === 'i') {\n        var bits = parseInt(type.substr(1));\n        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);\n        return bits / 8;\n      } else {\n        return 0;\n      }\n    }\n  }\n}\n\nfunction warnOnce(text) {\n  if (!warnOnce.shown) warnOnce.shown = {};\n  if (!warnOnce.shown[text]) {\n    warnOnce.shown[text] = 1;\n    err(text);\n  }\n}\n\nvar asm2wasmImports = { // special asm2wasm imports\n    \"f64-rem\": function(x, y) {\n        return x % y;\n    },\n    \"debugger\": function() {\n        debugger;\n    }\n};\n\n\n\nvar jsCallStartIndex = 1;\nvar functionPointers = new Array(0);\n\n// Wraps a JS function as a wasm function with a given signature.\n// In the future, we may get a WebAssembly.Function constructor. Until then,\n// we create a wasm module that takes the JS function as an import with a given\n// signature, and re-exports that as a wasm function.\nfunction convertJsFunctionToWasm(func, sig) {\n  // The module is static, with the exception of the type section, which is\n  // generated based on the signature passed in.\n  var typeSection = [\n    0x01, // id: section,\n    0x00, // length: 0 (placeholder)\n    0x01, // count: 1\n    0x60, // form: func\n  ];\n  var sigRet = sig.slice(0, 1);\n  var sigParam = sig.slice(1);\n  var typeCodes = {\n    'i': 0x7f, // i32\n    'j': 0x7e, // i64\n    'f': 0x7d, // f32\n    'd': 0x7c, // f64\n  };\n\n  // Parameters, length + signatures\n  typeSection.push(sigParam.length);\n  for (var i = 0; i < sigParam.length; ++i) {\n    typeSection.push(typeCodes[sigParam[i]]);\n  }\n\n  // Return values, length + signatures\n  // With no multi-return in MVP, either 0 (void) or 1 (anything else)\n  if (sigRet == 'v') {\n    typeSection.push(0x00);\n  } else {\n    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);\n  }\n\n  // Write the overall length of the type section back into the section header\n  // (excepting the 2 bytes for the section id and length)\n  typeSection[1] = typeSection.length - 2;\n\n  // Rest of the module is static\n  var bytes = new Uint8Array([\n    0x00, 0x61, 0x73, 0x6d, // magic (\"\\0asm\")\n    0x01, 0x00, 0x00, 0x00, // version: 1\n  ].concat(typeSection, [\n    0x02, 0x07, // import section\n      // (import \"e\" \"f\" (func 0 (type 0)))\n      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,\n    0x07, 0x05, // export section\n      // (export \"f\" (func 0 (type 0)))\n      0x01, 0x01, 0x66, 0x00, 0x00,\n  ]));\n\n   // We can compile this wasm module synchronously because it is very small.\n  // This accepts an import (at \"e.f\"), that it reroutes to an export (at \"f\")\n  var module = new WebAssembly.Module(bytes);\n  var instance = new WebAssembly.Instance(module, {\n    e: {\n      f: func\n    }\n  });\n  var wrappedFunc = instance.exports.f;\n  return wrappedFunc;\n}\n\n// Add a wasm function to the table.\nfunction addFunctionWasm(func, sig) {\n  var table = wasmTable;\n  var ret = table.length;\n\n  // Grow the table\n  try {\n    table.grow(1);\n  } catch (err) {\n    if (!err instanceof RangeError) {\n      throw err;\n    }\n    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';\n  }\n\n  // Insert new element\n  try {\n    // Attempting to call this with JS function will cause of table.set() to fail\n    table.set(ret, func);\n  } catch (err) {\n    if (!err instanceof TypeError) {\n      throw err;\n    }\n    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');\n    var wrapped = convertJsFunctionToWasm(func, sig);\n    table.set(ret, wrapped);\n  }\n\n  return ret;\n}\n\nfunction removeFunctionWasm(index) {\n  // TODO(sbc): Look into implementing this to allow re-using of table slots\n}\n\n// 'sig' parameter is required for the llvm backend but only when func is not\n// already a WebAssembly function.\nfunction addFunction(func, sig) {\n\n\n  var base = 0;\n  for (var i = base; i < base + 0; i++) {\n    if (!functionPointers[i]) {\n      functionPointers[i] = func;\n      return jsCallStartIndex + i;\n    }\n  }\n  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';\n\n}\n\nfunction removeFunction(index) {\n\n  functionPointers[index-jsCallStartIndex] = null;\n}\n\nvar funcWrappers = {};\n\nfunction getFuncWrapper(func, sig) {\n  if (!func) return; // on null pointer, return undefined\n  assert(sig);\n  if (!funcWrappers[sig]) {\n    funcWrappers[sig] = {};\n  }\n  var sigCache = funcWrappers[sig];\n  if (!sigCache[func]) {\n    // optimize away arguments usage in common cases\n    if (sig.length === 1) {\n      sigCache[func] = function dynCall_wrapper() {\n        return dynCall(sig, func);\n      };\n    } else if (sig.length === 2) {\n      sigCache[func] = function dynCall_wrapper(arg) {\n        return dynCall(sig, func, [arg]);\n      };\n    } else {\n      // general case\n      sigCache[func] = function dynCall_wrapper() {\n        return dynCall(sig, func, Array.prototype.slice.call(arguments));\n      };\n    }\n  }\n  return sigCache[func];\n}\n\n\nfunction makeBigInt(low, high, unsigned) {\n  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));\n}\n\nfunction dynCall(sig, ptr, args) {\n  if (args && args.length) {\n    assert(args.length == sig.length-1);\n    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \\'' + sig + '\\'');\n    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));\n  } else {\n    assert(sig.length == 1);\n    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \\'' + sig + '\\'');\n    return Module['dynCall_' + sig].call(null, ptr);\n  }\n}\n\nvar tempRet0 = 0;\n\nvar setTempRet0 = function(value) {\n  tempRet0 = value;\n}\n\nvar getTempRet0 = function() {\n  return tempRet0;\n}\n\nfunction getCompilerSetting(name) {\n  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';\n}\n\nvar Runtime = {\n  // helpful errors\n  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"') },\n  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"') },\n  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"') },\n};\n\n// The address globals begin at. Very low in memory, for code size and optimization opportunities.\n// Above 0 is static memory, starting with globals.\n// Then the stack.\n// Then 'dynamic' memory for sbrk.\nvar GLOBAL_BASE = 1024;\n\n\n\n\n// === Preamble library stuff ===\n\n// Documentation for the public APIs defined in this file must be updated in:\n//    site/source/docs/api_reference/preamble.js.rst\n// A prebuilt local version of the documentation is available at:\n//    site/build/text/docs/api_reference/preamble.js.txt\n// You can also build docs locally as HTML or other formats in site/\n// An online HTML version (which may be of a different version of Emscripten)\n//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\n\n\nif (typeof WebAssembly !== 'object') {\n  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');\n}\n\n\n/** @type {function(number, string, boolean=)} */\nfunction getValue(ptr, type, noSafe) {\n  type = type || 'i8';\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\n    switch(type) {\n      case 'i1': return HEAP8[((ptr)>>0)];\n      case 'i8': return HEAP8[((ptr)>>0)];\n      case 'i16': return HEAP16[((ptr)>>1)];\n      case 'i32': return HEAP32[((ptr)>>2)];\n      case 'i64': return HEAP32[((ptr)>>2)];\n      case 'float': return HEAPF32[((ptr)>>2)];\n      case 'double': return HEAPF64[((ptr)>>3)];\n      default: abort('invalid type for getValue: ' + type);\n    }\n  return null;\n}\n\n\n\n\n// Wasm globals\n\nvar wasmMemory;\n\n// Potentially used for direct table calls.\nvar wasmTable;\n\n\n//========================================\n// Runtime essentials\n//========================================\n\n// whether we are quitting the application. no code should run after this.\n// set in exit() and abort()\nvar ABORT = false;\n\n// set by exit() and abort().  Passed to 'onExit' handler.\n// NOTE: This is also used as the process return code code in shell environments\n// but only when noExitRuntime is false.\nvar EXITSTATUS = 0;\n\n/** @type {function(*, string=)} */\nfunction assert(condition, text) {\n  if (!condition) {\n    abort('Assertion failed: ' + text);\n  }\n}\n\n// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)\nfunction getCFunc(ident) {\n  var func = Module['_' + ident]; // closure exported function\n  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');\n  return func;\n}\n\n// C calling interface.\nfunction ccall(ident, returnType, argTypes, args, opts) {\n  // For fast lookup of conversion functions\n  var toC = {\n    'string': function(str) {\n      var ret = 0;\n      if (str !== null && str !== undefined && str !== 0) { // null string\n        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\\0'\n        var len = (str.length << 2) + 1;\n        ret = stackAlloc(len);\n        stringToUTF8(str, ret, len);\n      }\n      return ret;\n    },\n    'array': function(arr) {\n      var ret = stackAlloc(arr.length);\n      writeArrayToMemory(arr, ret);\n      return ret;\n    }\n  };\n\n  function convertReturnValue(ret) {\n    if (returnType === 'string') return UTF8ToString(ret);\n    if (returnType === 'boolean') return Boolean(ret);\n    return ret;\n  }\n\n  var func = getCFunc(ident);\n  var cArgs = [];\n  var stack = 0;\n  assert(returnType !== 'array', 'Return type should not be \"array\".');\n  if (args) {\n    for (var i = 0; i < args.length; i++) {\n      var converter = toC[argTypes[i]];\n      if (converter) {\n        if (stack === 0) stack = stackSave();\n        cArgs[i] = converter(args[i]);\n      } else {\n        cArgs[i] = args[i];\n      }\n    }\n  }\n  var ret = func.apply(null, cArgs);\n  ret = convertReturnValue(ret);\n  if (stack !== 0) stackRestore(stack);\n  return ret;\n}\n\nfunction cwrap(ident, returnType, argTypes, opts) {\n  return function() {\n    return ccall(ident, returnType, argTypes, arguments, opts);\n  }\n}\n\n/** @type {function(number, number, string, boolean=)} */\nfunction setValue(ptr, value, type, noSafe) {\n  type = type || 'i8';\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\n    switch(type) {\n      case 'i1': HEAP8[((ptr)>>0)]=value; break;\n      case 'i8': HEAP8[((ptr)>>0)]=value; break;\n      case 'i16': HEAP16[((ptr)>>1)]=value; break;\n      case 'i32': HEAP32[((ptr)>>2)]=value; break;\n      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;\n      case 'float': HEAPF32[((ptr)>>2)]=value; break;\n      case 'double': HEAPF64[((ptr)>>3)]=value; break;\n      default: abort('invalid type for setValue: ' + type);\n    }\n}\n\nvar ALLOC_NORMAL = 0; // Tries to use _malloc()\nvar ALLOC_STACK = 1; // Lives for the duration of the current function call\nvar ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk\nvar ALLOC_NONE = 3; // Do not allocate\n\n// allocate(): This is for internal use. You can use it yourself as well, but the interface\n//             is a little tricky (see docs right below). The reason is that it is optimized\n//             for multiple syntaxes to save space in generated code. So you should\n//             normally not use allocate(), and instead allocate memory using _malloc(),\n//             initialize it with setValue(), and so forth.\n// @slab: An array of data, or a number. If a number, then the size of the block to allocate,\n//        in *bytes* (note that this is sometimes confusing: the next parameter does not\n//        affect this!)\n// @types: Either an array of types, one for each byte (or 0 if no type at that position),\n//         or a single type which is used for the entire block. This only matters if there\n//         is initial data - if @slab is a number, then this does not matter at all and is\n//         ignored.\n// @allocator: How to allocate memory, see ALLOC_*\n/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */\nfunction allocate(slab, types, allocator, ptr) {\n  var zeroinit, size;\n  if (typeof slab === 'number') {\n    zeroinit = true;\n    size = slab;\n  } else {\n    zeroinit = false;\n    size = slab.length;\n  }\n\n  var singleType = typeof types === 'string' ? types : null;\n\n  var ret;\n  if (allocator == ALLOC_NONE) {\n    ret = ptr;\n  } else {\n    ret = [_malloc,\n    stackAlloc,\n    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));\n  }\n\n  if (zeroinit) {\n    var stop;\n    ptr = ret;\n    assert((ret & 3) == 0);\n    stop = ret + (size & ~3);\n    for (; ptr < stop; ptr += 4) {\n      HEAP32[((ptr)>>2)]=0;\n    }\n    stop = ret + size;\n    while (ptr < stop) {\n      HEAP8[((ptr++)>>0)]=0;\n    }\n    return ret;\n  }\n\n  if (singleType === 'i8') {\n    if (slab.subarray || slab.slice) {\n      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);\n    } else {\n      HEAPU8.set(new Uint8Array(slab), ret);\n    }\n    return ret;\n  }\n\n  var i = 0, type, typeSize, previousType;\n  while (i < size) {\n    var curr = slab[i];\n\n    type = singleType || types[i];\n    if (type === 0) {\n      i++;\n      continue;\n    }\n    assert(type, 'Must know what type to store in allocate!');\n\n    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later\n\n    setValue(ret+i, curr, type);\n\n    // no need to look up size unless type changes, so cache it\n    if (previousType !== type) {\n      typeSize = getNativeTypeSize(type);\n      previousType = type;\n    }\n    i += typeSize;\n  }\n\n  return ret;\n}\n\n// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready\nfunction getMemory(size) {\n  if (!runtimeInitialized) return dynamicAlloc(size);\n  return _malloc(size);\n}\n\n\n\n\n/** @type {function(number, number=)} */\nfunction Pointer_stringify(ptr, length) {\n  abort(\"this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!\");\n}\n\n// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns\n// a copy of that string as a Javascript String object.\n\nfunction AsciiToString(ptr) {\n  var str = '';\n  while (1) {\n    var ch = HEAPU8[((ptr++)>>0)];\n    if (!ch) return str;\n    str += String.fromCharCode(ch);\n  }\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.\n\nfunction stringToAscii(str, outPtr) {\n  return writeAsciiToMemory(str, outPtr, false);\n}\n\n\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns\n// a copy of that string as a Javascript String object.\n\nvar UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;\n\n/**\n * @param {number} idx\n * @param {number=} maxBytesToRead\n * @return {string}\n */\nfunction UTF8ArrayToString(u8Array, idx, maxBytesToRead) {\n  var endIdx = idx + maxBytesToRead;\n  var endPtr = idx;\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\n  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)\n  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n\n  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\n    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));\n  } else {\n    var str = '';\n    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that\n    while (idx < endPtr) {\n      // For UTF8 byte structure, see:\n      // http://en.wikipedia.org/wiki/UTF-8#Description\n      // https://www.ietf.org/rfc/rfc2279.txt\n      // https://tools.ietf.org/html/rfc3629\n      var u0 = u8Array[idx++];\n      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\n      var u1 = u8Array[idx++] & 63;\n      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\n      var u2 = u8Array[idx++] & 63;\n      if ((u0 & 0xF0) == 0xE0) {\n        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n      } else {\n        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');\n        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);\n      }\n\n      if (u0 < 0x10000) {\n        str += String.fromCharCode(u0);\n      } else {\n        var ch = u0 - 0x10000;\n        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n      }\n    }\n  }\n  return str;\n}\n\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a\n// copy of that string as a Javascript String object.\n// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit\n//                 this parameter to scan the string until the first \\0 byte. If maxBytesToRead is\n//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the\n//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will\n//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)\n//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may\n//                 throw JS JIT optimizations off, so it is worth to consider consistently using one\n//                 style or the other.\n/**\n * @param {number} ptr\n * @param {number=} maxBytesToRead\n * @return {string}\n */\nfunction UTF8ToString(ptr, maxBytesToRead) {\n  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';\n}\n\n// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',\n// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Parameters:\n//   str: the Javascript string to copy.\n//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.\n//   outIdx: The starting offset in the array to begin the copying.\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array.\n//                    This count should include the null terminator,\n//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.\n//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\n  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.\n    return 0;\n\n  var startIdx = outIdx;\n  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u >= 0xD800 && u <= 0xDFFF) {\n      var u1 = str.charCodeAt(++i);\n      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      if (outIdx >= endIdx) break;\n      outU8Array[outIdx++] = u;\n    } else if (u <= 0x7FF) {\n      if (outIdx + 1 >= endIdx) break;\n      outU8Array[outIdx++] = 0xC0 | (u >> 6);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else if (u <= 0xFFFF) {\n      if (outIdx + 2 >= endIdx) break;\n      outU8Array[outIdx++] = 0xE0 | (u >> 12);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else {\n      if (outIdx + 3 >= endIdx) break;\n      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');\n      outU8Array[outIdx++] = 0xF0 | (u >> 18);\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    }\n  }\n  // Null-terminate the pointer to the buffer.\n  outU8Array[outIdx] = 0;\n  return outIdx - startIdx;\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\n  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);\n}\n\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.\nfunction lengthBytesUTF8(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    if (u <= 0x7F) ++len;\n    else if (u <= 0x7FF) len += 2;\n    else if (u <= 0xFFFF) len += 3;\n    else len += 4;\n  }\n  return len;\n}\n\n\n// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns\n// a copy of that string as a Javascript String object.\n\nvar UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;\nfunction UTF16ToString(ptr) {\n  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');\n  var endPtr = ptr;\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\n  var idx = endPtr >> 1;\n  while (HEAP16[idx]) ++idx;\n  endPtr = idx << 1;\n\n  if (endPtr - ptr > 32 && UTF16Decoder) {\n    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n  } else {\n    var i = 0;\n\n    var str = '';\n    while (1) {\n      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];\n      if (codeUnit == 0) return str;\n      ++i;\n      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.\n      str += String.fromCharCode(codeUnit);\n    }\n  }\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.\n// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Parameters:\n//   str: the Javascript string to copy.\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\n//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.\n//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF16(str, outPtr, maxBytesToWrite) {\n  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');\n  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n  if (maxBytesToWrite === undefined) {\n    maxBytesToWrite = 0x7FFFFFFF;\n  }\n  if (maxBytesToWrite < 2) return 0;\n  maxBytesToWrite -= 2; // Null terminator.\n  var startPtr = outPtr;\n  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;\n  for (var i = 0; i < numCharsToWrite; ++i) {\n    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n    HEAP16[((outPtr)>>1)]=codeUnit;\n    outPtr += 2;\n  }\n  // Null-terminate the pointer to the HEAP.\n  HEAP16[((outPtr)>>1)]=0;\n  return outPtr - startPtr;\n}\n\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\n\nfunction lengthBytesUTF16(str) {\n  return str.length*2;\n}\n\nfunction UTF32ToString(ptr) {\n  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');\n  var i = 0;\n\n  var str = '';\n  while (1) {\n    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];\n    if (utf32 == 0)\n      return str;\n    ++i;\n    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    if (utf32 >= 0x10000) {\n      var ch = utf32 - 0x10000;\n      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n    } else {\n      str += String.fromCharCode(utf32);\n    }\n  }\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.\n// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Parameters:\n//   str: the Javascript string to copy.\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\n//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.\n//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF32(str, outPtr, maxBytesToWrite) {\n  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');\n  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n  if (maxBytesToWrite === undefined) {\n    maxBytesToWrite = 0x7FFFFFFF;\n  }\n  if (maxBytesToWrite < 4) return 0;\n  var startPtr = outPtr;\n  var endPtr = startPtr + maxBytesToWrite - 4;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {\n      var trailSurrogate = str.charCodeAt(++i);\n      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);\n    }\n    HEAP32[((outPtr)>>2)]=codeUnit;\n    outPtr += 4;\n    if (outPtr + 4 > endPtr) break;\n  }\n  // Null-terminate the pointer to the HEAP.\n  HEAP32[((outPtr)>>2)]=0;\n  return outPtr - startPtr;\n}\n\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\n\nfunction lengthBytesUTF32(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var codeUnit = str.charCodeAt(i);\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.\n    len += 4;\n  }\n\n  return len;\n}\n\n// Allocate heap space for a JS string, and write it there.\n// It is the responsibility of the caller to free() that memory.\nfunction allocateUTF8(str) {\n  var size = lengthBytesUTF8(str) + 1;\n  var ret = _malloc(size);\n  if (ret) stringToUTF8Array(str, HEAP8, ret, size);\n  return ret;\n}\n\n// Allocate stack space for a JS string, and write it there.\nfunction allocateUTF8OnStack(str) {\n  var size = lengthBytesUTF8(str) + 1;\n  var ret = stackAlloc(size);\n  stringToUTF8Array(str, HEAP8, ret, size);\n  return ret;\n}\n\n// Deprecated: This function should not be called because it is unsafe and does not provide\n// a maximum length limit of how many bytes it is allowed to write. Prefer calling the\n// function stringToUTF8Array() instead, which takes in a maximum length that can be used\n// to be secure from out of bounds writes.\n/** @deprecated */\nfunction writeStringToMemory(string, buffer, dontAddNull) {\n  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');\n\n  var /** @type {number} */ lastChar, /** @type {number} */ end;\n  if (dontAddNull) {\n    // stringToUTF8Array always appends null. If we don't want to do that, remember the\n    // character that existed at the location where the null will be placed, and restore\n    // that after the write (below).\n    end = buffer + lengthBytesUTF8(string);\n    lastChar = HEAP8[end];\n  }\n  stringToUTF8(string, buffer, Infinity);\n  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.\n}\n\nfunction writeArrayToMemory(array, buffer) {\n  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')\n  HEAP8.set(array, buffer);\n}\n\nfunction writeAsciiToMemory(str, buffer, dontAddNull) {\n  for (var i = 0; i < str.length; ++i) {\n    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);\n    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);\n  }\n  // Null-terminate the pointer to the HEAP.\n  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;\n}\n\n\n\n\n\nfunction demangle(func) {\n  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');\n  return func;\n}\n\nfunction demangleAll(text) {\n  var regex =\n    /__Z[\\w\\d_]+/g;\n  return text.replace(regex,\n    function(x) {\n      var y = demangle(x);\n      return x === y ? x : (y + ' [' + x + ']');\n    });\n}\n\nfunction jsStackTrace() {\n  var err = new Error();\n  if (!err.stack) {\n    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,\n    // so try that as a special-case.\n    try {\n      throw new Error(0);\n    } catch(e) {\n      err = e;\n    }\n    if (!err.stack) {\n      return '(no stack trace available)';\n    }\n  }\n  return err.stack.toString();\n}\n\nfunction stackTrace() {\n  var js = jsStackTrace();\n  if (Module['extraStackTrace']) js += '\\n' + Module['extraStackTrace']();\n  return demangleAll(js);\n}\n\n\n\n// Memory management\n\nvar PAGE_SIZE = 16384;\nvar WASM_PAGE_SIZE = 65536;\nvar ASMJS_PAGE_SIZE = 16777216;\n\nfunction alignUp(x, multiple) {\n  if (x % multiple > 0) {\n    x += multiple - (x % multiple);\n  }\n  return x;\n}\n\nvar HEAP,\n/** @type {ArrayBuffer} */\n  buffer,\n/** @type {Int8Array} */\n  HEAP8,\n/** @type {Uint8Array} */\n  HEAPU8,\n/** @type {Int16Array} */\n  HEAP16,\n/** @type {Uint16Array} */\n  HEAPU16,\n/** @type {Int32Array} */\n  HEAP32,\n/** @type {Uint32Array} */\n  HEAPU32,\n/** @type {Float32Array} */\n  HEAPF32,\n/** @type {Float64Array} */\n  HEAPF64;\n\nfunction updateGlobalBuffer(buf) {\n  Module['buffer'] = buffer = buf;\n}\n\nfunction updateGlobalBufferViews() {\n  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);\n  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);\n  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);\n  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);\n  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);\n  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);\n  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);\n  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);\n}\n\n\nvar STATIC_BASE = 1024,\n    STACK_BASE = 2992,\n    STACKTOP = STACK_BASE,\n    STACK_MAX = 5245872,\n    DYNAMIC_BASE = 5245872,\n    DYNAMICTOP_PTR = 2736;\n\nassert(STACK_BASE % 16 === 0, 'stack must start aligned');\nassert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');\n\n\n\nvar TOTAL_STACK = 5242880;\nif (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')\n\nvar TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;\nif (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');\n\n// Initialize the runtime's memory\n// check for full engine support (use string 'subarray' to avoid closure compiler confusion)\nassert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,\n       'JS engine does not provide full typed array support');\n\n\n\n\n\n\n\n// Use a provided buffer, if there is one, or else allocate a new one\nif (Module['buffer']) {\n  buffer = Module['buffer'];\n  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);\n} else {\n  // Use a WebAssembly memory where available\n  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {\n    assert(TOTAL_MEMORY % WASM_PAGE_SIZE === 0);\n    wasmMemory = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE });\n    buffer = wasmMemory.buffer;\n  } else\n  {\n    buffer = new ArrayBuffer(TOTAL_MEMORY);\n  }\n  assert(buffer.byteLength === TOTAL_MEMORY);\n  Module['buffer'] = buffer;\n}\nupdateGlobalBufferViews();\n\n\nHEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;\n\n\n// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.\nfunction writeStackCookie() {\n  assert((STACK_MAX & 3) == 0);\n  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;\n  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;\n}\n\nfunction checkStackCookie() {\n  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {\n    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));\n  }\n  // Also test the global address 0 for integrity.\n  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';\n}\n\nfunction abortStackOverflow(allocSize) {\n  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');\n}\n\n\n  HEAP32[0] = 0x63736d65; /* 'emsc' */\n\n\n\n// Endianness check (note: assumes compiler arch was little-endian)\nHEAP16[1] = 0x6373;\nif (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';\n\nfunction callRuntimeCallbacks(callbacks) {\n  while(callbacks.length > 0) {\n    var callback = callbacks.shift();\n    if (typeof callback == 'function') {\n      callback();\n      continue;\n    }\n    var func = callback.func;\n    if (typeof func === 'number') {\n      if (callback.arg === undefined) {\n        Module['dynCall_v'](func);\n      } else {\n        Module['dynCall_vi'](func, callback.arg);\n      }\n    } else {\n      func(callback.arg === undefined ? null : callback.arg);\n    }\n  }\n}\n\nvar __ATPRERUN__  = []; // functions called before the runtime is initialized\nvar __ATINIT__    = []; // functions called during startup\nvar __ATMAIN__    = []; // functions called when main() is to be run\nvar __ATEXIT__    = []; // functions called during shutdown\nvar __ATPOSTRUN__ = []; // functions called after the main() is called\n\nvar runtimeInitialized = false;\nvar runtimeExited = false;\n\n\nfunction preRun() {\n  // compatibility - merge in anything from Module['preRun'] at this time\n  if (Module['preRun']) {\n    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\n    while (Module['preRun'].length) {\n      addOnPreRun(Module['preRun'].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction ensureInitRuntime() {\n  checkStackCookie();\n  if (runtimeInitialized) return;\n  runtimeInitialized = true;\n  \n  callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction preMain() {\n  checkStackCookie();\n  \n  callRuntimeCallbacks(__ATMAIN__);\n}\n\nfunction exitRuntime() {\n  checkStackCookie();\n  runtimeExited = true;\n}\n\nfunction postRun() {\n  checkStackCookie();\n  // compatibility - merge in anything from Module['postRun'] at this time\n  if (Module['postRun']) {\n    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\n    while (Module['postRun'].length) {\n      addOnPostRun(Module['postRun'].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n  __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n  __ATINIT__.unshift(cb);\n}\n\nfunction addOnPreMain(cb) {\n  __ATMAIN__.unshift(cb);\n}\n\nfunction addOnExit(cb) {\n}\n\nfunction addOnPostRun(cb) {\n  __ATPOSTRUN__.unshift(cb);\n}\n\nfunction unSign(value, bits, ignore) {\n  if (value >= 0) {\n    return value;\n  }\n  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts\n                    : Math.pow(2, bits)         + value;\n}\nfunction reSign(value, bits, ignore) {\n  if (value <= 0) {\n    return value;\n  }\n  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32\n                        : Math.pow(2, bits-1);\n  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that\n                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors\n                                                       // TODO: In i64 mode 1, resign the two parts separately and safely\n    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts\n  }\n  return value;\n}\n\n\nassert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\nassert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\nassert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\nassert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\n\nvar Math_abs = Math.abs;\nvar Math_cos = Math.cos;\nvar Math_sin = Math.sin;\nvar Math_tan = Math.tan;\nvar Math_acos = Math.acos;\nvar Math_asin = Math.asin;\nvar Math_atan = Math.atan;\nvar Math_atan2 = Math.atan2;\nvar Math_exp = Math.exp;\nvar Math_log = Math.log;\nvar Math_sqrt = Math.sqrt;\nvar Math_ceil = Math.ceil;\nvar Math_floor = Math.floor;\nvar Math_pow = Math.pow;\nvar Math_imul = Math.imul;\nvar Math_fround = Math.fround;\nvar Math_round = Math.round;\nvar Math_min = Math.min;\nvar Math_max = Math.max;\nvar Math_clz32 = Math.clz32;\nvar Math_trunc = Math.trunc;\n\n\n\n// A counter of dependencies for calling run(). If we need to\n// do asynchronous work before running, increment this and\n// decrement it. Incrementing must happen in a place like\n// Module.preRun (used by emcc to add file preloading).\n// Note that you can add dependencies in preRun, even though\n// it happens right before run - run will be postponed until\n// the dependencies are met.\nvar runDependencies = 0;\nvar runDependencyWatcher = null;\nvar dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\nvar runDependencyTracking = {};\n\nfunction getUniqueRunDependency(id) {\n  var orig = id;\n  while (1) {\n    if (!runDependencyTracking[id]) return id;\n    id = orig + Math.random();\n  }\n  return id;\n}\n\nfunction addRunDependency(id) {\n  runDependencies++;\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n  if (id) {\n    assert(!runDependencyTracking[id]);\n    runDependencyTracking[id] = 1;\n    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {\n      // Check for missing dependencies every few seconds\n      runDependencyWatcher = setInterval(function() {\n        if (ABORT) {\n          clearInterval(runDependencyWatcher);\n          runDependencyWatcher = null;\n          return;\n        }\n        var shown = false;\n        for (var dep in runDependencyTracking) {\n          if (!shown) {\n            shown = true;\n            err('still waiting on run dependencies:');\n          }\n          err('dependency: ' + dep);\n        }\n        if (shown) {\n          err('(end of list)');\n        }\n      }, 10000);\n    }\n  } else {\n    err('warning: run dependency added without ID');\n  }\n}\n\nfunction removeRunDependency(id) {\n  runDependencies--;\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n  if (id) {\n    assert(runDependencyTracking[id]);\n    delete runDependencyTracking[id];\n  } else {\n    err('warning: run dependency removed without ID');\n  }\n  if (runDependencies == 0) {\n    if (runDependencyWatcher !== null) {\n      clearInterval(runDependencyWatcher);\n      runDependencyWatcher = null;\n    }\n    if (dependenciesFulfilled) {\n      var callback = dependenciesFulfilled;\n      dependenciesFulfilled = null;\n      callback(); // can add another dependenciesFulfilled\n    }\n  }\n}\n\nModule[\"preloadedImages\"] = {}; // maps url to image data\nModule[\"preloadedAudios\"] = {}; // maps url to audio data\n\n\nvar memoryInitializer = null;\n\n\n\nvar /* show errors on likely calls to FS when it was not included */ FS = {\n  error: function() {\n    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');\n  },\n  init: function() { FS.error() },\n  createDataFile: function() { FS.error() },\n  createPreloadedFile: function() { FS.error() },\n  createLazyFile: function() { FS.error() },\n  open: function() { FS.error() },\n  mkdev: function() { FS.error() },\n  registerDevice: function() { FS.error() },\n  analyzePath: function() { FS.error() },\n  loadFilesFromDB: function() { FS.error() },\n\n  ErrnoError: function ErrnoError() { FS.error() },\n};\nModule['FS_createDataFile'] = FS.createDataFile;\nModule['FS_createPreloadedFile'] = FS.createPreloadedFile;\n\n\n\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n// Prefix of data URIs emitted by SINGLE_FILE and related options.\nvar dataURIPrefix = 'data:application/octet-stream;base64,';\n\n// Indicates whether filename is a base64 data URI.\nfunction isDataURI(filename) {\n  return String.prototype.startsWith ?\n      filename.startsWith(dataURIPrefix) :\n      filename.indexOf(dataURIPrefix) === 0;\n}\n\n\n\n\nvar wasmBinaryFile = 'keccak-tiny-browser.wasm';\nif (!isDataURI(wasmBinaryFile)) {\n  wasmBinaryFile = locateFile(wasmBinaryFile);\n}\n\nfunction getBinary() {\n  try {\n    if (Module['wasmBinary']) {\n      return new Uint8Array(Module['wasmBinary']);\n    }\n    if (Module['readBinary']) {\n      return Module['readBinary'](wasmBinaryFile);\n    } else {\n      throw \"both async and sync fetching of the wasm failed\";\n    }\n  }\n  catch (err) {\n    abort(err);\n  }\n}\n\nfunction getBinaryPromise() {\n  // if we don't have the binary yet, and have the Fetch api, use that\n  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web\n  if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {\n    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {\n      if (!response['ok']) {\n        throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n      }\n      return response['arrayBuffer']();\n    }).catch(function () {\n      return getBinary();\n    });\n  }\n  // Otherwise, getBinary should be able to get it synchronously\n  return new Promise(function(resolve, reject) {\n    resolve(getBinary());\n  });\n}\n\n// Create the wasm instance.\n// Receives the wasm imports, returns the exports.\nfunction createWasm(env) {\n  // prepare imports\n  var info = {\n    'env': env\n    ,\n    'global': {\n      'NaN': NaN,\n      'Infinity': Infinity\n    },\n    'global.Math': Math,\n    'asm2wasm': asm2wasmImports\n  };\n  // Load the wasm module and create an instance of using native support in the JS engine.\n  // handle a generated wasm instance, receiving its exports and\n  // performing other necessary setup\n  function receiveInstance(instance, module) {\n    var exports = instance.exports;\n    Module['asm'] = exports;\n    removeRunDependency('wasm-instantiate');\n  }\n  addRunDependency('wasm-instantiate');\n\n  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback\n  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel\n  // to any other async startup actions they are performing.\n  if (Module['instantiateWasm']) {\n    try {\n      return Module['instantiateWasm'](info, receiveInstance);\n    } catch(e) {\n      err('Module.instantiateWasm callback failed with error: ' + e);\n      return false;\n    }\n  }\n\n  // Async compilation can be confusing when an error on the page overwrites Module\n  // (for example, if the order of elements is wrong, and the one defining Module is\n  // later), so we save Module and check it later.\n  var trueModule = Module;\n  function receiveInstantiatedSource(output) {\n    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.\n    // receiveInstance() will swap in the exports (to Module.asm) so they can be called\n    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');\n    trueModule = null;\n      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.\n      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.\n    receiveInstance(output['instance']);\n  }\n  function instantiateArrayBuffer(receiver) {\n    getBinaryPromise().then(function(binary) {\n      return WebAssembly.instantiate(binary, info);\n    }).then(receiver, function(reason) {\n      err('failed to asynchronously prepare wasm: ' + reason);\n      abort(reason);\n    });\n  }\n  // Prefer streaming instantiation if available.\n  if (!Module['wasmBinary'] &&\n      typeof WebAssembly.instantiateStreaming === 'function' &&\n      !isDataURI(wasmBinaryFile) &&\n      typeof fetch === 'function') {\n    WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)\n      .then(receiveInstantiatedSource, function(reason) {\n        // We expect the most common failure cause to be a bad MIME type for the binary,\n        // in which case falling back to ArrayBuffer instantiation should work.\n        err('wasm streaming compile failed: ' + reason);\n        err('falling back to ArrayBuffer instantiation');\n        instantiateArrayBuffer(receiveInstantiatedSource);\n      });\n  } else {\n    instantiateArrayBuffer(receiveInstantiatedSource);\n  }\n  return {}; // no exports yet; we'll fill them in later\n}\n\n// Provide an \"asm.js function\" for the application, called to \"link\" the asm.js module. We instantiate\n// the wasm module at that time, and it receives imports and provides exports and so forth, the app\n// doesn't need to care that it is wasm or asm.js.\n\nModule['asm'] = function(global, env, providedBuffer) {\n  // memory was already allocated (so js could use the buffer)\n  env['memory'] = wasmMemory\n  ;\n  // import table\n  env['table'] = wasmTable = new WebAssembly.Table({\n    'initial': 0,\n    'maximum': 0,\n    'element': 'anyfunc'\n  });\n  env['__memory_base'] = 1024; // tell the memory segments where to place themselves\n  env['__table_base'] = 0; // table starts at 0 by default (even in dynamic linking, for the main module)\n\n  var exports = createWasm(env);\n  assert(exports, 'binaryen setup failed (no wasm support?)');\n  return exports;\n};\n\n// === Body ===\n\nvar ASM_CONSTS = [];\n\n\n\n\n\n// STATICTOP = STATIC_BASE + 1968;\n/* global initializers */ /*__ATINIT__.push();*/\n\n\n\n\n\n\n\n\n/* no memory initializer */\nvar tempDoublePtr = 2976\nassert(tempDoublePtr % 8 == 0);\n\nfunction copyTempFloat(ptr) { // functions, because inlining this code increases code size too much\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\n}\n\nfunction copyTempDouble(ptr) {\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\n  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];\n  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];\n  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];\n  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];\n}\n\n// {{PRE_LIBRARY}}\n\n\n  function _emscripten_get_heap_size() {\n      return TOTAL_MEMORY;\n    }\n\n  \n  function abortOnCannotGrowMemory(requestedSize) {\n      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');\n    }\n  \n  function emscripten_realloc_buffer(size) {\n      var PAGE_MULTIPLE = 65536;\n      size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size\n      var old = Module['buffer'];\n      var oldSize = old.byteLength;\n      // native wasm support\n      try {\n        var result = wasmMemory.grow((size - oldSize) / 65536); // .grow() takes a delta compared to the previous size\n        if (result !== (-1 | 0)) {\n          // success in native wasm memory growth, get the buffer from the memory\n          return Module['buffer'] = wasmMemory.buffer;\n        } else {\n          return null;\n        }\n      } catch(e) {\n        console.error('emscripten_realloc_buffer: Attempted to grow from ' + oldSize  + ' bytes to ' + size + ' bytes, but got error: ' + e);\n        return null;\n      }\n    }function _emscripten_resize_heap(requestedSize) {\n      var oldSize = _emscripten_get_heap_size();\n      // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.\n      assert(requestedSize > oldSize); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.\n  \n  \n      var PAGE_MULTIPLE = 65536;\n      var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.\n  \n      if (requestedSize > LIMIT) {\n        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + LIMIT + ' bytes!');\n        return false;\n      }\n  \n      var MIN_TOTAL_MEMORY = 16777216;\n      var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.\n  \n      while (newSize < requestedSize) { // Keep incrementing the heap size as long as it's less than what is requested.\n        if (newSize <= 536870912) {\n          newSize = alignUp(2 * newSize, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...\n        } else {\n          // ..., but after that, add smaller increments towards 2GB, which we cannot reach\n          newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);\n          if (newSize === oldSize) {\n            warnOnce('Cannot ask for more memory since we reached the practical limit in browsers (which is just below 2GB), so the request would have failed. Requesting only ' + TOTAL_MEMORY);\n          }\n        }\n      }\n  \n  \n      var start = Date.now();\n  \n      var replacement = emscripten_realloc_buffer(newSize);\n      if (!replacement || replacement.byteLength != newSize) {\n        err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');\n        if (replacement) {\n          err('Expected to get back a buffer of size ' + newSize + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);\n        }\n        return false;\n      }\n  \n      // everything worked\n      updateGlobalBuffer(replacement);\n      updateGlobalBufferViews();\n  \n      TOTAL_MEMORY = newSize;\n  \n  \n  \n      return true;\n    }\n\n  \n  function _emscripten_memcpy_big(dest, src, num) {\n      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);\n    }\n  \n   \n\n   \n\n  \n  function ___setErrNo(value) {\n      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;\n      else err('failed to set errno from JS');\n      return value;\n    } \nvar ASSERTIONS = true;\n\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n/** @type {function(string, boolean=, number=)} */\nfunction intArrayFromString(stringy, dontAddNull, length) {\n  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;\n  var u8array = new Array(len);\n  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n  if (dontAddNull) u8array.length = numBytesWritten;\n  return u8array;\n}\n\nfunction intArrayToString(array) {\n  var ret = [];\n  for (var i = 0; i < array.length; i++) {\n    var chr = array[i];\n    if (chr > 0xFF) {\n      if (ASSERTIONS) {\n        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');\n      }\n      chr &= 0xFF;\n    }\n    ret.push(String.fromCharCode(chr));\n  }\n  return ret.join('');\n}\n\n\n// ASM_LIBRARY EXTERN PRIMITIVES: Int8Array,Int32Array\n\n\nvar asmGlobalArg = {}\n\nvar asmLibraryArg = {\n  \"abort\": abort,\n  \"setTempRet0\": setTempRet0,\n  \"getTempRet0\": getTempRet0,\n  \"abortStackOverflow\": abortStackOverflow,\n  \"___setErrNo\": ___setErrNo,\n  \"_emscripten_get_heap_size\": _emscripten_get_heap_size,\n  \"_emscripten_memcpy_big\": _emscripten_memcpy_big,\n  \"_emscripten_resize_heap\": _emscripten_resize_heap,\n  \"abortOnCannotGrowMemory\": abortOnCannotGrowMemory,\n  \"emscripten_realloc_buffer\": emscripten_realloc_buffer,\n  \"tempDoublePtr\": tempDoublePtr,\n  \"DYNAMICTOP_PTR\": DYNAMICTOP_PTR\n}\n// EMSCRIPTEN_START_ASM\nvar asm =Module[\"asm\"]// EMSCRIPTEN_END_ASM\n(asmGlobalArg, asmLibraryArg, buffer);\n\nvar real__free = asm[\"_free\"]; asm[\"_free\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__free.apply(null, arguments);\n};\n\nvar real__keccak_224 = asm[\"_keccak_224\"]; asm[\"_keccak_224\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__keccak_224.apply(null, arguments);\n};\n\nvar real__keccak_256 = asm[\"_keccak_256\"]; asm[\"_keccak_256\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__keccak_256.apply(null, arguments);\n};\n\nvar real__keccak_384 = asm[\"_keccak_384\"]; asm[\"_keccak_384\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__keccak_384.apply(null, arguments);\n};\n\nvar real__keccak_512 = asm[\"_keccak_512\"]; asm[\"_keccak_512\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__keccak_512.apply(null, arguments);\n};\n\nvar real__malloc = asm[\"_malloc\"]; asm[\"_malloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__malloc.apply(null, arguments);\n};\n\nvar real__sbrk = asm[\"_sbrk\"]; asm[\"_sbrk\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__sbrk.apply(null, arguments);\n};\n\nvar real__sha3_224 = asm[\"_sha3_224\"]; asm[\"_sha3_224\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__sha3_224.apply(null, arguments);\n};\n\nvar real__sha3_256 = asm[\"_sha3_256\"]; asm[\"_sha3_256\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__sha3_256.apply(null, arguments);\n};\n\nvar real__sha3_384 = asm[\"_sha3_384\"]; asm[\"_sha3_384\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__sha3_384.apply(null, arguments);\n};\n\nvar real__sha3_512 = asm[\"_sha3_512\"]; asm[\"_sha3_512\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__sha3_512.apply(null, arguments);\n};\n\nvar real__shake128 = asm[\"_shake128\"]; asm[\"_shake128\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__shake128.apply(null, arguments);\n};\n\nvar real__shake256 = asm[\"_shake256\"]; asm[\"_shake256\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__shake256.apply(null, arguments);\n};\n\nvar real_establishStackSpace = asm[\"establishStackSpace\"]; asm[\"establishStackSpace\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_establishStackSpace.apply(null, arguments);\n};\n\nvar real_stackAlloc = asm[\"stackAlloc\"]; asm[\"stackAlloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_stackAlloc.apply(null, arguments);\n};\n\nvar real_stackRestore = asm[\"stackRestore\"]; asm[\"stackRestore\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_stackRestore.apply(null, arguments);\n};\n\nvar real_stackSave = asm[\"stackSave\"]; asm[\"stackSave\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_stackSave.apply(null, arguments);\n};\nModule[\"asm\"] = asm;\nvar _emscripten_replace_memory = Module[\"_emscripten_replace_memory\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_emscripten_replace_memory\"].apply(null, arguments) };\nvar _free = Module[\"_free\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_free\"].apply(null, arguments) };\nvar _keccak_224 = Module[\"_keccak_224\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_keccak_224\"].apply(null, arguments) };\nvar _keccak_256 = Module[\"_keccak_256\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_keccak_256\"].apply(null, arguments) };\nvar _keccak_384 = Module[\"_keccak_384\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_keccak_384\"].apply(null, arguments) };\nvar _keccak_512 = Module[\"_keccak_512\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_keccak_512\"].apply(null, arguments) };\nvar _malloc = Module[\"_malloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_malloc\"].apply(null, arguments) };\nvar _memcpy = Module[\"_memcpy\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_memcpy\"].apply(null, arguments) };\nvar _memset = Module[\"_memset\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_memset\"].apply(null, arguments) };\nvar _sbrk = Module[\"_sbrk\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_sbrk\"].apply(null, arguments) };\nvar _sha3_224 = Module[\"_sha3_224\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_sha3_224\"].apply(null, arguments) };\nvar _sha3_256 = Module[\"_sha3_256\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_sha3_256\"].apply(null, arguments) };\nvar _sha3_384 = Module[\"_sha3_384\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_sha3_384\"].apply(null, arguments) };\nvar _sha3_512 = Module[\"_sha3_512\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_sha3_512\"].apply(null, arguments) };\nvar _shake128 = Module[\"_shake128\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_shake128\"].apply(null, arguments) };\nvar _shake256 = Module[\"_shake256\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_shake256\"].apply(null, arguments) };\nvar establishStackSpace = Module[\"establishStackSpace\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"establishStackSpace\"].apply(null, arguments) };\nvar stackAlloc = Module[\"stackAlloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"stackAlloc\"].apply(null, arguments) };\nvar stackRestore = Module[\"stackRestore\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"stackRestore\"].apply(null, arguments) };\nvar stackSave = Module[\"stackSave\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"stackSave\"].apply(null, arguments) };\n;\n\n\n\n// === Auto-generated postamble setup entry stuff ===\n\nModule['asm'] = asm;\n\nif (!Module[\"intArrayFromString\"]) Module[\"intArrayFromString\"] = function() { abort(\"'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"intArrayToString\"]) Module[\"intArrayToString\"] = function() { abort(\"'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nModule[\"ccall\"] = ccall;\nModule[\"cwrap\"] = cwrap;\nif (!Module[\"setValue\"]) Module[\"setValue\"] = function() { abort(\"'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nModule[\"getValue\"] = getValue;\nif (!Module[\"allocate\"]) Module[\"allocate\"] = function() { abort(\"'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getMemory\"]) Module[\"getMemory\"] = function() { abort(\"'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"AsciiToString\"]) Module[\"AsciiToString\"] = function() { abort(\"'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToAscii\"]) Module[\"stringToAscii\"] = function() { abort(\"'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF8ArrayToString\"]) Module[\"UTF8ArrayToString\"] = function() { abort(\"'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF8ToString\"]) Module[\"UTF8ToString\"] = function() { abort(\"'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF8Array\"]) Module[\"stringToUTF8Array\"] = function() { abort(\"'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF8\"]) Module[\"stringToUTF8\"] = function() { abort(\"'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"lengthBytesUTF8\"]) Module[\"lengthBytesUTF8\"] = function() { abort(\"'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF16ToString\"]) Module[\"UTF16ToString\"] = function() { abort(\"'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF16\"]) Module[\"stringToUTF16\"] = function() { abort(\"'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"lengthBytesUTF16\"]) Module[\"lengthBytesUTF16\"] = function() { abort(\"'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF32ToString\"]) Module[\"UTF32ToString\"] = function() { abort(\"'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF32\"]) Module[\"stringToUTF32\"] = function() { abort(\"'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"lengthBytesUTF32\"]) Module[\"lengthBytesUTF32\"] = function() { abort(\"'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"allocateUTF8\"]) Module[\"allocateUTF8\"] = function() { abort(\"'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackTrace\"]) Module[\"stackTrace\"] = function() { abort(\"'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnPreRun\"]) Module[\"addOnPreRun\"] = function() { abort(\"'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnInit\"]) Module[\"addOnInit\"] = function() { abort(\"'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnPreMain\"]) Module[\"addOnPreMain\"] = function() { abort(\"'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnExit\"]) Module[\"addOnExit\"] = function() { abort(\"'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnPostRun\"]) Module[\"addOnPostRun\"] = function() { abort(\"'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"writeStringToMemory\"]) Module[\"writeStringToMemory\"] = function() { abort(\"'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"writeArrayToMemory\"]) Module[\"writeArrayToMemory\"] = function() { abort(\"'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"writeAsciiToMemory\"]) Module[\"writeAsciiToMemory\"] = function() { abort(\"'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addRunDependency\"]) Module[\"addRunDependency\"] = function() { abort(\"'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"removeRunDependency\"]) Module[\"removeRunDependency\"] = function() { abort(\"'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"ENV\"]) Module[\"ENV\"] = function() { abort(\"'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"FS\"]) Module[\"FS\"] = function() { abort(\"'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"FS_createFolder\"]) Module[\"FS_createFolder\"] = function() { abort(\"'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createPath\"]) Module[\"FS_createPath\"] = function() { abort(\"'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createDataFile\"]) Module[\"FS_createDataFile\"] = function() { abort(\"'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createPreloadedFile\"]) Module[\"FS_createPreloadedFile\"] = function() { abort(\"'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createLazyFile\"]) Module[\"FS_createLazyFile\"] = function() { abort(\"'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createLink\"]) Module[\"FS_createLink\"] = function() { abort(\"'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createDevice\"]) Module[\"FS_createDevice\"] = function() { abort(\"'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_unlink\"]) Module[\"FS_unlink\"] = function() { abort(\"'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"GL\"]) Module[\"GL\"] = function() { abort(\"'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"dynamicAlloc\"]) Module[\"dynamicAlloc\"] = function() { abort(\"'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"warnOnce\"]) Module[\"warnOnce\"] = function() { abort(\"'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"loadDynamicLibrary\"]) Module[\"loadDynamicLibrary\"] = function() { abort(\"'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"loadWebAssemblyModule\"]) Module[\"loadWebAssemblyModule\"] = function() { abort(\"'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getLEB\"]) Module[\"getLEB\"] = function() { abort(\"'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getFunctionTables\"]) Module[\"getFunctionTables\"] = function() { abort(\"'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"alignFunctionTables\"]) Module[\"alignFunctionTables\"] = function() { abort(\"'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"registerFunctions\"]) Module[\"registerFunctions\"] = function() { abort(\"'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addFunction\"]) Module[\"addFunction\"] = function() { abort(\"'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"removeFunction\"]) Module[\"removeFunction\"] = function() { abort(\"'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getFuncWrapper\"]) Module[\"getFuncWrapper\"] = function() { abort(\"'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"prettyPrint\"]) Module[\"prettyPrint\"] = function() { abort(\"'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"makeBigInt\"]) Module[\"makeBigInt\"] = function() { abort(\"'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"dynCall\"]) Module[\"dynCall\"] = function() { abort(\"'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getCompilerSetting\"]) Module[\"getCompilerSetting\"] = function() { abort(\"'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackSave\"]) Module[\"stackSave\"] = function() { abort(\"'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackRestore\"]) Module[\"stackRestore\"] = function() { abort(\"'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackAlloc\"]) Module[\"stackAlloc\"] = function() { abort(\"'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"establishStackSpace\"]) Module[\"establishStackSpace\"] = function() { abort(\"'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"print\"]) Module[\"print\"] = function() { abort(\"'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"printErr\"]) Module[\"printErr\"] = function() { abort(\"'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getTempRet0\"]) Module[\"getTempRet0\"] = function() { abort(\"'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"setTempRet0\"]) Module[\"setTempRet0\"] = function() { abort(\"'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"Pointer_stringify\"]) Module[\"Pointer_stringify\"] = function() { abort(\"'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"writeStackCookie\"]) Module[\"writeStackCookie\"] = function() { abort(\"'writeStackCookie' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"checkStackCookie\"]) Module[\"checkStackCookie\"] = function() { abort(\"'checkStackCookie' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"abortStackOverflow\"]) Module[\"abortStackOverflow\"] = function() { abort(\"'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };if (!Module[\"ALLOC_NORMAL\"]) Object.defineProperty(Module, \"ALLOC_NORMAL\", { get: function() { abort(\"'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\nif (!Module[\"ALLOC_STACK\"]) Object.defineProperty(Module, \"ALLOC_STACK\", { get: function() { abort(\"'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\nif (!Module[\"ALLOC_DYNAMIC\"]) Object.defineProperty(Module, \"ALLOC_DYNAMIC\", { get: function() { abort(\"'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\nif (!Module[\"ALLOC_NONE\"]) Object.defineProperty(Module, \"ALLOC_NONE\", { get: function() { abort(\"'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\n\n\n\n// Modularize mode returns a function, which can be called to\n// create instances. The instances provide a then() method,\n// must like a Promise, that receives a callback. The callback\n// is called when the module is ready to run, with the module\n// as a parameter. (Like a Promise, it also returns the module\n// so you can use the output of .then(..)).\nModule['then'] = function(func) {\n  // We may already be ready to run code at this time. if\n  // so, just queue a call to the callback.\n  if (Module['calledRun']) {\n    func(Module);\n  } else {\n    // we are not ready to call then() yet. we must call it\n    // at the same time we would call onRuntimeInitialized.\n    var old = Module['onRuntimeInitialized'];\n    Module['onRuntimeInitialized'] = function() {\n      if (old) old();\n      func(Module);\n    };\n  }\n  return Module;\n};\n\n/**\n * @constructor\n * @extends {Error}\n * @this {ExitStatus}\n */\nfunction ExitStatus(status) {\n  this.name = \"ExitStatus\";\n  this.message = \"Program terminated with exit(\" + status + \")\";\n  this.status = status;\n};\nExitStatus.prototype = new Error();\nExitStatus.prototype.constructor = ExitStatus;\n\nvar calledMain = false;\n\ndependenciesFulfilled = function runCaller() {\n  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\n  if (!Module['calledRun']) run();\n  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\n}\n\n\n\n\n\n/** @type {function(Array=)} */\nfunction run(args) {\n  args = args || Module['arguments'];\n\n  if (runDependencies > 0) {\n    return;\n  }\n\n  writeStackCookie();\n\n  preRun();\n\n  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later\n  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame\n\n  function doRun() {\n    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening\n    Module['calledRun'] = true;\n\n    if (ABORT) return;\n\n    ensureInitRuntime();\n\n    preMain();\n\n    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\n\n    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module[\"onRuntimeInitialized\"]');\n\n    postRun();\n  }\n\n  if (Module['setStatus']) {\n    Module['setStatus']('Running...');\n    setTimeout(function() {\n      setTimeout(function() {\n        Module['setStatus']('');\n      }, 1);\n      doRun();\n    }, 1);\n  } else {\n    doRun();\n  }\n  checkStackCookie();\n}\nModule['run'] = run;\n\nfunction checkUnflushedContent() {\n  // Compiler settings do not allow exiting the runtime, so flushing\n  // the streams is not possible. but in ASSERTIONS mode we check\n  // if there was something to flush, and if so tell the user they\n  // should request that the runtime be exitable.\n  // Normally we would not even include flush() at all, but in ASSERTIONS\n  // builds we do so just for this check, and here we see if there is any\n  // content to flush, that is, we check if there would have been\n  // something a non-ASSERTIONS build would have not seen.\n  // How we flush the streams depends on whether we are in FILESYSTEM=0\n  // mode (which has its own special function for this; otherwise, all\n  // the code is inside libc)\n  var print = out;\n  var printErr = err;\n  var has = false;\n  out = err = function(x) {\n    has = true;\n  }\n  try { // it doesn't matter if it fails\n    var flush = null;\n    if (flush) flush(0);\n  } catch(e) {}\n  out = print;\n  err = printErr;\n  if (has) {\n    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');\n    warnOnce('(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)');\n  }\n}\n\nfunction exit(status, implicit) {\n  checkUnflushedContent();\n\n  // if this is just main exit-ing implicitly, and the status is 0, then we\n  // don't need to do anything here and can just leave. if the status is\n  // non-zero, though, then we need to report it.\n  // (we may have warned about this earlier, if a situation justifies doing so)\n  if (implicit && Module['noExitRuntime'] && status === 0) {\n    return;\n  }\n\n  if (Module['noExitRuntime']) {\n    // if exit() was called, we may warn the user if the runtime isn't actually being shut down\n    if (!implicit) {\n      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');\n    }\n  } else {\n\n    ABORT = true;\n    EXITSTATUS = status;\n\n    exitRuntime();\n\n    if (Module['onExit']) Module['onExit'](status);\n  }\n\n  Module['quit'](status, new ExitStatus(status));\n}\n\nvar abortDecorators = [];\n\nfunction abort(what) {\n  if (Module['onAbort']) {\n    Module['onAbort'](what);\n  }\n\n  if (what !== undefined) {\n    out(what);\n    err(what);\n    what = JSON.stringify(what)\n  } else {\n    what = '';\n  }\n\n  ABORT = true;\n  EXITSTATUS = 1;\n\n  var extra = '';\n  var output = 'abort(' + what + ') at ' + stackTrace() + extra;\n  if (abortDecorators) {\n    abortDecorators.forEach(function(decorator) {\n      output = decorator(output, what);\n    });\n  }\n  throw output;\n}\nModule['abort'] = abort;\n\nif (Module['preInit']) {\n  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\n  while (Module['preInit'].length > 0) {\n    Module['preInit'].pop()();\n  }\n}\n\n\n  Module[\"noExitRuntime\"] = true;\n\nrun();\n\n\n\n\n\n// {{MODULE_ADDITIONS}}\n\n\n\n\n\n  return KECCAK\n}\n);\n})();\nif (true)\n      module.exports = KECCAK;\n    else {}\n    \n\n//# sourceURL=webpack://KECCAK/./lib/keccak-tiny-browser.js?");

/***/ }),

/***/ "./lib/keccak-tiny-browser.wasm":
/*!**************************************!*\
  !*** ./lib/keccak-tiny-browser.wasm ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var buffer = new ArrayBuffer(23552);var uint8 = new Uint8Array(buffer);uint8.set([0,97,115,109,1,0,0,0,1,50,8,96,1,127,0,96,0,1,127,96,3,127,127,127,1,127,96,1,127,1,127,96,2,127,127,0,96,4,127,127,127,127,1,127,96,6,127,127,127,127,127,127,1,127,96,3,127,127,127,0,2,151,2,12,3,101,110,118,18,97,98,111,114,116,83,116,97,99,107,79,118,101,114,102,108,111,119,0,0,3,101,110,118,11,95,95,95,115,101,116,69,114,114,78,111,0,0,3,101,110,118,25,95,101,109,115,99,114,105,112,116,101,110,95,103,101,116,95,104,101,97,112,95,115,105,122,101,0,1,3,101,110,118,22,95,101,109,115,99,114,105,112,116,101,110,95,109,101,109,99,112,121,95,98,105,103,0,2,3,101,110,118,23,95,101,109,115,99,114,105,112,116,101,110,95,114,101,115,105,122,101,95,104,101,97,112,0,3,3,101,110,118,23,97,98,111,114,116,79,110,67,97,110,110,111,116,71,114,111,119,77,101,109,111,114,121,0,3,3,101,110,118,13,95,95,109,101,109,111,114,121,95,98,97,115,101,3,127,0,3,101,110,118,12,95,95,116,97,98,108,101,95,98,97,115,101,3,127,0,3,101,110,118,13,116,101,109,112,68,111,117,98,108,101,80,116,114,3,127,0,3,101,110,118,14,68,89,78,65,77,73,67,84,79,80,95,80,84,82,3,127,0,3,101,110,118,6,109,101,109,111,114,121,2,0,128,2,3,101,110,118,5,116,97,98,108,101,1,112,1,0,0,3,25,24,3,3,1,0,4,5,6,5,5,5,5,5,5,5,5,5,7,0,7,3,0,2,2,3,6,88,14,127,1,35,2,11,127,1,35,3,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,124,1,68,0,0,0,0,0,0,0,0,11,127,1,65,176,23,11,127,1,65,176,151,192,2,11,125,1,67,0,0,0,0,11,125,1,67,0,0,0,0,11,7,128,2,20,16,95,95,103,114,111,119,87,97,115,109,77,101,109,111,114,121,0,6,5,95,102,114,101,101,0,26,11,95,107,101,99,99,97,107,95,50,50,52,0,18,11,95,107,101,99,99,97,107,95,50,53,54,0,19,11,95,107,101,99,99,97,107,95,51,56,52,0,20,11,95,107,101,99,99,97,107,95,53,49,50,0,21,7,95,109,97,108,108,111,99,0,25,7,95,109,101,109,99,112,121,0,27,7,95,109,101,109,115,101,116,0,28,5,95,115,98,114,107,0,29,9,95,115,104,97,51,95,50,50,52,0,14,9,95,115,104,97,51,95,50,53,54,0,15,9,95,115,104,97,51,95,51,56,52,0,16,9,95,115,104,97,51,95,53,49,50,0,17,9,95,115,104,97,107,101,49,50,56,0,11,9,95,115,104,97,107,101,50,53,54,0,13,19,101,115,116,97,98,108,105,115,104,83,116,97,99,107,83,112,97,99,101,0,10,10,115,116,97,99,107,65,108,108,111,99,0,7,12,115,116,97,99,107,82,101,115,116,111,114,101,0,9,9,115,116,97,99,107,83,97,118,101,0,8,9,1,0,10,224,176,1,24,6,0,32,0,64,0,11,40,1,1,127,35,14,33,1,35,14,32,0,106,36,14,35,14,65,15,106,65,112,113,36,14,35,14,35,15,78,4,64,32,0,16,0,11,32,1,15,11,5,0,35,14,15,11,6,0,32,0,36,14,11,10,0,32,0,36,14,32,1,36,15,11,28,1,3,127,35,14,33,6,32,0,32,1,32,2,32,3,65,168,1,65,31,16,12,33,4,32,4,15,11,223,2,1,27,127,35,14,33,32,35,14,65,208,1,106,36,14,35,14,35,15,78,4,64,65,208,1,16,0,11,32,32,33,25,32,0,65,0,70,33,26,32,26,4,64,65,127,33,6,32,32,36,14,32,6,15,11,32,2,65,0,70,33,27,32,3,65,0,71,33,28,32,28,32,27,113,33,29,32,4,65,199,1,75,33,11,32,29,32,11,114,33,30,32,30,4,64,65,127,33,6,32,32,36,14,32,6,15,11,32,25,65,0,65,200,1,16,28,26,32,2,33,9,32,3,33,10,3,64,2,64,32,10,32,4,73,33,12,32,12,4,64,12,1,11,32,25,32,9,32,4,16,22,32,25,16,23,32,9,32,4,106,33,13,32,10,32,4,107,33,14,32,13,33,9,32,14,33,10,12,1,11,11,32,25,32,10,106,33,15,32,15,44,0,0,33,16,32,16,32,5,115,33,17,32,15,32,17,58,0,0,32,4,65,127,106,33,18,32,25,32,18,106,33,19,32,19,44,0,0,33,20,32,20,65,128,127,115,33,21,32,19,32,21,58,0,0,32,25,32,9,32,10,16,22,32,25,16,23,32,0,33,7,32,1,33,8,3,64,2,64,32,8,32,4,73,33,22,32,22,4,64,12,1,11,32,25,32,7,32,4,16,24,32,25,16,23,32,7,32,4,106,33,23,32,8,32,4,107,33,24,32,23,33,7,32,24,33,8,12,1,11,11,32,25,32,7,32,8,16,24,32,25,65,0,65,200,1,16,28,26,65,0,33,6,32,32,36,14,32,6,15,11,28,1,3,127,35,14,33,6,32,0,32,1,32,2,32,3,65,136,1,65,31,16,12,33,4,32,4,15,11,49,1,5,127,35,14,33,8,32,1,65,28,75,33,5,32,5,4,64,65,127,33,4,5,32,0,32,1,32,2,32,3,65,144,1,65,6,16,12,33,6,32,6,33,4,11,32,4,15,11,49,1,5,127,35,14,33,8,32,1,65,32,75,33,5,32,5,4,64,65,127,33,4,5,32,0,32,1,32,2,32,3,65,136,1,65,6,16,12,33,6,32,6,33,4,11,32,4,15,11,49,1,5,127,35,14,33,8,32,1,65,48,75,33,5,32,5,4,64,65,127,33,4,5,32,0,32,1,32,2,32,3,65,232,0,65,6,16,12,33,6,32,6,33,4,11,32,4,15,11,50,1,5,127,35,14,33,8,32,1,65,192,0,75,33,5,32,5,4,64,65,127,33,4,5,32,0,32,1,32,2,32,3,65,200,0,65,6,16,12,33,6,32,6,33,4,11,32,4,15,11,49,1,5,127,35,14,33,8,32,1,65,28,75,33,5,32,5,4,64,65,127,33,4,5,32,0,32,1,32,2,32,3,65,144,1,65,1,16,12,33,6,32,6,33,4,11,32,4,15,11,49,1,5,127,35,14,33,8,32,1,65,32,75,33,5,32,5,4,64,65,127,33,4,5,32,0,32,1,32,2,32,3,65,136,1,65,1,16,12,33,6,32,6,33,4,11,32,4,15,11,49,1,5,127,35,14,33,8,32,1,65,48,75,33,5,32,5,4,64,65,127,33,4,5,32,0,32,1,32,2,32,3,65,232,0,65,1,16,12,33,6,32,6,33,4,11,32,4,15,11,50,1,5,127,35,14,33,8,32,1,65,192,0,75,33,5,32,5,4,64,65,127,33,4,5,32,0,32,1,32,2,32,3,65,200,0,65,1,16,12,33,6,32,6,33,4,11,32,4,15,11,88,1,10,127,35,14,33,12,65,0,33,3,3,64,2,64,32,3,32,2,70,33,10,32,10,4,64,12,1,11,32,1,32,3,106,33,4,32,4,44,0,0,33,5,32,0,32,3,106,33,6,32,6,44,0,0,33,7,32,7,32,5,115,33,8,32,6,32,8,58,0,0,32,3,65,1,106,33,9,32,9,33,3,12,1,11,11,15,11,227,21,2,30,127,131,2,126,35,14,33,30,32,0,65,40,106,33,2,32,0,65,208,0,106,33,13,32,0,65,248,0,106,33,21,32,0,65,160,1,106,33,22,32,0,65,8,106,33,23,32,0,65,48,106,33,24,32,0,65,216,0,106,33,25,32,0,65,128,1,106,33,26,32,0,65,168,1,106,33,27,32,0,65,16,106,33,3,32,0,65,56,106,33,4,32,0,65,224,0,106,33,5,32,0,65,136,1,106,33,6,32,0,65,176,1,106,33,7,32,0,65,24,106,33,8,32,0,65,192,0,106,33,9,32,0,65,232,0,106,33,10,32,0,65,144,1,106,33,11,32,0,65,184,1,106,33,12,32,0,65,32,106,33,14,32,0,65,200,0,106,33,15,32,0,65,240,0,106,33,16,32,0,65,152,1,106,33,17,32,0,65,192,1,106,33,18,65,0,33,1,3,64,2,64,32,1,65,24,70,33,28,32,28,4,64,12,1,11,32,0,41,3,0,33,181,1,32,2,41,3,0,33,192,1,32,181,1,32,192,1,133,33,203,1,32,13,41,3,0,33,214,1,32,203,1,32,214,1,133,33,219,1,32,21,41,3,0,33,220,1,32,219,1,32,220,1,133,33,221,1,32,22,41,3,0,33,222,1,32,221,1,32,222,1,133,33,223,1,32,23,41,3,0,33,224,1,32,24,41,3,0,33,225,1,32,224,1,32,225,1,133,33,226,1,32,25,41,3,0,33,227,1,32,226,1,32,227,1,133,33,228,1,32,26,41,3,0,33,229,1,32,228,1,32,229,1,133,33,230,1,32,27,41,3,0,33,231,1,32,230,1,32,231,1,133,33,232,1,32,3,41,3,0,33,233,1,32,4,41,3,0,33,234,1,32,233,1,32,234,1,133,33,235,1,32,5,41,3,0,33,236,1,32,235,1,32,236,1,133,33,237,1,32,6,41,3,0,33,238,1,32,237,1,32,238,1,133,33,239,1,32,7,41,3,0,33,240,1,32,239,1,32,240,1,133,33,241,1,32,8,41,3,0,33,242,1,32,9,41,3,0,33,243,1,32,242,1,32,243,1,133,33,244,1,32,10,41,3,0,33,245,1,32,244,1,32,245,1,133,33,246,1,32,11,41,3,0,33,247,1,32,246,1,32,247,1,133,33,248,1,32,12,41,3,0,33,249,1,32,248,1,32,249,1,133,33,250,1,32,14,41,3,0,33,251,1,32,15,41,3,0,33,252,1,32,251,1,32,252,1,133,33,253,1,32,16,41,3,0,33,254,1,32,253,1,32,254,1,133,33,255,1,32,17,41,3,0,33,128,2,32,255,1,32,128,2,133,33,129,2,32,18,41,3,0,33,130,2,32,129,2,32,130,2,133,33,131,2,32,232,1,66,1,134,33,132,2,32,232,1,66,63,136,33,133,2,32,132,2,32,133,2,132,33,134,2,32,131,2,32,134,2,133,33,135,2,32,181,1,32,135,2,133,33,136,2,32,0,32,136,2,55,3,0,32,192,1,32,135,2,133,33,137,2,32,214,1,32,135,2,133,33,138,2,32,220,1,32,135,2,133,33,139,2,32,21,32,139,2,55,3,0,32,222,1,32,135,2,133,33,140,2,32,22,32,140,2,55,3,0,32,241,1,66,1,134,33,141,2,32,241,1,66,63,136,33,142,2,32,141,2,32,142,2,132,33,143,2,32,223,1,32,143,2,133,33,144,2,32,224,1,32,144,2,133,33,145,2,32,23,32,145,2,55,3,0,32,225,1,32,144,2,133,33,146,2,32,24,32,146,2,55,3,0,32,227,1,32,144,2,133,33,147,2,32,229,1,32,144,2,133,33,148,2,32,231,1,32,144,2,133,33,149,2,32,250,1,66,1,134,33,150,2,32,250,1,66,63,136,33,151,2,32,150,2,32,151,2,132,33,152,2,32,232,1,32,152,2,133,33,153,2,32,233,1,32,153,2,133,33,154,2,32,3,32,154,2,55,3,0,32,234,1,32,153,2,133,33,155,2,32,236,1,32,153,2,133,33,156,2,32,238,1,32,153,2,133,33,157,2,32,240,1,32,153,2,133,33,158,2,32,7,32,158,2,55,3,0,32,131,2,66,1,134,33,159,2,32,131,2,66,63,136,33,160,2,32,159,2,32,160,2,132,33,161,2,32,241,1,32,161,2,133,33,31,32,242,1,32,31,133,33,32,32,243,1,32,31,133,33,33,32,245,1,32,31,133,33,34,32,247,1,32,31,133,33,35,32,249,1,32,31,133,33,36,32,223,1,66,1,134,33,37,32,223,1,66,63,136,33,38,32,37,32,38,132,33,39,32,250,1,32,39,133,33,40,32,251,1,32,40,133,33,41,32,252,1,32,40,133,33,42,32,254,1,32,40,133,33,43,32,128,2,32,40,133,33,44,32,130,2,32,40,133,33,45,32,145,2,66,1,134,33,46,32,145,2,66,63,136,33,47,32,46,32,47,132,33,48,32,13,32,48,55,3,0,32,138,2,66,3,134,33,49,32,138,2,66,61,136,33,50,32,49,32,50,132,33,51,32,4,32,51,55,3,0,32,155,2,66,6,134,33,52,32,155,2,66,58,136,33,53,32,52,32,53,132,33,54,32,25,32,54,55,3,0,32,147,2,66,10,134,33,55,32,147,2,66,54,136,33,56,32,55,32,56,132,33,57,32,6,32,57,55,3,0,32,157,2,66,15,134,33,58,32,157,2,66,49,136,33,59,32,58,32,59,132,33,60,32,11,32,60,55,3,0,32,35,66,21,134,33,61,32,35,66,43,136,33,62,32,61,32,62,132,33,63,32,32,66,28,134,33,64,32,32,66,36,136,33,65,32,64,32,65,132,33,66,32,137,2,66,36,134,33,67,32,137,2,66,28,136,33,68,32,67,32,68,132,33,69,32,26,32,69,55,3,0,32,148,2,66,45,134,33,70,32,148,2,66,19,136,33,71,32,70,32,71,132,33,72,32,33,66,55,134,33,73,32,33,66,9,136,33,74,32,73,32,74,132,33,75,32,27,32,75,55,3,0,32,149,2,66,2,134,33,76,32,149,2,66,62,136,33,77,32,76,32,77,132,33,78,32,18,32,78,55,3,0,32,45,66,14,134,33,79,32,45,66,50,136,33,80,32,79,32,80,132,33,81,32,21,41,3,0,33,82,32,41,66,27,134,33,83,32,41,66,37,136,33,84,32,83,32,84,132,33,85,32,21,32,85,55,3,0,32,82,66,41,134,33,86,32,82,66,23,136,33,87,32,86,32,87,132,33,88,32,12,32,88,55,3,0,32,36,66,56,134,33,89,32,36,66,8,136,33,90,32,89,32,90,132,33,91,32,17,32,91,55,3,0,32,44,66,8,134,33,92,32,44,66,56,136,33,93,32,92,32,93,132,33,94,32,34,66,25,134,33,95,32,34,66,39,136,33,96,32,95,32,96,132,33,97,32,3,41,3,0,33,98,32,156,2,66,43,134,33,99,32,156,2,66,21,136,33,100,32,99,32,100,132,33,101,32,22,41,3,0,33,102,32,98,66,62,134,33,103,32,98,66,2,136,33,104,32,103,32,104,132,33,105,32,22,32,105,55,3,0,32,102,66,18,134,33,106,32,102,66,46,136,33,107,32,106,32,107,132,33,108,32,7,41,3,0,33,109,32,43,66,39,134,33,110,32,43,66,25,136,33,111,32,110,32,111,132,33,112,32,7,32,112,55,3,0,32,109,66,61,134,33,113,32,109,66,3,136,33,114,32,113,32,114,132,33,115,32,24,41,3,0,33,116,32,42,66,20,134,33,117,32,42,66,44,136,33,118,32,117,32,118,132,33,119,32,116,66,44,134,33,120,32,116,66,20,136,33,121,32,120,32,121,132,33,122,32,0,41,3,0,33,123,32,122,66,127,133,33,124,32,101,32,124,131,33,125,32,123,32,125,133,33,126,32,0,32,126,55,3,0,32,101,66,127,133,33,127,32,63,32,127,131,33,128,1,32,122,32,128,1,133,33,129,1,32,23,32,129,1,55,3,0,32,63,66,127,133,33,130,1,32,81,32,130,1,131,33,131,1,32,101,32,131,1,133,33,132,1,32,3,32,132,1,55,3,0,32,81,66,127,133,33,133,1,32,123,32,133,1,131,33,134,1,32,63,32,134,1,133,33,135,1,32,8,32,135,1,55,3,0,32,123,66,127,133,33,136,1,32,122,32,136,1,131,33,137,1,32,81,32,137,1,133,33,138,1,32,14,32,138,1,55,3,0,32,4,41,3,0,33,139,1,32,119,66,127,133,33,140,1,32,139,1,32,140,1,131,33,141,1,32,66,32,141,1,133,33,142,1,32,2,32,142,1,55,3,0,32,139,1,66,127,133,33,143,1,32,72,32,143,1,131,33,144,1,32,119,32,144,1,133,33,145,1,32,24,32,145,1,55,3,0,32,72,66,127,133,33,146,1,32,115,32,146,1,131,33,147,1,32,139,1,32,147,1,133,33,148,1,32,4,32,148,1,55,3,0,32,115,66,127,133,33,149,1,32,66,32,149,1,131,33,150,1,32,72,32,150,1,133,33,151,1,32,9,32,151,1,55,3,0,32,66,66,127,133,33,152,1,32,119,32,152,1,131,33,153,1,32,115,32,153,1,133,33,154,1,32,15,32,154,1,55,3,0,32,13,41,3,0,33,155,1,32,25,41,3,0,33,156,1,32,156,1,66,127,133,33,157,1,32,97,32,157,1,131,33,158,1,32,155,1,32,158,1,133,33,159,1,32,13,32,159,1,55,3,0,32,97,66,127,133,33,160,1,32,94,32,160,1,131,33,161,1,32,156,1,32,161,1,133,33,162,1,32,25,32,162,1,55,3,0,32,94,66,127,133,33,163,1,32,108,32,163,1,131,33,164,1,32,97,32,164,1,133,33,165,1,32,5,32,165,1,55,3,0,32,108,66,127,133,33,166,1,32,155,1,32,166,1,131,33,167,1,32,94,32,167,1,133,33,168,1,32,10,32,168,1,55,3,0,32,155,1,66,127,133,33,169,1,32,156,1,32,169,1,131,33,170,1,32,108,32,170,1,133,33,171,1,32,16,32,171,1,55,3,0,32,21,41,3,0,33,172,1,32,26,41,3,0,33,173,1,32,6,41,3,0,33,174,1,32,11,41,3,0,33,175,1,32,17,41,3,0,33,176,1,32,173,1,66,127,133,33,177,1,32,174,1,32,177,1,131,33,178,1,32,172,1,32,178,1,133,33,179,1,32,21,32,179,1,55,3,0,32,174,1,66,127,133,33,180,1,32,175,1,32,180,1,131,33,182,1,32,173,1,32,182,1,133,33,183,1,32,26,32,183,1,55,3,0,32,175,1,66,127,133,33,184,1,32,176,1,32,184,1,131,33,185,1,32,174,1,32,185,1,133,33,186,1,32,6,32,186,1,55,3,0,32,176,1,66,127,133,33,187,1,32,172,1,32,187,1,131,33,188,1,32,175,1,32,188,1,133,33,189,1,32,11,32,189,1,55,3,0,32,172,1,66,127,133,33,190,1,32,173,1,32,190,1,131,33,191,1,32,176,1,32,191,1,133,33,193,1,32,17,32,193,1,55,3,0,32,22,41,3,0,33,194,1,32,27,41,3,0,33,195,1,32,7,41,3,0,33,196,1,32,12,41,3,0,33,197,1,32,18,41,3,0,33,198,1,32,195,1,66,127,133,33,199,1,32,196,1,32,199,1,131,33,200,1,32,194,1,32,200,1,133,33,201,1,32,22,32,201,1,55,3,0,32,196,1,66,127,133,33,202,1,32,197,1,32,202,1,131,33,204,1,32,195,1,32,204,1,133,33,205,1,32,27,32,205,1,55,3,0,32,197,1,66,127,133,33,206,1,32,198,1,32,206,1,131,33,207,1,32,196,1,32,207,1,133,33,208,1,32,7,32,208,1,55,3,0,32,198,1,66,127,133,33,209,1,32,194,1,32,209,1,131,33,210,1,32,197,1,32,210,1,133,33,211,1,32,12,32,211,1,55,3,0,32,194,1,66,127,133,33,212,1,32,195,1,32,212,1,131,33,213,1,32,198,1,32,213,1,133,33,215,1,32,18,32,215,1,55,3,0,65,128,8,32,1,65,3,116,106,33,19,32,19,41,3,0,33,216,1,32,0,41,3,0,33,217,1,32,217,1,32,216,1,133,33,218,1,32,0,32,218,1,55,3,0,32,1,65,1,106,33,20,32,20,33,1,12,1,11,11,15,11,74,1,8,127,35,14,33,10,65,0,33,3,3,64,2,64,32,3,32,2,70,33,8,32,8,4,64,12,1,11,32,0,32,3,106,33,4,32,4,44,0,0,33,5,32,1,32,3,106,33,6,32,6,32,5,58,0,0,32,3,65,1,106,33,7,32,7,33,3,12,1,11,11,15,11,177,110,1,197,8,127,35,14,33,197,8,35,14,65,16,106,36,14,35,14,35,15,78,4,64,65,16,16,0,11,32,197,8,33,92,32,0,65,245,1,73,33,203,1,2,64,32,203,1,4,64,32,0,65,11,73,33,186,2,32,0,65,11,106,33,169,3,32,169,3,65,120,113,33,152,4,32,186,2,4,127,65,16,5,32,152,4,11,33,135,5,32,135,5,65,3,118,33,246,5,65,192,9,40,2,0,33,229,6,32,229,6,32,246,5,118,33,212,7,32,212,7,65,3,113,33,93,32,93,65,0,70,33,104,32,104,69,4,64,32,212,7,65,1,113,33,115,32,115,65,1,115,33,126,32,126,32,246,5,106,33,137,1,32,137,1,65,1,116,33,148,1,65,232,9,32,148,1,65,2,116,106,33,159,1,32,159,1,65,8,106,33,170,1,32,170,1,40,2,0,33,181,1,32,181,1,65,8,106,33,192,1,32,192,1,40,2,0,33,204,1,32,204,1,32,159,1,70,33,215,1,32,215,1,4,64,65,1,32,137,1,116,33,226,1,32,226,1,65,127,115,33,237,1,32,229,6,32,237,1,113,33,248,1,65,192,9,32,248,1,54,2,0,5,32,204,1,65,12,106,33,131,2,32,131,2,32,159,1,54,2,0,32,170,1,32,204,1,54,2,0,11,32,137,1,65,3,116,33,142,2,32,142,2,65,3,114,33,153,2,32,181,1,65,4,106,33,164,2,32,164,2,32,153,2,54,2,0,32,181,1,32,142,2,106,33,175,2,32,175,2,65,4,106,33,187,2,32,187,2,40,2,0,33,198,2,32,198,2,65,1,114,33,209,2,32,187,2,32,209,2,54,2,0,32,192,1,33,1,32,197,8,36,14,32,1,15,11,65,200,9,40,2,0,33,220,2,32,135,5,32,220,2,75,33,231,2,32,231,2,4,64,32,212,7,65,0,70,33,242,2,32,242,2,69,4,64,32,212,7,32,246,5,116,33,253,2,65,2,32,246,5,116,33,136,3,65,0,32,136,3,107,33,147,3,32,136,3,32,147,3,114,33,158,3,32,253,2,32,158,3,113,33,170,3,65,0,32,170,3,107,33,181,3,32,170,3,32,181,3,113,33,192,3,32,192,3,65,127,106,33,203,3,32,203,3,65,12,118,33,214,3,32,214,3,65,16,113,33,225,3,32,203,3,32,225,3,118,33,236,3,32,236,3,65,5,118,33,247,3,32,247,3,65,8,113,33,130,4,32,130,4,32,225,3,114,33,141,4,32,236,3,32,130,4,118,33,153,4,32,153,4,65,2,118,33,164,4,32,164,4,65,4,113,33,175,4,32,141,4,32,175,4,114,33,186,4,32,153,4,32,175,4,118,33,197,4,32,197,4,65,1,118,33,208,4,32,208,4,65,2,113,33,219,4,32,186,4,32,219,4,114,33,230,4,32,197,4,32,219,4,118,33,241,4,32,241,4,65,1,118,33,252,4,32,252,4,65,1,113,33,136,5,32,230,4,32,136,5,114,33,147,5,32,241,4,32,136,5,118,33,158,5,32,147,5,32,158,5,106,33,169,5,32,169,5,65,1,116,33,180,5,65,232,9,32,180,5,65,2,116,106,33,191,5,32,191,5,65,8,106,33,202,5,32,202,5,40,2,0,33,213,5,32,213,5,65,8,106,33,224,5,32,224,5,40,2,0,33,235,5,32,235,5,32,191,5,70,33,247,5,32,247,5,4,64,65,1,32,169,5,116,33,130,6,32,130,6,65,127,115,33,141,6,32,229,6,32,141,6,113,33,152,6,65,192,9,32,152,6,54,2,0,32,152,6,33,213,7,5,32,235,5,65,12,106,33,163,6,32,163,6,32,191,5,54,2,0,32,202,5,32,235,5,54,2,0,32,229,6,33,213,7,11,32,169,5,65,3,116,33,174,6,32,174,6,32,135,5,107,33,185,6,32,135,5,65,3,114,33,196,6,32,213,5,65,4,106,33,207,6,32,207,6,32,196,6,54,2,0,32,213,5,32,135,5,106,33,218,6,32,185,6,65,1,114,33,230,6,32,218,6,65,4,106,33,241,6,32,241,6,32,230,6,54,2,0,32,213,5,32,174,6,106,33,252,6,32,252,6,32,185,6,54,2,0,32,220,2,65,0,70,33,135,7,32,135,7,69,4,64,65,212,9,40,2,0,33,146,7,32,220,2,65,3,118,33,157,7,32,157,7,65,1,116,33,168,7,65,232,9,32,168,7,65,2,116,106,33,179,7,65,1,32,157,7,116,33,190,7,32,213,7,32,190,7,113,33,201,7,32,201,7,65,0,70,33,224,7,32,224,7,4,64,32,213,7,32,190,7,114,33,235,7,65,192,9,32,235,7,54,2,0,32,179,7,65,8,106,33,78,32,179,7,33,10,32,78,33,88,5,32,179,7,65,8,106,33,246,7,32,246,7,40,2,0,33,129,8,32,129,8,33,10,32,246,7,33,88,11,32,88,32,146,7,54,2,0,32,10,65,12,106,33,140,8,32,140,8,32,146,7,54,2,0,32,146,7,65,8,106,33,151,8,32,151,8,32,10,54,2,0,32,146,7,65,12,106,33,162,8,32,162,8,32,179,7,54,2,0,11,65,200,9,32,185,6,54,2,0,65,212,9,32,218,6,54,2,0,32,224,5,33,1,32,197,8,36,14,32,1,15,11,65,196,9,40,2,0,33,170,8,32,170,8,65,0,70,33,171,8,32,171,8,4,64,32,135,5,33,9,5,65,0,32,170,8,107,33,94,32,170,8,32,94,113,33,95,32,95,65,127,106,33,96,32,96,65,12,118,33,97,32,97,65,16,113,33,98,32,96,32,98,118,33,99,32,99,65,5,118,33,100,32,100,65,8,113,33,101,32,101,32,98,114,33,102,32,99,32,101,118,33,103,32,103,65,2,118,33,105,32,105,65,4,113,33,106,32,102,32,106,114,33,107,32,103,32,106,118,33,108,32,108,65,1,118,33,109,32,109,65,2,113,33,110,32,107,32,110,114,33,111,32,108,32,110,118,33,112,32,112,65,1,118,33,113,32,113,65,1,113,33,114,32,111,32,114,114,33,116,32,112,32,114,118,33,117,32,116,32,117,106,33,118,65,240,11,32,118,65,2,116,106,33,119,32,119,40,2,0,33,120,32,120,65,4,106,33,121,32,121,40,2,0,33,122,32,122,65,120,113,33,123,32,123,32,135,5,107,33,124,32,120,33,6,32,120,33,7,32,124,33,8,3,64,2,64,32,6,65,16,106,33,125,32,125,40,2,0,33,127,32,127,65,0,70,33,128,1,32,128,1,4,64,32,6,65,20,106,33,129,1,32,129,1,40,2,0,33,130,1,32,130,1,65,0,70,33,131,1,32,131,1,4,64,12,2,5,32,130,1,33,133,1,11,5,32,127,33,133,1,11,32,133,1,65,4,106,33,132,1,32,132,1,40,2,0,33,134,1,32,134,1,65,120,113,33,135,1,32,135,1,32,135,5,107,33,136,1,32,136,1,32,8,73,33,138,1,32,138,1,4,127,32,136,1,5,32,8,11,33,189,8,32,138,1,4,127,32,133,1,5,32,7,11,33,191,8,32,133,1,33,6,32,191,8,33,7,32,189,8,33,8,12,1,11,11,32,7,32,135,5,106,33,139,1,32,139,1,32,7,75,33,140,1,32,140,1,4,64,32,7,65,24,106,33,141,1,32,141,1,40,2,0,33,142,1,32,7,65,12,106,33,143,1,32,143,1,40,2,0,33,144,1,32,144,1,32,7,70,33,145,1,2,64,32,145,1,4,64,32,7,65,20,106,33,151,1,32,151,1,40,2,0,33,152,1,32,152,1,65,0,70,33,153,1,32,153,1,4,64,32,7,65,16,106,33,154,1,32,154,1,40,2,0,33,155,1,32,155,1,65,0,70,33,156,1,32,156,1,4,64,65,0,33,60,12,3,5,32,155,1,33,36,32,154,1,33,39,11,5,32,152,1,33,36,32,151,1,33,39,11,32,36,33,34,32,39,33,37,3,64,2,64,32,34,65,20,106,33,157,1,32,157,1,40,2,0,33,158,1,32,158,1,65,0,70,33,160,1,32,160,1,4,64,32,34,65,16,106,33,161,1,32,161,1,40,2,0,33,162,1,32,162,1,65,0,70,33,163,1,32,163,1,4,64,12,2,5,32,162,1,33,35,32,161,1,33,38,11,5,32,158,1,33,35,32,157,1,33,38,11,32,35,33,34,32,38,33,37,12,1,11,11,32,37,65,0,54,2,0,32,34,33,60,5,32,7,65,8,106,33,146,1,32,146,1,40,2,0,33,147,1,32,147,1,65,12,106,33,149,1,32,149,1,32,144,1,54,2,0,32,144,1,65,8,106,33,150,1,32,150,1,32,147,1,54,2,0,32,144,1,33,60,11,11,32,142,1,65,0,70,33,164,1,2,64,32,164,1,69,4,64,32,7,65,28,106,33,165,1,32,165,1,40,2,0,33,166,1,65,240,11,32,166,1,65,2,116,106,33,167,1,32,167,1,40,2,0,33,168,1,32,7,32,168,1,70,33,169,1,32,169,1,4,64,32,167,1,32,60,54,2,0,32,60,65,0,70,33,172,8,32,172,8,4,64,65,1,32,166,1,116,33,171,1,32,171,1,65,127,115,33,172,1,32,170,8,32,172,1,113,33,173,1,65,196,9,32,173,1,54,2,0,12,3,11,5,32,142,1,65,16,106,33,174,1,32,174,1,40,2,0,33,175,1,32,175,1,32,7,70,33,176,1,32,142,1,65,20,106,33,177,1,32,176,1,4,127,32,174,1,5,32,177,1,11,33,89,32,89,32,60,54,2,0,32,60,65,0,70,33,178,1,32,178,1,4,64,12,3,11,11,32,60,65,24,106,33,179,1,32,179,1,32,142,1,54,2,0,32,7,65,16,106,33,180,1,32,180,1,40,2,0,33,182,1,32,182,1,65,0,70,33,183,1,32,183,1,69,4,64,32,60,65,16,106,33,184,1,32,184,1,32,182,1,54,2,0,32,182,1,65,24,106,33,185,1,32,185,1,32,60,54,2,0,11,32,7,65,20,106,33,186,1,32,186,1,40,2,0,33,187,1,32,187,1,65,0,70,33,188,1,32,188,1,69,4,64,32,60,65,20,106,33,189,1,32,189,1,32,187,1,54,2,0,32,187,1,65,24,106,33,190,1,32,190,1,32,60,54,2,0,11,11,11,32,8,65,16,73,33,191,1,32,191,1,4,64,32,8,32,135,5,106,33,193,1,32,193,1,65,3,114,33,194,1,32,7,65,4,106,33,195,1,32,195,1,32,194,1,54,2,0,32,7,32,193,1,106,33,196,1,32,196,1,65,4,106,33,197,1,32,197,1,40,2,0,33,198,1,32,198,1,65,1,114,33,199,1,32,197,1,32,199,1,54,2,0,5,32,135,5,65,3,114,33,200,1,32,7,65,4,106,33,201,1,32,201,1,32,200,1,54,2,0,32,8,65,1,114,33,202,1,32,139,1,65,4,106,33,205,1,32,205,1,32,202,1,54,2,0,32,139,1,32,8,106,33,206,1,32,206,1,32,8,54,2,0,32,220,2,65,0,70,33,207,1,32,207,1,69,4,64,65,212,9,40,2,0,33,208,1,32,220,2,65,3,118,33,209,1,32,209,1,65,1,116,33,210,1,65,232,9,32,210,1,65,2,116,106,33,211,1,65,1,32,209,1,116,33,212,1,32,212,1,32,229,6,113,33,213,1,32,213,1,65,0,70,33,214,1,32,214,1,4,64,32,212,1,32,229,6,114,33,216,1,65,192,9,32,216,1,54,2,0,32,211,1,65,8,106,33,79,32,211,1,33,2,32,79,33,87,5,32,211,1,65,8,106,33,217,1,32,217,1,40,2,0,33,218,1,32,218,1,33,2,32,217,1,33,87,11,32,87,32,208,1,54,2,0,32,2,65,12,106,33,219,1,32,219,1,32,208,1,54,2,0,32,208,1,65,8,106,33,220,1,32,220,1,32,2,54,2,0,32,208,1,65,12,106,33,221,1,32,221,1,32,211,1,54,2,0,11,65,200,9,32,8,54,2,0,65,212,9,32,139,1,54,2,0,11,32,7,65,8,106,33,222,1,32,222,1,33,1,32,197,8,36,14,32,1,15,5,32,135,5,33,9,11,11,5,32,135,5,33,9,11,5,32,0,65,191,127,75,33,223,1,32,223,1,4,64,65,127,33,9,5,32,0,65,11,106,33,224,1,32,224,1,65,120,113,33,225,1,65,196,9,40,2,0,33,227,1,32,227,1,65,0,70,33,228,1,32,228,1,4,64,32,225,1,33,9,5,65,0,32,225,1,107,33,229,1,32,224,1,65,8,118,33,230,1,32,230,1,65,0,70,33,231,1,32,231,1,4,64,65,0,33,29,5,32,225,1,65,255,255,255,7,75,33,232,1,32,232,1,4,64,65,31,33,29,5,32,230,1,65,128,254,63,106,33,233,1,32,233,1,65,16,118,33,234,1,32,234,1,65,8,113,33,235,1,32,230,1,32,235,1,116,33,236,1,32,236,1,65,128,224,31,106,33,238,1,32,238,1,65,16,118,33,239,1,32,239,1,65,4,113,33,240,1,32,240,1,32,235,1,114,33,241,1,32,236,1,32,240,1,116,33,242,1,32,242,1,65,128,128,15,106,33,243,1,32,243,1,65,16,118,33,244,1,32,244,1,65,2,113,33,245,1,32,241,1,32,245,1,114,33,246,1,65,14,32,246,1,107,33,247,1,32,242,1,32,245,1,116,33,249,1,32,249,1,65,15,118,33,250,1,32,247,1,32,250,1,106,33,251,1,32,251,1,65,1,116,33,252,1,32,251,1,65,7,106,33,253,1,32,225,1,32,253,1,118,33,254,1,32,254,1,65,1,113,33,255,1,32,255,1,32,252,1,114,33,128,2,32,128,2,33,29,11,11,65,240,11,32,29,65,2,116,106,33,129,2,32,129,2,40,2,0,33,130,2,32,130,2,65,0,70,33,132,2,2,64,32,132,2,4,64,65,0,33,59,65,0,33,62,32,229,1,33,64,65,61,33,196,8,5,32,29,65,31,70,33,133,2,32,29,65,1,118,33,134,2,65,25,32,134,2,107,33,135,2,32,133,2,4,127,65,0,5,32,135,2,11,33,136,2,32,225,1,32,136,2,116,33,137,2,65,0,33,23,32,229,1,33,27,32,130,2,33,28,32,137,2,33,30,65,0,33,32,3,64,2,64,32,28,65,4,106,33,138,2,32,138,2,40,2,0,33,139,2,32,139,2,65,120,113,33,140,2,32,140,2,32,225,1,107,33,141,2,32,141,2,32,27,73,33,143,2,32,143,2,4,64,32,141,2,65,0,70,33,144,2,32,144,2,4,64,32,28,33,68,65,0,33,72,32,28,33,75,65,193,0,33,196,8,12,5,5,32,28,33,47,32,141,2,33,48,11,5,32,23,33,47,32,27,33,48,11,32,28,65,20,106,33,145,2,32,145,2,40,2,0,33,146,2,32,30,65,31,118,33,147,2,32,28,65,16,106,32,147,2,65,2,116,106,33,148,2,32,148,2,40,2,0,33,149,2,32,146,2,65,0,70,33,150,2,32,146,2,32,149,2,70,33,151,2,32,150,2,32,151,2,114,33,179,8,32,179,8,4,127,32,32,5,32,146,2,11,33,49,32,149,2,65,0,70,33,152,2,32,30,65,1,116,33,193,8,32,152,2,4,64,32,49,33,59,32,47,33,62,32,48,33,64,65,61,33,196,8,12,1,5,32,47,33,23,32,48,33,27,32,149,2,33,28,32,193,8,33,30,32,49,33,32,11,12,1,11,11,11,11,32,196,8,65,61,70,4,64,32,59,65,0,70,33,154,2,32,62,65,0,70,33,155,2,32,154,2,32,155,2,113,33,177,8,32,177,8,4,64,65,2,32,29,116,33,156,2,65,0,32,156,2,107,33,157,2,32,156,2,32,157,2,114,33,158,2,32,158,2,32,227,1,113,33,159,2,32,159,2,65,0,70,33,160,2,32,160,2,4,64,32,225,1,33,9,12,6,11,65,0,32,159,2,107,33,161,2,32,159,2,32,161,2,113,33,162,2,32,162,2,65,127,106,33,163,2,32,163,2,65,12,118,33,165,2,32,165,2,65,16,113,33,166,2,32,163,2,32,166,2,118,33,167,2,32,167,2,65,5,118,33,168,2,32,168,2,65,8,113,33,169,2,32,169,2,32,166,2,114,33,170,2,32,167,2,32,169,2,118,33,171,2,32,171,2,65,2,118,33,172,2,32,172,2,65,4,113,33,173,2,32,170,2,32,173,2,114,33,174,2,32,171,2,32,173,2,118,33,176,2,32,176,2,65,1,118,33,177,2,32,177,2,65,2,113,33,178,2,32,174,2,32,178,2,114,33,179,2,32,176,2,32,178,2,118,33,180,2,32,180,2,65,1,118,33,181,2,32,181,2,65,1,113,33,182,2,32,179,2,32,182,2,114,33,183,2,32,180,2,32,182,2,118,33,184,2,32,183,2,32,184,2,106,33,185,2,65,240,11,32,185,2,65,2,116,106,33,188,2,32,188,2,40,2,0,33,189,2,65,0,33,63,32,189,2,33,73,5,32,62,33,63,32,59,33,73,11,32,73,65,0,70,33,190,2,32,190,2,4,64,32,63,33,66,32,64,33,70,5,32,63,33,68,32,64,33,72,32,73,33,75,65,193,0,33,196,8,11,11,32,196,8,65,193,0,70,4,64,32,68,33,67,32,72,33,71,32,75,33,74,3,64,2,64,32,74,65,4,106,33,191,2,32,191,2,40,2,0,33,192,2,32,192,2,65,120,113,33,193,2,32,193,2,32,225,1,107,33,194,2,32,194,2,32,71,73,33,195,2,32,195,2,4,127,32,194,2,5,32,71,11,33,190,8,32,195,2,4,127,32,74,5,32,67,11,33,192,8,32,74,65,16,106,33,196,2,32,196,2,40,2,0,33,197,2,32,197,2,65,0,70,33,199,2,32,199,2,4,64,32,74,65,20,106,33,200,2,32,200,2,40,2,0,33,201,2,32,201,2,33,203,2,5,32,197,2,33,203,2,11,32,203,2,65,0,70,33,202,2,32,202,2,4,64,32,192,8,33,66,32,190,8,33,70,12,1,5,32,192,8,33,67,32,190,8,33,71,32,203,2,33,74,11,12,1,11,11,11,32,66,65,0,70,33,204,2,32,204,2,4,64,32,225,1,33,9,5,65,200,9,40,2,0,33,205,2,32,205,2,32,225,1,107,33,206,2,32,70,32,206,2,73,33,207,2,32,207,2,4,64,32,66,32,225,1,106,33,208,2,32,208,2,32,66,75,33,210,2,32,210,2,4,64,32,66,65,24,106,33,211,2,32,211,2,40,2,0,33,212,2,32,66,65,12,106,33,213,2,32,213,2,40,2,0,33,214,2,32,214,2,32,66,70,33,215,2,2,64,32,215,2,4,64,32,66,65,20,106,33,221,2,32,221,2,40,2,0,33,222,2,32,222,2,65,0,70,33,223,2,32,223,2,4,64,32,66,65,16,106,33,224,2,32,224,2,40,2,0,33,225,2,32,225,2,65,0,70,33,226,2,32,226,2,4,64,65,0,33,65,12,3,5,32,225,2,33,52,32,224,2,33,55,11,5,32,222,2,33,52,32,221,2,33,55,11,32,52,33,50,32,55,33,53,3,64,2,64,32,50,65,20,106,33,227,2,32,227,2,40,2,0,33,228,2,32,228,2,65,0,70,33,229,2,32,229,2,4,64,32,50,65,16,106,33,230,2,32,230,2,40,2,0,33,232,2,32,232,2,65,0,70,33,233,2,32,233,2,4,64,12,2,5,32,232,2,33,51,32,230,2,33,54,11,5,32,228,2,33,51,32,227,2,33,54,11,32,51,33,50,32,54,33,53,12,1,11,11,32,53,65,0,54,2,0,32,50,33,65,5,32,66,65,8,106,33,216,2,32,216,2,40,2,0,33,217,2,32,217,2,65,12,106,33,218,2,32,218,2,32,214,2,54,2,0,32,214,2,65,8,106,33,219,2,32,219,2,32,217,2,54,2,0,32,214,2,33,65,11,11,32,212,2,65,0,70,33,234,2,2,64,32,234,2,4,64,32,227,1,33,198,3,5,32,66,65,28,106,33,235,2,32,235,2,40,2,0,33,236,2,65,240,11,32,236,2,65,2,116,106,33,237,2,32,237,2,40,2,0,33,238,2,32,66,32,238,2,70,33,239,2,32,239,2,4,64,32,237,2,32,65,54,2,0,32,65,65,0,70,33,174,8,32,174,8,4,64,65,1,32,236,2,116,33,240,2,32,240,2,65,127,115,33,241,2,32,227,1,32,241,2,113,33,243,2,65,196,9,32,243,2,54,2,0,32,243,2,33,198,3,12,3,11,5,32,212,2,65,16,106,33,244,2,32,244,2,40,2,0,33,245,2,32,245,2,32,66,70,33,246,2,32,212,2,65,20,106,33,247,2,32,246,2,4,127,32,244,2,5,32,247,2,11,33,90,32,90,32,65,54,2,0,32,65,65,0,70,33,248,2,32,248,2,4,64,32,227,1,33,198,3,12,3,11,11,32,65,65,24,106,33,249,2,32,249,2,32,212,2,54,2,0,32,66,65,16,106,33,250,2,32,250,2,40,2,0,33,251,2,32,251,2,65,0,70,33,252,2,32,252,2,69,4,64,32,65,65,16,106,33,254,2,32,254,2,32,251,2,54,2,0,32,251,2,65,24,106,33,255,2,32,255,2,32,65,54,2,0,11,32,66,65,20,106,33,128,3,32,128,3,40,2,0,33,129,3,32,129,3,65,0,70,33,130,3,32,130,3,4,64,32,227,1,33,198,3,5,32,65,65,20,106,33,131,3,32,131,3,32,129,3,54,2,0,32,129,3,65,24,106,33,132,3,32,132,3,32,65,54,2,0,32,227,1,33,198,3,11,11,11,32,70,65,16,73,33,133,3,2,64,32,133,3,4,64,32,70,32,225,1,106,33,134,3,32,134,3,65,3,114,33,135,3,32,66,65,4,106,33,137,3,32,137,3,32,135,3,54,2,0,32,66,32,134,3,106,33,138,3,32,138,3,65,4,106,33,139,3,32,139,3,40,2,0,33,140,3,32,140,3,65,1,114,33,141,3,32,139,3,32,141,3,54,2,0,5,32,225,1,65,3,114,33,142,3,32,66,65,4,106,33,143,3,32,143,3,32,142,3,54,2,0,32,70,65,1,114,33,144,3,32,208,2,65,4,106,33,145,3,32,145,3,32,144,3,54,2,0,32,208,2,32,70,106,33,146,3,32,146,3,32,70,54,2,0,32,70,65,3,118,33,148,3,32,70,65,128,2,73,33,149,3,32,149,3,4,64,32,148,3,65,1,116,33,150,3,65,232,9,32,150,3,65,2,116,106,33,151,3,65,192,9,40,2,0,33,152,3,65,1,32,148,3,116,33,153,3,32,152,3,32,153,3,113,33,154,3,32,154,3,65,0,70,33,155,3,32,155,3,4,64,32,152,3,32,153,3,114,33,156,3,65,192,9,32,156,3,54,2,0,32,151,3,65,8,106,33,83,32,151,3,33,33,32,83,33,86,5,32,151,3,65,8,106,33,157,3,32,157,3,40,2,0,33,159,3,32,159,3,33,33,32,157,3,33,86,11,32,86,32,208,2,54,2,0,32,33,65,12,106,33,160,3,32,160,3,32,208,2,54,2,0,32,208,2,65,8,106,33,161,3,32,161,3,32,33,54,2,0,32,208,2,65,12,106,33,162,3,32,162,3,32,151,3,54,2,0,12,2,11,32,70,65,8,118,33,163,3,32,163,3,65,0,70,33,164,3,32,164,3,4,64,65,0,33,31,5,32,70,65,255,255,255,7,75,33,165,3,32,165,3,4,64,65,31,33,31,5,32,163,3,65,128,254,63,106,33,166,3,32,166,3,65,16,118,33,167,3,32,167,3,65,8,113,33,168,3,32,163,3,32,168,3,116,33,171,3,32,171,3,65,128,224,31,106,33,172,3,32,172,3,65,16,118,33,173,3,32,173,3,65,4,113,33,174,3,32,174,3,32,168,3,114,33,175,3,32,171,3,32,174,3,116,33,176,3,32,176,3,65,128,128,15,106,33,177,3,32,177,3,65,16,118,33,178,3,32,178,3,65,2,113,33,179,3,32,175,3,32,179,3,114,33,180,3,65,14,32,180,3,107,33,182,3,32,176,3,32,179,3,116,33,183,3,32,183,3,65,15,118,33,184,3,32,182,3,32,184,3,106,33,185,3,32,185,3,65,1,116,33,186,3,32,185,3,65,7,106,33,187,3,32,70,32,187,3,118,33,188,3,32,188,3,65,1,113,33,189,3,32,189,3,32,186,3,114,33,190,3,32,190,3,33,31,11,11,65,240,11,32,31,65,2,116,106,33,191,3,32,208,2,65,28,106,33,193,3,32,193,3,32,31,54,2,0,32,208,2,65,16,106,33,194,3,32,194,3,65,4,106,33,195,3,32,195,3,65,0,54,2,0,32,194,3,65,0,54,2,0,65,1,32,31,116,33,196,3,32,198,3,32,196,3,113,33,197,3,32,197,3,65,0,70,33,199,3,32,199,3,4,64,32,198,3,32,196,3,114,33,200,3,65,196,9,32,200,3,54,2,0,32,191,3,32,208,2,54,2,0,32,208,2,65,24,106,33,201,3,32,201,3,32,191,3,54,2,0,32,208,2,65,12,106,33,202,3,32,202,3,32,208,2,54,2,0,32,208,2,65,8,106,33,204,3,32,204,3,32,208,2,54,2,0,12,2,11,32,191,3,40,2,0,33,205,3,32,205,3,65,4,106,33,206,3,32,206,3,40,2,0,33,207,3,32,207,3,65,120,113,33,208,3,32,208,3,32,70,70,33,209,3,2,64,32,209,3,4,64,32,205,3,33,25,5,32,31,65,31,70,33,210,3,32,31,65,1,118,33,211,3,65,25,32,211,3,107,33,212,3,32,210,3,4,127,65,0,5,32,212,3,11,33,213,3,32,70,32,213,3,116,33,215,3,32,215,3,33,24,32,205,3,33,26,3,64,2,64,32,24,65,31,118,33,222,3,32,26,65,16,106,32,222,3,65,2,116,106,33,223,3,32,223,3,40,2,0,33,218,3,32,218,3,65,0,70,33,224,3,32,224,3,4,64,12,1,11,32,24,65,1,116,33,216,3,32,218,3,65,4,106,33,217,3,32,217,3,40,2,0,33,219,3,32,219,3,65,120,113,33,220,3,32,220,3,32,70,70,33,221,3,32,221,3,4,64,32,218,3,33,25,12,4,5,32,216,3,33,24,32,218,3,33,26,11,12,1,11,11,32,223,3,32,208,2,54,2,0,32,208,2,65,24,106,33,226,3,32,226,3,32,26,54,2,0,32,208,2,65,12,106,33,227,3,32,227,3,32,208,2,54,2,0,32,208,2,65,8,106,33,228,3,32,228,3,32,208,2,54,2,0,12,3,11,11,32,25,65,8,106,33,229,3,32,229,3,40,2,0,33,230,3,32,230,3,65,12,106,33,231,3,32,231,3,32,208,2,54,2,0,32,229,3,32,208,2,54,2,0,32,208,2,65,8,106,33,232,3,32,232,3,32,230,3,54,2,0,32,208,2,65,12,106,33,233,3,32,233,3,32,25,54,2,0,32,208,2,65,24,106,33,234,3,32,234,3,65,0,54,2,0,11,11,32,66,65,8,106,33,235,3,32,235,3,33,1,32,197,8,36,14,32,1,15,5,32,225,1,33,9,11,5,32,225,1,33,9,11,11,11,11,11,11,65,200,9,40,2,0,33,237,3,32,237,3,32,9,73,33,238,3,32,238,3,69,4,64,32,237,3,32,9,107,33,239,3,65,212,9,40,2,0,33,240,3,32,239,3,65,15,75,33,241,3,32,241,3,4,64,32,240,3,32,9,106,33,242,3,65,212,9,32,242,3,54,2,0,65,200,9,32,239,3,54,2,0,32,239,3,65,1,114,33,243,3,32,242,3,65,4,106,33,244,3,32,244,3,32,243,3,54,2,0,32,240,3,32,237,3,106,33,245,3,32,245,3,32,239,3,54,2,0,32,9,65,3,114,33,246,3,32,240,3,65,4,106,33,248,3,32,248,3,32,246,3,54,2,0,5,65,200,9,65,0,54,2,0,65,212,9,65,0,54,2,0,32,237,3,65,3,114,33,249,3,32,240,3,65,4,106,33,250,3,32,250,3,32,249,3,54,2,0,32,240,3,32,237,3,106,33,251,3,32,251,3,65,4,106,33,252,3,32,252,3,40,2,0,33,253,3,32,253,3,65,1,114,33,254,3,32,252,3,32,254,3,54,2,0,11,32,240,3,65,8,106,33,255,3,32,255,3,33,1,32,197,8,36,14,32,1,15,11,65,204,9,40,2,0,33,128,4,32,128,4,32,9,75,33,129,4,32,129,4,4,64,32,128,4,32,9,107,33,131,4,65,204,9,32,131,4,54,2,0,65,216,9,40,2,0,33,132,4,32,132,4,32,9,106,33,133,4,65,216,9,32,133,4,54,2,0,32,131,4,65,1,114,33,134,4,32,133,4,65,4,106,33,135,4,32,135,4,32,134,4,54,2,0,32,9,65,3,114,33,136,4,32,132,4,65,4,106,33,137,4,32,137,4,32,136,4,54,2,0,32,132,4,65,8,106,33,138,4,32,138,4,33,1,32,197,8,36,14,32,1,15,11,65,152,13,40,2,0,33,139,4,32,139,4,65,0,70,33,140,4,32,140,4,4,64,65,160,13,65,128,32,54,2,0,65,156,13,65,128,32,54,2,0,65,164,13,65,127,54,2,0,65,168,13,65,127,54,2,0,65,172,13,65,0,54,2,0,65,252,12,65,0,54,2,0,32,92,33,142,4,32,142,4,65,112,113,33,143,4,32,143,4,65,216,170,213,170,5,115,33,144,4,65,152,13,32,144,4,54,2,0,65,128,32,33,148,4,5,65,160,13,40,2,0,33,82,32,82,33,148,4,11,32,9,65,48,106,33,145,4,32,9,65,47,106,33,146,4,32,148,4,32,146,4,106,33,147,4,65,0,32,148,4,107,33,149,4,32,147,4,32,149,4,113,33,150,4,32,150,4,32,9,75,33,151,4,32,151,4,69,4,64,65,0,33,1,32,197,8,36,14,32,1,15,11,65,248,12,40,2,0,33,154,4,32,154,4,65,0,70,33,155,4,32,155,4,69,4,64,65,240,12,40,2,0,33,156,4,32,156,4,32,150,4,106,33,157,4,32,157,4,32,156,4,77,33,158,4,32,157,4,32,154,4,75,33,159,4,32,158,4,32,159,4,114,33,178,8,32,178,8,4,64,65,0,33,1,32,197,8,36,14,32,1,15,11,11,65,252,12,40,2,0,33,160,4,32,160,4,65,4,113,33,161,4,32,161,4,65,0,70,33,162,4,2,64,32,162,4,4,64,65,216,9,40,2,0,33,163,4,32,163,4,65,0,70,33,165,4,2,64,32,165,4,4,64,65,128,1,33,196,8,5,65,128,13,33,5,3,64,2,64,32,5,40,2,0,33,166,4,32,166,4,32,163,4,75,33,167,4,32,167,4,69,4,64,32,5,65,4,106,33,168,4,32,168,4,40,2,0,33,169,4,32,166,4,32,169,4,106,33,170,4,32,170,4,32,163,4,75,33,171,4,32,171,4,4,64,12,2,11,11,32,5,65,8,106,33,172,4,32,172,4,40,2,0,33,173,4,32,173,4,65,0,70,33,174,4,32,174,4,4,64,65,128,1,33,196,8,12,4,5,32,173,4,33,5,11,12,1,11,11,32,147,4,32,128,4,107,33,200,4,32,200,4,32,149,4,113,33,201,4,32,201,4,65,255,255,255,255,7,73,33,202,4,32,202,4,4,64,32,201,4,16,29,33,203,4,32,5,40,2,0,33,204,4,32,168,4,40,2,0,33,205,4,32,204,4,32,205,4,106,33,206,4,32,203,4,32,206,4,70,33,207,4,32,207,4,4,64,32,203,4,65,127,70,33,209,4,32,209,4,4,64,32,201,4,33,56,5,32,201,4,33,76,32,203,4,33,77,12,6,11,5,32,203,4,33,57,32,201,4,33,58,65,136,1,33,196,8,11,5,65,0,33,56,11,11,11,2,64,32,196,8,65,128,1,70,4,64,65,0,16,29,33,176,4,32,176,4,65,127,70,33,177,4,32,177,4,4,64,65,0,33,56,5,32,176,4,33,178,4,65,156,13,40,2,0,33,179,4,32,179,4,65,127,106,33,180,4,32,180,4,32,178,4,113,33,181,4,32,181,4,65,0,70,33,182,4,32,180,4,32,178,4,106,33,183,4,65,0,32,179,4,107,33,184,4,32,183,4,32,184,4,113,33,185,4,32,185,4,32,178,4,107,33,187,4,32,182,4,4,127,65,0,5,32,187,4,11,33,188,4,32,188,4,32,150,4,106,33,194,8,65,240,12,40,2,0,33,189,4,32,194,8,32,189,4,106,33,190,4,32,194,8,32,9,75,33,191,4,32,194,8,65,255,255,255,255,7,73,33,192,4,32,191,4,32,192,4,113,33,176,8,32,176,8,4,64,65,248,12,40,2,0,33,193,4,32,193,4,65,0,70,33,194,4,32,194,4,69,4,64,32,190,4,32,189,4,77,33,195,4,32,190,4,32,193,4,75,33,196,4,32,195,4,32,196,4,114,33,181,8,32,181,8,4,64,65,0,33,56,12,5,11,11,32,194,8,16,29,33,198,4,32,198,4,32,176,4,70,33,199,4,32,199,4,4,64,32,194,8,33,76,32,176,4,33,77,12,6,5,32,198,4,33,57,32,194,8,33,58,65,136,1,33,196,8,11,5,65,0,33,56,11,11,11,11,2,64,32,196,8,65,136,1,70,4,64,65,0,32,58,107,33,210,4,32,57,65,127,71,33,211,4,32,58,65,255,255,255,255,7,73,33,212,4,32,212,4,32,211,4,113,33,186,8,32,145,4,32,58,75,33,213,4,32,213,4,32,186,8,113,33,185,8,32,185,8,69,4,64,32,57,65,127,70,33,224,4,32,224,4,4,64,65,0,33,56,12,3,5,32,58,33,76,32,57,33,77,12,5,11,0,11,65,160,13,40,2,0,33,214,4,32,146,4,32,58,107,33,215,4,32,215,4,32,214,4,106,33,216,4,65,0,32,214,4,107,33,217,4,32,216,4,32,217,4,113,33,218,4,32,218,4,65,255,255,255,255,7,73,33,220,4,32,220,4,69,4,64,32,58,33,76,32,57,33,77,12,4,11,32,218,4,16,29,33,221,4,32,221,4,65,127,70,33,222,4,32,222,4,4,64,32,210,4,16,29,26,65,0,33,56,12,2,5,32,218,4,32,58,106,33,223,4,32,223,4,33,76,32,57,33,77,12,4,11,0,11,11,65,252,12,40,2,0,33,225,4,32,225,4,65,4,114,33,226,4,65,252,12,32,226,4,54,2,0,32,56,33,69,65,143,1,33,196,8,5,65,0,33,69,65,143,1,33,196,8,11,11,32,196,8,65,143,1,70,4,64,32,150,4,65,255,255,255,255,7,73,33,227,4,32,227,4,69,4,64,65,0,33,1,32,197,8,36,14,32,1,15,11,32,150,4,16,29,33,228,4,65,0,16,29,33,229,4,32,228,4,65,127,71,33,231,4,32,229,4,65,127,71,33,232,4,32,231,4,32,232,4,113,33,182,8,32,228,4,32,229,4,73,33,233,4,32,233,4,32,182,8,113,33,187,8,32,229,4,33,234,4,32,228,4,33,235,4,32,234,4,32,235,4,107,33,236,4,32,9,65,40,106,33,237,4,32,236,4,32,237,4,75,33,238,4,32,238,4,4,127,32,236,4,5,32,69,11,33,195,8,32,187,8,65,1,115,33,188,8,32,228,4,65,127,70,33,239,4,32,238,4,65,1,115,33,175,8,32,239,4,32,175,8,114,33,240,4,32,240,4,32,188,8,114,33,183,8,32,183,8,4,64,65,0,33,1,32,197,8,36,14,32,1,15,5,32,195,8,33,76,32,228,4,33,77,11,11,65,240,12,40,2,0,33,242,4,32,242,4,32,76,106,33,243,4,65,240,12,32,243,4,54,2,0,65,244,12,40,2,0,33,244,4,32,243,4,32,244,4,75,33,245,4,32,245,4,4,64,65,244,12,32,243,4,54,2,0,11,65,216,9,40,2,0,33,246,4,32,246,4,65,0,70,33,247,4,2,64,32,247,4,4,64,65,208,9,40,2,0,33,248,4,32,248,4,65,0,70,33,249,4,32,77,32,248,4,73,33,250,4,32,249,4,32,250,4,114,33,180,8,32,180,8,4,64,65,208,9,32,77,54,2,0,11,65,128,13,32,77,54,2,0,65,132,13,32,76,54,2,0,65,140,13,65,0,54,2,0,65,152,13,40,2,0,33,251,4,65,228,9,32,251,4,54,2,0,65,224,9,65,127,54,2,0,65,244,9,65,232,9,54,2,0,65,240,9,65,232,9,54,2,0,65,252,9,65,240,9,54,2,0,65,248,9,65,240,9,54,2,0,65,132,10,65,248,9,54,2,0,65,128,10,65,248,9,54,2,0,65,140,10,65,128,10,54,2,0,65,136,10,65,128,10,54,2,0,65,148,10,65,136,10,54,2,0,65,144,10,65,136,10,54,2,0,65,156,10,65,144,10,54,2,0,65,152,10,65,144,10,54,2,0,65,164,10,65,152,10,54,2,0,65,160,10,65,152,10,54,2,0,65,172,10,65,160,10,54,2,0,65,168,10,65,160,10,54,2,0,65,180,10,65,168,10,54,2,0,65,176,10,65,168,10,54,2,0,65,188,10,65,176,10,54,2,0,65,184,10,65,176,10,54,2,0,65,196,10,65,184,10,54,2,0,65,192,10,65,184,10,54,2,0,65,204,10,65,192,10,54,2,0,65,200,10,65,192,10,54,2,0,65,212,10,65,200,10,54,2,0,65,208,10,65,200,10,54,2,0,65,220,10,65,208,10,54,2,0,65,216,10,65,208,10,54,2,0,65,228,10,65,216,10,54,2,0,65,224,10,65,216,10,54,2,0,65,236,10,65,224,10,54,2,0,65,232,10,65,224,10,54,2,0,65,244,10,65,232,10,54,2,0,65,240,10,65,232,10,54,2,0,65,252,10,65,240,10,54,2,0,65,248,10,65,240,10,54,2,0,65,132,11,65,248,10,54,2,0,65,128,11,65,248,10,54,2,0,65,140,11,65,128,11,54,2,0,65,136,11,65,128,11,54,2,0,65,148,11,65,136,11,54,2,0,65,144,11,65,136,11,54,2,0,65,156,11,65,144,11,54,2,0,65,152,11,65,144,11,54,2,0,65,164,11,65,152,11,54,2,0,65,160,11,65,152,11,54,2,0,65,172,11,65,160,11,54,2,0,65,168,11,65,160,11,54,2,0,65,180,11,65,168,11,54,2,0,65,176,11,65,168,11,54,2,0,65,188,11,65,176,11,54,2,0,65,184,11,65,176,11,54,2,0,65,196,11,65,184,11,54,2,0,65,192,11,65,184,11,54,2,0,65,204,11,65,192,11,54,2,0,65,200,11,65,192,11,54,2,0,65,212,11,65,200,11,54,2,0,65,208,11,65,200,11,54,2,0,65,220,11,65,208,11,54,2,0,65,216,11,65,208,11,54,2,0,65,228,11,65,216,11,54,2,0,65,224,11,65,216,11,54,2,0,65,236,11,65,224,11,54,2,0,65,232,11,65,224,11,54,2,0,32,76,65,88,106,33,253,4,32,77,65,8,106,33,254,4,32,254,4,33,255,4,32,255,4,65,7,113,33,128,5,32,128,5,65,0,70,33,129,5,65,0,32,255,4,107,33,130,5,32,130,5,65,7,113,33,131,5,32,129,5,4,127,65,0,5,32,131,5,11,33,132,5,32,77,32,132,5,106,33,133,5,32,253,4,32,132,5,107,33,134,5,65,216,9,32,133,5,54,2,0,65,204,9,32,134,5,54,2,0,32,134,5,65,1,114,33,137,5,32,133,5,65,4,106,33,138,5,32,138,5,32,137,5,54,2,0,32,77,32,253,4,106,33,139,5,32,139,5,65,4,106,33,140,5,32,140,5,65,40,54,2,0,65,168,13,40,2,0,33,141,5,65,220,9,32,141,5,54,2,0,5,65,128,13,33,16,3,64,2,64,32,16,40,2,0,33,142,5,32,16,65,4,106,33,143,5,32,143,5,40,2,0,33,144,5,32,142,5,32,144,5,106,33,145,5,32,77,32,145,5,70,33,146,5,32,146,5,4,64,65,154,1,33,196,8,12,1,11,32,16,65,8,106,33,148,5,32,148,5,40,2,0,33,149,5,32,149,5,65,0,70,33,150,5,32,150,5,4,64,12,1,5,32,149,5,33,16,11,12,1,11,11,32,196,8,65,154,1,70,4,64,32,16,65,12,106,33,151,5,32,151,5,40,2,0,33,152,5,32,152,5,65,8,113,33,153,5,32,153,5,65,0,70,33,154,5,32,154,5,4,64,32,142,5,32,246,4,77,33,155,5,32,77,32,246,4,75,33,156,5,32,156,5,32,155,5,113,33,184,8,32,184,8,4,64,32,144,5,32,76,106,33,157,5,32,143,5,32,157,5,54,2,0,65,204,9,40,2,0,33,159,5,32,159,5,32,76,106,33,160,5,32,246,4,65,8,106,33,161,5,32,161,5,33,162,5,32,162,5,65,7,113,33,163,5,32,163,5,65,0,70,33,164,5,65,0,32,162,5,107,33,165,5,32,165,5,65,7,113,33,166,5,32,164,5,4,127,65,0,5,32,166,5,11,33,167,5,32,246,4,32,167,5,106,33,168,5,32,160,5,32,167,5,107,33,170,5,65,216,9,32,168,5,54,2,0,65,204,9,32,170,5,54,2,0,32,170,5,65,1,114,33,171,5,32,168,5,65,4,106,33,172,5,32,172,5,32,171,5,54,2,0,32,246,4,32,160,5,106,33,173,5,32,173,5,65,4,106,33,174,5,32,174,5,65,40,54,2,0,65,168,13,40,2,0,33,175,5,65,220,9,32,175,5,54,2,0,12,4,11,11,11,65,208,9,40,2,0,33,176,5,32,77,32,176,5,73,33,177,5,32,177,5,4,64,65,208,9,32,77,54,2,0,11,32,77,32,76,106,33,178,5,65,128,13,33,40,3,64,2,64,32,40,40,2,0,33,179,5,32,179,5,32,178,5,70,33,181,5,32,181,5,4,64,65,162,1,33,196,8,12,1,11,32,40,65,8,106,33,182,5,32,182,5,40,2,0,33,183,5,32,183,5,65,0,70,33,184,5,32,184,5,4,64,12,1,5,32,183,5,33,40,11,12,1,11,11,32,196,8,65,162,1,70,4,64,32,40,65,12,106,33,185,5,32,185,5,40,2,0,33,186,5,32,186,5,65,8,113,33,187,5,32,187,5,65,0,70,33,188,5,32,188,5,4,64,32,40,32,77,54,2,0,32,40,65,4,106,33,189,5,32,189,5,40,2,0,33,190,5,32,190,5,32,76,106,33,192,5,32,189,5,32,192,5,54,2,0,32,77,65,8,106,33,193,5,32,193,5,33,194,5,32,194,5,65,7,113,33,195,5,32,195,5,65,0,70,33,196,5,65,0,32,194,5,107,33,197,5,32,197,5,65,7,113,33,198,5,32,196,5,4,127,65,0,5,32,198,5,11,33,199,5,32,77,32,199,5,106,33,200,5,32,178,5,65,8,106,33,201,5,32,201,5,33,203,5,32,203,5,65,7,113,33,204,5,32,204,5,65,0,70,33,205,5,65,0,32,203,5,107,33,206,5,32,206,5,65,7,113,33,207,5,32,205,5,4,127,65,0,5,32,207,5,11,33,208,5,32,178,5,32,208,5,106,33,209,5,32,209,5,33,210,5,32,200,5,33,211,5,32,210,5,32,211,5,107,33,212,5,32,200,5,32,9,106,33,214,5,32,212,5,32,9,107,33,215,5,32,9,65,3,114,33,216,5,32,200,5,65,4,106,33,217,5,32,217,5,32,216,5,54,2,0,32,246,4,32,209,5,70,33,218,5,2,64,32,218,5,4,64,65,204,9,40,2,0,33,219,5,32,219,5,32,215,5,106,33,220,5,65,204,9,32,220,5,54,2,0,65,216,9,32,214,5,54,2,0,32,220,5,65,1,114,33,221,5,32,214,5,65,4,106,33,222,5,32,222,5,32,221,5,54,2,0,5,65,212,9,40,2,0,33,223,5,32,223,5,32,209,5,70,33,225,5,32,225,5,4,64,65,200,9,40,2,0,33,226,5,32,226,5,32,215,5,106,33,227,5,65,200,9,32,227,5,54,2,0,65,212,9,32,214,5,54,2,0,32,227,5,65,1,114,33,228,5,32,214,5,65,4,106,33,229,5,32,229,5,32,228,5,54,2,0,32,214,5,32,227,5,106,33,230,5,32,230,5,32,227,5,54,2,0,12,2,11,32,209,5,65,4,106,33,231,5,32,231,5,40,2,0,33,232,5,32,232,5,65,3,113,33,233,5,32,233,5,65,1,70,33,234,5,32,234,5,4,64,32,232,5,65,120,113,33,236,5,32,232,5,65,3,118,33,237,5,32,232,5,65,128,2,73,33,238,5,2,64,32,238,5,4,64,32,209,5,65,8,106,33,239,5,32,239,5,40,2,0,33,240,5,32,209,5,65,12,106,33,241,5,32,241,5,40,2,0,33,242,5,32,242,5,32,240,5,70,33,243,5,32,243,5,4,64,65,1,32,237,5,116,33,244,5,32,244,5,65,127,115,33,245,5,65,192,9,40,2,0,33,248,5,32,248,5,32,245,5,113,33,249,5,65,192,9,32,249,5,54,2,0,12,2,5,32,240,5,65,12,106,33,250,5,32,250,5,32,242,5,54,2,0,32,242,5,65,8,106,33,251,5,32,251,5,32,240,5,54,2,0,12,2,11,0,5,32,209,5,65,24,106,33,252,5,32,252,5,40,2,0,33,253,5,32,209,5,65,12,106,33,254,5,32,254,5,40,2,0,33,255,5,32,255,5,32,209,5,70,33,128,6,2,64,32,128,6,4,64,32,209,5,65,16,106,33,134,6,32,134,6,65,4,106,33,135,6,32,135,6,40,2,0,33,136,6,32,136,6,65,0,70,33,137,6,32,137,6,4,64,32,134,6,40,2,0,33,138,6,32,138,6,65,0,70,33,139,6,32,139,6,4,64,65,0,33,61,12,3,5,32,138,6,33,43,32,134,6,33,46,11,5,32,136,6,33,43,32,135,6,33,46,11,32,43,33,41,32,46,33,44,3,64,2,64,32,41,65,20,106,33,140,6,32,140,6,40,2,0,33,142,6,32,142,6,65,0,70,33,143,6,32,143,6,4,64,32,41,65,16,106,33,144,6,32,144,6,40,2,0,33,145,6,32,145,6,65,0,70,33,146,6,32,146,6,4,64,12,2,5,32,145,6,33,42,32,144,6,33,45,11,5,32,142,6,33,42,32,140,6,33,45,11,32,42,33,41,32,45,33,44,12,1,11,11,32,44,65,0,54,2,0,32,41,33,61,5,32,209,5,65,8,106,33,129,6,32,129,6,40,2,0,33,131,6,32,131,6,65,12,106,33,132,6,32,132,6,32,255,5,54,2,0,32,255,5,65,8,106,33,133,6,32,133,6,32,131,6,54,2,0,32,255,5,33,61,11,11,32,253,5,65,0,70,33,147,6,32,147,6,4,64,12,2,11,32,209,5,65,28,106,33,148,6,32,148,6,40,2,0,33,149,6,65,240,11,32,149,6,65,2,116,106,33,150,6,32,150,6,40,2,0,33,151,6,32,151,6,32,209,5,70,33,153,6,2,64,32,153,6,4,64,32,150,6,32,61,54,2,0,32,61,65,0,70,33,173,8,32,173,8,69,4,64,12,2,11,65,1,32,149,6,116,33,154,6,32,154,6,65,127,115,33,155,6,65,196,9,40,2,0,33,156,6,32,156,6,32,155,6,113,33,157,6,65,196,9,32,157,6,54,2,0,12,3,5,32,253,5,65,16,106,33,158,6,32,158,6,40,2,0,33,159,6,32,159,6,32,209,5,70,33,160,6,32,253,5,65,20,106,33,161,6,32,160,6,4,127,32,158,6,5,32,161,6,11,33,91,32,91,32,61,54,2,0,32,61,65,0,70,33,162,6,32,162,6,4,64,12,4,11,11,11,32,61,65,24,106,33,164,6,32,164,6,32,253,5,54,2,0,32,209,5,65,16,106,33,165,6,32,165,6,40,2,0,33,166,6,32,166,6,65,0,70,33,167,6,32,167,6,69,4,64,32,61,65,16,106,33,168,6,32,168,6,32,166,6,54,2,0,32,166,6,65,24,106,33,169,6,32,169,6,32,61,54,2,0,11,32,165,6,65,4,106,33,170,6,32,170,6,40,2,0,33,171,6,32,171,6,65,0,70,33,172,6,32,172,6,4,64,12,2,11,32,61,65,20,106,33,173,6,32,173,6,32,171,6,54,2,0,32,171,6,65,24,106,33,175,6,32,175,6,32,61,54,2,0,11,11,32,209,5,32,236,5,106,33,176,6,32,236,5,32,215,5,106,33,177,6,32,176,6,33,3,32,177,6,33,17,5,32,209,5,33,3,32,215,5,33,17,11,32,3,65,4,106,33,178,6,32,178,6,40,2,0,33,179,6,32,179,6,65,126,113,33,180,6,32,178,6,32,180,6,54,2,0,32,17,65,1,114,33,181,6,32,214,5,65,4,106,33,182,6,32,182,6,32,181,6,54,2,0,32,214,5,32,17,106,33,183,6,32,183,6,32,17,54,2,0,32,17,65,3,118,33,184,6,32,17,65,128,2,73,33,186,6,32,186,6,4,64,32,184,6,65,1,116,33,187,6,65,232,9,32,187,6,65,2,116,106,33,188,6,65,192,9,40,2,0,33,189,6,65,1,32,184,6,116,33,190,6,32,189,6,32,190,6,113,33,191,6,32,191,6,65,0,70,33,192,6,32,192,6,4,64,32,189,6,32,190,6,114,33,193,6,65,192,9,32,193,6,54,2,0,32,188,6,65,8,106,33,81,32,188,6,33,21,32,81,33,85,5,32,188,6,65,8,106,33,194,6,32,194,6,40,2,0,33,195,6,32,195,6,33,21,32,194,6,33,85,11,32,85,32,214,5,54,2,0,32,21,65,12,106,33,197,6,32,197,6,32,214,5,54,2,0,32,214,5,65,8,106,33,198,6,32,198,6,32,21,54,2,0,32,214,5,65,12,106,33,199,6,32,199,6,32,188,6,54,2,0,12,2,11,32,17,65,8,118,33,200,6,32,200,6,65,0,70,33,201,6,2,64,32,201,6,4,64,65,0,33,22,5,32,17,65,255,255,255,7,75,33,202,6,32,202,6,4,64,65,31,33,22,12,2,11,32,200,6,65,128,254,63,106,33,203,6,32,203,6,65,16,118,33,204,6,32,204,6,65,8,113,33,205,6,32,200,6,32,205,6,116,33,206,6,32,206,6,65,128,224,31,106,33,208,6,32,208,6,65,16,118,33,209,6,32,209,6,65,4,113,33,210,6,32,210,6,32,205,6,114,33,211,6,32,206,6,32,210,6,116,33,212,6,32,212,6,65,128,128,15,106,33,213,6,32,213,6,65,16,118,33,214,6,32,214,6,65,2,113,33,215,6,32,211,6,32,215,6,114,33,216,6,65,14,32,216,6,107,33,217,6,32,212,6,32,215,6,116,33,219,6,32,219,6,65,15,118,33,220,6,32,217,6,32,220,6,106,33,221,6,32,221,6,65,1,116,33,222,6,32,221,6,65,7,106,33,223,6,32,17,32,223,6,118,33,224,6,32,224,6,65,1,113,33,225,6,32,225,6,32,222,6,114,33,226,6,32,226,6,33,22,11,11,65,240,11,32,22,65,2,116,106,33,227,6,32,214,5,65,28,106,33,228,6,32,228,6,32,22,54,2,0,32,214,5,65,16,106,33,231,6,32,231,6,65,4,106,33,232,6,32,232,6,65,0,54,2,0,32,231,6,65,0,54,2,0,65,196,9,40,2,0,33,233,6,65,1,32,22,116,33,234,6,32,233,6,32,234,6,113,33,235,6,32,235,6,65,0,70,33,236,6,32,236,6,4,64,32,233,6,32,234,6,114,33,237,6,65,196,9,32,237,6,54,2,0,32,227,6,32,214,5,54,2,0,32,214,5,65,24,106,33,238,6,32,238,6,32,227,6,54,2,0,32,214,5,65,12,106,33,239,6,32,239,6,32,214,5,54,2,0,32,214,5,65,8,106,33,240,6,32,240,6,32,214,5,54,2,0,12,2,11,32,227,6,40,2,0,33,242,6,32,242,6,65,4,106,33,243,6,32,243,6,40,2,0,33,244,6,32,244,6,65,120,113,33,245,6,32,245,6,32,17,70,33,246,6,2,64,32,246,6,4,64,32,242,6,33,19,5,32,22,65,31,70,33,247,6,32,22,65,1,118,33,248,6,65,25,32,248,6,107,33,249,6,32,247,6,4,127,65,0,5,32,249,6,11,33,250,6,32,17,32,250,6,116,33,251,6,32,251,6,33,18,32,242,6,33,20,3,64,2,64,32,18,65,31,118,33,131,7,32,20,65,16,106,32,131,7,65,2,116,106,33,132,7,32,132,7,40,2,0,33,255,6,32,255,6,65,0,70,33,133,7,32,133,7,4,64,12,1,11,32,18,65,1,116,33,253,6,32,255,6,65,4,106,33,254,6,32,254,6,40,2,0,33,128,7,32,128,7,65,120,113,33,129,7,32,129,7,32,17,70,33,130,7,32,130,7,4,64,32,255,6,33,19,12,4,5,32,253,6,33,18,32,255,6,33,20,11,12,1,11,11,32,132,7,32,214,5,54,2,0,32,214,5,65,24,106,33,134,7,32,134,7,32,20,54,2,0,32,214,5,65,12,106,33,136,7,32,136,7,32,214,5,54,2,0,32,214,5,65,8,106,33,137,7,32,137,7,32,214,5,54,2,0,12,3,11,11,32,19,65,8,106,33,138,7,32,138,7,40,2,0,33,139,7,32,139,7,65,12,106,33,140,7,32,140,7,32,214,5,54,2,0,32,138,7,32,214,5,54,2,0,32,214,5,65,8,106,33,141,7,32,141,7,32,139,7,54,2,0,32,214,5,65,12,106,33,142,7,32,142,7,32,19,54,2,0,32,214,5,65,24,106,33,143,7,32,143,7,65,0,54,2,0,11,11,32,200,5,65,8,106,33,158,8,32,158,8,33,1,32,197,8,36,14,32,1,15,11,11,65,128,13,33,4,3,64,2,64,32,4,40,2,0,33,144,7,32,144,7,32,246,4,75,33,145,7,32,145,7,69,4,64,32,4,65,4,106,33,147,7,32,147,7,40,2,0,33,148,7,32,144,7,32,148,7,106,33,149,7,32,149,7,32,246,4,75,33,150,7,32,150,7,4,64,12,2,11,11,32,4,65,8,106,33,151,7,32,151,7,40,2,0,33,152,7,32,152,7,33,4,12,1,11,11,32,149,7,65,81,106,33,153,7,32,153,7,65,8,106,33,154,7,32,154,7,33,155,7,32,155,7,65,7,113,33,156,7,32,156,7,65,0,70,33,158,7,65,0,32,155,7,107,33,159,7,32,159,7,65,7,113,33,160,7,32,158,7,4,127,65,0,5,32,160,7,11,33,161,7,32,153,7,32,161,7,106,33,162,7,32,246,4,65,16,106,33,163,7,32,162,7,32,163,7,73,33,164,7,32,164,7,4,127,32,246,4,5,32,162,7,11,33,165,7,32,165,7,65,8,106,33,166,7,32,165,7,65,24,106,33,167,7,32,76,65,88,106,33,169,7,32,77,65,8,106,33,170,7,32,170,7,33,171,7,32,171,7,65,7,113,33,172,7,32,172,7,65,0,70,33,173,7,65,0,32,171,7,107,33,174,7,32,174,7,65,7,113,33,175,7,32,173,7,4,127,65,0,5,32,175,7,11,33,176,7,32,77,32,176,7,106,33,177,7,32,169,7,32,176,7,107,33,178,7,65,216,9,32,177,7,54,2,0,65,204,9,32,178,7,54,2,0,32,178,7,65,1,114,33,180,7,32,177,7,65,4,106,33,181,7,32,181,7,32,180,7,54,2,0,32,77,32,169,7,106,33,182,7,32,182,7,65,4,106,33,183,7,32,183,7,65,40,54,2,0,65,168,13,40,2,0,33,184,7,65,220,9,32,184,7,54,2,0,32,165,7,65,4,106,33,185,7,32,185,7,65,27,54,2,0,32,166,7,65,128,13,41,2,0,55,2,0,32,166,7,65,8,106,65,128,13,65,8,106,41,2,0,55,2,0,65,128,13,32,77,54,2,0,65,132,13,32,76,54,2,0,65,140,13,65,0,54,2,0,65,136,13,32,166,7,54,2,0,32,167,7,33,187,7,3,64,2,64,32,187,7,65,4,106,33,186,7,32,186,7,65,7,54,2,0,32,187,7,65,8,106,33,188,7,32,188,7,32,149,7,73,33,189,7,32,189,7,4,64,32,186,7,33,187,7,5,12,1,11,12,1,11,11,32,165,7,32,246,4,70,33,191,7,32,191,7,69,4,64,32,165,7,33,192,7,32,246,4,33,193,7,32,192,7,32,193,7,107,33,194,7,32,185,7,40,2,0,33,195,7,32,195,7,65,126,113,33,196,7,32,185,7,32,196,7,54,2,0,32,194,7,65,1,114,33,197,7,32,246,4,65,4,106,33,198,7,32,198,7,32,197,7,54,2,0,32,165,7,32,194,7,54,2,0,32,194,7,65,3,118,33,199,7,32,194,7,65,128,2,73,33,200,7,32,200,7,4,64,32,199,7,65,1,116,33,202,7,65,232,9,32,202,7,65,2,116,106,33,203,7,65,192,9,40,2,0,33,204,7,65,1,32,199,7,116,33,205,7,32,204,7,32,205,7,113,33,206,7,32,206,7,65,0,70,33,207,7,32,207,7,4,64,32,204,7,32,205,7,114,33,208,7,65,192,9,32,208,7,54,2,0,32,203,7,65,8,106,33,80,32,203,7,33,14,32,80,33,84,5,32,203,7,65,8,106,33,209,7,32,209,7,40,2,0,33,210,7,32,210,7,33,14,32,209,7,33,84,11,32,84,32,246,4,54,2,0,32,14,65,12,106,33,211,7,32,211,7,32,246,4,54,2,0,32,246,4,65,8,106,33,214,7,32,214,7,32,14,54,2,0,32,246,4,65,12,106,33,215,7,32,215,7,32,203,7,54,2,0,12,3,11,32,194,7,65,8,118,33,216,7,32,216,7,65,0,70,33,217,7,32,217,7,4,64,65,0,33,15,5,32,194,7,65,255,255,255,7,75,33,218,7,32,218,7,4,64,65,31,33,15,5,32,216,7,65,128,254,63,106,33,219,7,32,219,7,65,16,118,33,220,7,32,220,7,65,8,113,33,221,7,32,216,7,32,221,7,116,33,222,7,32,222,7,65,128,224,31,106,33,223,7,32,223,7,65,16,118,33,225,7,32,225,7,65,4,113,33,226,7,32,226,7,32,221,7,114,33,227,7,32,222,7,32,226,7,116,33,228,7,32,228,7,65,128,128,15,106,33,229,7,32,229,7,65,16,118,33,230,7,32,230,7,65,2,113,33,231,7,32,227,7,32,231,7,114,33,232,7,65,14,32,232,7,107,33,233,7,32,228,7,32,231,7,116,33,234,7,32,234,7,65,15,118,33,236,7,32,233,7,32,236,7,106,33,237,7,32,237,7,65,1,116,33,238,7,32,237,7,65,7,106,33,239,7,32,194,7,32,239,7,118,33,240,7,32,240,7,65,1,113,33,241,7,32,241,7,32,238,7,114,33,242,7,32,242,7,33,15,11,11,65,240,11,32,15,65,2,116,106,33,243,7,32,246,4,65,28,106,33,244,7,32,244,7,32,15,54,2,0,32,246,4,65,20,106,33,245,7,32,245,7,65,0,54,2,0,32,163,7,65,0,54,2,0,65,196,9,40,2,0,33,247,7,65,1,32,15,116,33,248,7,32,247,7,32,248,7,113,33,249,7,32,249,7,65,0,70,33,250,7,32,250,7,4,64,32,247,7,32,248,7,114,33,251,7,65,196,9,32,251,7,54,2,0,32,243,7,32,246,4,54,2,0,32,246,4,65,24,106,33,252,7,32,252,7,32,243,7,54,2,0,32,246,4,65,12,106,33,253,7,32,253,7,32,246,4,54,2,0,32,246,4,65,8,106,33,254,7,32,254,7,32,246,4,54,2,0,12,3,11,32,243,7,40,2,0,33,255,7,32,255,7,65,4,106,33,128,8,32,128,8,40,2,0,33,130,8,32,130,8,65,120,113,33,131,8,32,131,8,32,194,7,70,33,132,8,2,64,32,132,8,4,64,32,255,7,33,12,5,32,15,65,31,70,33,133,8,32,15,65,1,118,33,134,8,65,25,32,134,8,107,33,135,8,32,133,8,4,127,65,0,5,32,135,8,11,33,136,8,32,194,7,32,136,8,116,33,137,8,32,137,8,33,11,32,255,7,33,13,3,64,2,64,32,11,65,31,118,33,145,8,32,13,65,16,106,32,145,8,65,2,116,106,33,146,8,32,146,8,40,2,0,33,141,8,32,141,8,65,0,70,33,147,8,32,147,8,4,64,12,1,11,32,11,65,1,116,33,138,8,32,141,8,65,4,106,33,139,8,32,139,8,40,2,0,33,142,8,32,142,8,65,120,113,33,143,8,32,143,8,32,194,7,70,33,144,8,32,144,8,4,64,32,141,8,33,12,12,4,5,32,138,8,33,11,32,141,8,33,13,11,12,1,11,11,32,146,8,32,246,4,54,2,0,32,246,4,65,24,106,33,148,8,32,148,8,32,13,54,2,0,32,246,4,65,12,106,33,149,8,32,149,8,32,246,4,54,2,0,32,246,4,65,8,106,33,150,8,32,150,8,32,246,4,54,2,0,12,4,11,11,32,12,65,8,106,33,152,8,32,152,8,40,2,0,33,153,8,32,153,8,65,12,106,33,154,8,32,154,8,32,246,4,54,2,0,32,152,8,32,246,4,54,2,0,32,246,4,65,8,106,33,155,8,32,155,8,32,153,8,54,2,0,32,246,4,65,12,106,33,156,8,32,156,8,32,12,54,2,0,32,246,4,65,24,106,33,157,8,32,157,8,65,0,54,2,0,11,11,11,65,204,9,40,2,0,33,159,8,32,159,8,32,9,75,33,160,8,32,160,8,69,4,64,65,0,33,1,32,197,8,36,14,32,1,15,11,32,159,8,32,9,107,33,161,8,65,204,9,32,161,8,54,2,0,65,216,9,40,2,0,33,163,8,32,163,8,32,9,106,33,164,8,65,216,9,32,164,8,54,2,0,32,161,8,65,1,114,33,165,8,32,164,8,65,4,106,33,166,8,32,166,8,32,165,8,54,2,0,32,9,65,3,114,33,167,8,32,163,8,65,4,106,33,168,8,32,168,8,32,167,8,54,2,0,32,163,8,65,8,106,33,169,8,32,169,8,33,1,32,197,8,36,14,32,1,15,11,246,27,1,168,2,127,35,14,33,168,2,32,0,65,0,70,33,29,32,29,4,64,15,11,32,0,65,120,106,33,140,1,65,208,9,40,2,0,33,216,1,32,0,65,124,106,33,227,1,32,227,1,40,2,0,33,238,1,32,238,1,65,120,113,33,249,1,32,140,1,32,249,1,106,33,132,2,32,238,1,65,1,113,33,143,2,32,143,2,65,0,70,33,154,2,2,64,32,154,2,4,64,32,140,1,40,2,0,33,30,32,238,1,65,3,113,33,41,32,41,65,0,70,33,52,32,52,4,64,15,11,65,0,32,30,107,33,63,32,140,1,32,63,106,33,74,32,30,32,249,1,106,33,85,32,74,32,216,1,73,33,96,32,96,4,64,15,11,65,212,9,40,2,0,33,107,32,107,32,74,70,33,118,32,118,4,64,32,132,2,65,4,106,33,142,2,32,142,2,40,2,0,33,144,2,32,144,2,65,3,113,33,145,2,32,145,2,65,3,70,33,146,2,32,146,2,69,4,64,32,74,33,8,32,85,33,9,32,74,33,152,2,12,3,11,32,74,32,85,106,33,147,2,32,74,65,4,106,33,148,2,32,85,65,1,114,33,149,2,32,144,2,65,126,113,33,150,2,65,200,9,32,85,54,2,0,32,142,2,32,150,2,54,2,0,32,148,2,32,149,2,54,2,0,32,147,2,32,85,54,2,0,15,11,32,30,65,3,118,33,129,1,32,30,65,128,2,73,33,141,1,32,141,1,4,64,32,74,65,8,106,33,152,1,32,152,1,40,2,0,33,163,1,32,74,65,12,106,33,174,1,32,174,1,40,2,0,33,185,1,32,185,1,32,163,1,70,33,196,1,32,196,1,4,64,65,1,32,129,1,116,33,207,1,32,207,1,65,127,115,33,213,1,65,192,9,40,2,0,33,214,1,32,214,1,32,213,1,113,33,215,1,65,192,9,32,215,1,54,2,0,32,74,33,8,32,85,33,9,32,74,33,152,2,12,3,5,32,163,1,65,12,106,33,217,1,32,217,1,32,185,1,54,2,0,32,185,1,65,8,106,33,218,1,32,218,1,32,163,1,54,2,0,32,74,33,8,32,85,33,9,32,74,33,152,2,12,3,11,0,11,32,74,65,24,106,33,219,1,32,219,1,40,2,0,33,220,1,32,74,65,12,106,33,221,1,32,221,1,40,2,0,33,222,1,32,222,1,32,74,70,33,223,1,2,64,32,223,1,4,64,32,74,65,16,106,33,229,1,32,229,1,65,4,106,33,230,1,32,230,1,40,2,0,33,231,1,32,231,1,65,0,70,33,232,1,32,232,1,4,64,32,229,1,40,2,0,33,233,1,32,233,1,65,0,70,33,234,1,32,234,1,4,64,65,0,33,23,12,3,5,32,233,1,33,12,32,229,1,33,15,11,5,32,231,1,33,12,32,230,1,33,15,11,32,12,33,10,32,15,33,13,3,64,2,64,32,10,65,20,106,33,235,1,32,235,1,40,2,0,33,236,1,32,236,1,65,0,70,33,237,1,32,237,1,4,64,32,10,65,16,106,33,239,1,32,239,1,40,2,0,33,240,1,32,240,1,65,0,70,33,241,1,32,241,1,4,64,12,2,5,32,240,1,33,11,32,239,1,33,14,11,5,32,236,1,33,11,32,235,1,33,14,11,32,11,33,10,32,14,33,13,12,1,11,11,32,13,65,0,54,2,0,32,10,33,23,5,32,74,65,8,106,33,224,1,32,224,1,40,2,0,33,225,1,32,225,1,65,12,106,33,226,1,32,226,1,32,222,1,54,2,0,32,222,1,65,8,106,33,228,1,32,228,1,32,225,1,54,2,0,32,222,1,33,23,11,11,32,220,1,65,0,70,33,242,1,32,242,1,4,64,32,74,33,8,32,85,33,9,32,74,33,152,2,5,32,74,65,28,106,33,243,1,32,243,1,40,2,0,33,244,1,65,240,11,32,244,1,65,2,116,106,33,245,1,32,245,1,40,2,0,33,246,1,32,246,1,32,74,70,33,247,1,32,247,1,4,64,32,245,1,32,23,54,2,0,32,23,65,0,70,33,165,2,32,165,2,4,64,65,1,32,244,1,116,33,248,1,32,248,1,65,127,115,33,250,1,65,196,9,40,2,0,33,251,1,32,251,1,32,250,1,113,33,252,1,65,196,9,32,252,1,54,2,0,32,74,33,8,32,85,33,9,32,74,33,152,2,12,4,11,5,32,220,1,65,16,106,33,253,1,32,253,1,40,2,0,33,254,1,32,254,1,32,74,70,33,255,1,32,220,1,65,20,106,33,128,2,32,255,1,4,127,32,253,1,5,32,128,2,11,33,27,32,27,32,23,54,2,0,32,23,65,0,70,33,129,2,32,129,2,4,64,32,74,33,8,32,85,33,9,32,74,33,152,2,12,4,11,11,32,23,65,24,106,33,130,2,32,130,2,32,220,1,54,2,0,32,74,65,16,106,33,131,2,32,131,2,40,2,0,33,133,2,32,133,2,65,0,70,33,134,2,32,134,2,69,4,64,32,23,65,16,106,33,135,2,32,135,2,32,133,2,54,2,0,32,133,2,65,24,106,33,136,2,32,136,2,32,23,54,2,0,11,32,131,2,65,4,106,33,137,2,32,137,2,40,2,0,33,138,2,32,138,2,65,0,70,33,139,2,32,139,2,4,64,32,74,33,8,32,85,33,9,32,74,33,152,2,5,32,23,65,20,106,33,140,2,32,140,2,32,138,2,54,2,0,32,138,2,65,24,106,33,141,2,32,141,2,32,23,54,2,0,32,74,33,8,32,85,33,9,32,74,33,152,2,11,11,5,32,140,1,33,8,32,249,1,33,9,32,140,1,33,152,2,11,11,32,152,2,32,132,2,73,33,151,2,32,151,2,69,4,64,15,11,32,132,2,65,4,106,33,153,2,32,153,2,40,2,0,33,155,2,32,155,2,65,1,113,33,156,2,32,156,2,65,0,70,33,157,2,32,157,2,4,64,15,11,32,155,2,65,2,113,33,158,2,32,158,2,65,0,70,33,159,2,32,159,2,4,64,65,216,9,40,2,0,33,160,2,32,160,2,32,132,2,70,33,161,2,32,161,2,4,64,65,204,9,40,2,0,33,162,2,32,162,2,32,9,106,33,163,2,65,204,9,32,163,2,54,2,0,65,216,9,32,8,54,2,0,32,163,2,65,1,114,33,164,2,32,8,65,4,106,33,31,32,31,32,164,2,54,2,0,65,212,9,40,2,0,33,32,32,8,32,32,70,33,33,32,33,69,4,64,15,11,65,212,9,65,0,54,2,0,65,200,9,65,0,54,2,0,15,11,65,212,9,40,2,0,33,34,32,34,32,132,2,70,33,35,32,35,4,64,65,200,9,40,2,0,33,36,32,36,32,9,106,33,37,65,200,9,32,37,54,2,0,65,212,9,32,152,2,54,2,0,32,37,65,1,114,33,38,32,8,65,4,106,33,39,32,39,32,38,54,2,0,32,152,2,32,37,106,33,40,32,40,32,37,54,2,0,15,11,32,155,2,65,120,113,33,42,32,42,32,9,106,33,43,32,155,2,65,3,118,33,44,32,155,2,65,128,2,73,33,45,2,64,32,45,4,64,32,132,2,65,8,106,33,46,32,46,40,2,0,33,47,32,132,2,65,12,106,33,48,32,48,40,2,0,33,49,32,49,32,47,70,33,50,32,50,4,64,65,1,32,44,116,33,51,32,51,65,127,115,33,53,65,192,9,40,2,0,33,54,32,54,32,53,113,33,55,65,192,9,32,55,54,2,0,12,2,5,32,47,65,12,106,33,56,32,56,32,49,54,2,0,32,49,65,8,106,33,57,32,57,32,47,54,2,0,12,2,11,0,5,32,132,2,65,24,106,33,58,32,58,40,2,0,33,59,32,132,2,65,12,106,33,60,32,60,40,2,0,33,61,32,61,32,132,2,70,33,62,2,64,32,62,4,64,32,132,2,65,16,106,33,68,32,68,65,4,106,33,69,32,69,40,2,0,33,70,32,70,65,0,70,33,71,32,71,4,64,32,68,40,2,0,33,72,32,72,65,0,70,33,73,32,73,4,64,65,0,33,24,12,3,5,32,72,33,18,32,68,33,21,11,5,32,70,33,18,32,69,33,21,11,32,18,33,16,32,21,33,19,3,64,2,64,32,16,65,20,106,33,75,32,75,40,2,0,33,76,32,76,65,0,70,33,77,32,77,4,64,32,16,65,16,106,33,78,32,78,40,2,0,33,79,32,79,65,0,70,33,80,32,80,4,64,12,2,5,32,79,33,17,32,78,33,20,11,5,32,76,33,17,32,75,33,20,11,32,17,33,16,32,20,33,19,12,1,11,11,32,19,65,0,54,2,0,32,16,33,24,5,32,132,2,65,8,106,33,64,32,64,40,2,0,33,65,32,65,65,12,106,33,66,32,66,32,61,54,2,0,32,61,65,8,106,33,67,32,67,32,65,54,2,0,32,61,33,24,11,11,32,59,65,0,70,33,81,32,81,69,4,64,32,132,2,65,28,106,33,82,32,82,40,2,0,33,83,65,240,11,32,83,65,2,116,106,33,84,32,84,40,2,0,33,86,32,86,32,132,2,70,33,87,32,87,4,64,32,84,32,24,54,2,0,32,24,65,0,70,33,166,2,32,166,2,4,64,65,1,32,83,116,33,88,32,88,65,127,115,33,89,65,196,9,40,2,0,33,90,32,90,32,89,113,33,91,65,196,9,32,91,54,2,0,12,4,11,5,32,59,65,16,106,33,92,32,92,40,2,0,33,93,32,93,32,132,2,70,33,94,32,59,65,20,106,33,95,32,94,4,127,32,92,5,32,95,11,33,28,32,28,32,24,54,2,0,32,24,65,0,70,33,97,32,97,4,64,12,4,11,11,32,24,65,24,106,33,98,32,98,32,59,54,2,0,32,132,2,65,16,106,33,99,32,99,40,2,0,33,100,32,100,65,0,70,33,101,32,101,69,4,64,32,24,65,16,106,33,102,32,102,32,100,54,2,0,32,100,65,24,106,33,103,32,103,32,24,54,2,0,11,32,99,65,4,106,33,104,32,104,40,2,0,33,105,32,105,65,0,70,33,106,32,106,69,4,64,32,24,65,20,106,33,108,32,108,32,105,54,2,0,32,105,65,24,106,33,109,32,109,32,24,54,2,0,11,11,11,11,32,43,65,1,114,33,110,32,8,65,4,106,33,111,32,111,32,110,54,2,0,32,152,2,32,43,106,33,112,32,112,32,43,54,2,0,65,212,9,40,2,0,33,113,32,8,32,113,70,33,114,32,114,4,64,65,200,9,32,43,54,2,0,15,5,32,43,33,22,11,5,32,155,2,65,126,113,33,115,32,153,2,32,115,54,2,0,32,9,65,1,114,33,116,32,8,65,4,106,33,117,32,117,32,116,54,2,0,32,152,2,32,9,106,33,119,32,119,32,9,54,2,0,32,9,33,22,11,32,22,65,3,118,33,120,32,22,65,128,2,73,33,121,32,121,4,64,32,120,65,1,116,33,122,65,232,9,32,122,65,2,116,106,33,123,65,192,9,40,2,0,33,124,65,1,32,120,116,33,125,32,124,32,125,113,33,126,32,126,65,0,70,33,127,32,127,4,64,32,124,32,125,114,33,128,1,65,192,9,32,128,1,54,2,0,32,123,65,8,106,33,25,32,123,33,7,32,25,33,26,5,32,123,65,8,106,33,130,1,32,130,1,40,2,0,33,131,1,32,131,1,33,7,32,130,1,33,26,11,32,26,32,8,54,2,0,32,7,65,12,106,33,132,1,32,132,1,32,8,54,2,0,32,8,65,8,106,33,133,1,32,133,1,32,7,54,2,0,32,8,65,12,106,33,134,1,32,134,1,32,123,54,2,0,15,11,32,22,65,8,118,33,135,1,32,135,1,65,0,70,33,136,1,32,136,1,4,64,65,0,33,6,5,32,22,65,255,255,255,7,75,33,137,1,32,137,1,4,64,65,31,33,6,5,32,135,1,65,128,254,63,106,33,138,1,32,138,1,65,16,118,33,139,1,32,139,1,65,8,113,33,142,1,32,135,1,32,142,1,116,33,143,1,32,143,1,65,128,224,31,106,33,144,1,32,144,1,65,16,118,33,145,1,32,145,1,65,4,113,33,146,1,32,146,1,32,142,1,114,33,147,1,32,143,1,32,146,1,116,33,148,1,32,148,1,65,128,128,15,106,33,149,1,32,149,1,65,16,118,33,150,1,32,150,1,65,2,113,33,151,1,32,147,1,32,151,1,114,33,153,1,65,14,32,153,1,107,33,154,1,32,148,1,32,151,1,116,33,155,1,32,155,1,65,15,118,33,156,1,32,154,1,32,156,1,106,33,157,1,32,157,1,65,1,116,33,158,1,32,157,1,65,7,106,33,159,1,32,22,32,159,1,118,33,160,1,32,160,1,65,1,113,33,161,1,32,161,1,32,158,1,114,33,162,1,32,162,1,33,6,11,11,65,240,11,32,6,65,2,116,106,33,164,1,32,8,65,28,106,33,165,1,32,165,1,32,6,54,2,0,32,8,65,16,106,33,166,1,32,8,65,20,106,33,167,1,32,167,1,65,0,54,2,0,32,166,1,65,0,54,2,0,65,196,9,40,2,0,33,168,1,65,1,32,6,116,33,169,1,32,168,1,32,169,1,113,33,170,1,32,170,1,65,0,70,33,171,1,2,64,32,171,1,4,64,32,168,1,32,169,1,114,33,172,1,65,196,9,32,172,1,54,2,0,32,164,1,32,8,54,2,0,32,8,65,24,106,33,173,1,32,173,1,32,164,1,54,2,0,32,8,65,12,106,33,175,1,32,175,1,32,8,54,2,0,32,8,65,8,106,33,176,1,32,176,1,32,8,54,2,0,5,32,164,1,40,2,0,33,177,1,32,177,1,65,4,106,33,178,1,32,178,1,40,2,0,33,179,1,32,179,1,65,120,113,33,180,1,32,180,1,32,22,70,33,181,1,2,64,32,181,1,4,64,32,177,1,33,4,5,32,6,65,31,70,33,182,1,32,6,65,1,118,33,183,1,65,25,32,183,1,107,33,184,1,32,182,1,4,127,65,0,5,32,184,1,11,33,186,1,32,22,32,186,1,116,33,187,1,32,187,1,33,3,32,177,1,33,5,3,64,2,64,32,3,65,31,118,33,194,1,32,5,65,16,106,32,194,1,65,2,116,106,33,195,1,32,195,1,40,2,0,33,190,1,32,190,1,65,0,70,33,197,1,32,197,1,4,64,12,1,11,32,3,65,1,116,33,188,1,32,190,1,65,4,106,33,189,1,32,189,1,40,2,0,33,191,1,32,191,1,65,120,113,33,192,1,32,192,1,32,22,70,33,193,1,32,193,1,4,64,32,190,1,33,4,12,4,5,32,188,1,33,3,32,190,1,33,5,11,12,1,11,11,32,195,1,32,8,54,2,0,32,8,65,24,106,33,198,1,32,198,1,32,5,54,2,0,32,8,65,12,106,33,199,1,32,199,1,32,8,54,2,0,32,8,65,8,106,33,200,1,32,200,1,32,8,54,2,0,12,3,11,11,32,4,65,8,106,33,201,1,32,201,1,40,2,0,33,202,1,32,202,1,65,12,106,33,203,1,32,203,1,32,8,54,2,0,32,201,1,32,8,54,2,0,32,8,65,8,106,33,204,1,32,204,1,32,202,1,54,2,0,32,8,65,12,106,33,205,1,32,205,1,32,4,54,2,0,32,8,65,24,106,33,206,1,32,206,1,65,0,54,2,0,11,11,65,224,9,40,2,0,33,208,1,32,208,1,65,127,106,33,209,1,65,224,9,32,209,1,54,2,0,32,209,1,65,0,70,33,210,1,32,210,1,69,4,64,15,11,65,136,13,33,2,3,64,2,64,32,2,40,2,0,33,1,32,1,65,0,70,33,211,1,32,1,65,8,106,33,212,1,32,211,1,4,64,12,1,5,32,212,1,33,2,11,12,1,11,11,65,224,9,65,127,54,2,0,15,11,231,4,1,4,127,32,2,65,128,192,0,78,4,64,32,0,32,1,32,2,16,3,26,32,0,15,11,32,0,33,3,32,0,32,2,106,33,6,32,0,65,3,113,32,1,65,3,113,70,4,64,3,64,2,64,32,0,65,3,113,69,4,64,12,1,11,2,64,32,2,65,0,70,4,64,32,3,15,11,32,0,32,1,44,0,0,58,0,0,32,0,65,1,106,33,0,32,1,65,1,106,33,1,32,2,65,1,107,33,2,11,12,1,11,11,32,6,65,124,113,33,4,32,4,65,192,0,107,33,5,3,64,2,64,32,0,32,5,76,69,4,64,12,1,11,2,64,32,0,32,1,40,2,0,54,2,0,32,0,65,4,106,32,1,65,4,106,40,2,0,54,2,0,32,0,65,8,106,32,1,65,8,106,40,2,0,54,2,0,32,0,65,12,106,32,1,65,12,106,40,2,0,54,2,0,32,0,65,16,106,32,1,65,16,106,40,2,0,54,2,0,32,0,65,20,106,32,1,65,20,106,40,2,0,54,2,0,32,0,65,24,106,32,1,65,24,106,40,2,0,54,2,0,32,0,65,28,106,32,1,65,28,106,40,2,0,54,2,0,32,0,65,32,106,32,1,65,32,106,40,2,0,54,2,0,32,0,65,36,106,32,1,65,36,106,40,2,0,54,2,0,32,0,65,40,106,32,1,65,40,106,40,2,0,54,2,0,32,0,65,44,106,32,1,65,44,106,40,2,0,54,2,0,32,0,65,48,106,32,1,65,48,106,40,2,0,54,2,0,32,0,65,52,106,32,1,65,52,106,40,2,0,54,2,0,32,0,65,56,106,32,1,65,56,106,40,2,0,54,2,0,32,0,65,60,106,32,1,65,60,106,40,2,0,54,2,0,32,0,65,192,0,106,33,0,32,1,65,192,0,106,33,1,11,12,1,11,11,3,64,2,64,32,0,32,4,72,69,4,64,12,1,11,2,64,32,0,32,1,40,2,0,54,2,0,32,0,65,4,106,33,0,32,1,65,4,106,33,1,11,12,1,11,11,5,32,6,65,4,107,33,4,3,64,2,64,32,0,32,4,72,69,4,64,12,1,11,2,64,32,0,32,1,44,0,0,58,0,0,32,0,65,1,106,32,1,65,1,106,44,0,0,58,0,0,32,0,65,2,106,32,1,65,2,106,44,0,0,58,0,0,32,0,65,3,106,32,1,65,3,106,44,0,0,58,0,0,32,0,65,4,106,33,0,32,1,65,4,106,33,1,11,12,1,11,11,11,3,64,2,64,32,0,32,6,72,69,4,64,12,1,11,2,64,32,0,32,1,44,0,0,58,0,0,32,0,65,1,106,33,0,32,1,65,1,106,33,1,11,12,1,11,11,32,3,15,11,241,2,1,4,127,32,0,32,2,106,33,3,32,1,65,255,1,113,33,1,32,2,65,195,0,78,4,64,3,64,2,64,32,0,65,3,113,65,0,71,69,4,64,12,1,11,2,64,32,0,32,1,58,0,0,32,0,65,1,106,33,0,11,12,1,11,11,32,3,65,124,113,33,4,32,1,32,1,65,8,116,114,32,1,65,16,116,114,32,1,65,24,116,114,33,6,32,4,65,192,0,107,33,5,3,64,2,64,32,0,32,5,76,69,4,64,12,1,11,2,64,32,0,32,6,54,2,0,32,0,65,4,106,32,6,54,2,0,32,0,65,8,106,32,6,54,2,0,32,0,65,12,106,32,6,54,2,0,32,0,65,16,106,32,6,54,2,0,32,0,65,20,106,32,6,54,2,0,32,0,65,24,106,32,6,54,2,0,32,0,65,28,106,32,6,54,2,0,32,0,65,32,106,32,6,54,2,0,32,0,65,36,106,32,6,54,2,0,32,0,65,40,106,32,6,54,2,0,32,0,65,44,106,32,6,54,2,0,32,0,65,48,106,32,6,54,2,0,32,0,65,52,106,32,6,54,2,0,32,0,65,56,106,32,6,54,2,0,32,0,65,60,106,32,6,54,2,0,32,0,65,192,0,106,33,0,11,12,1,11,11,3,64,2,64,32,0,32,4,72,69,4,64,12,1,11,2,64,32,0,32,6,54,2,0,32,0,65,4,106,33,0,11,12,1,11,11,11,3,64,2,64,32,0,32,3,72,69,4,64,12,1,11,2,64,32,0,32,1,58,0,0,32,0,65,1,106,33,0,11,12,1,11,11,32,3,32,2,107,15,11,89,1,4,127,35,5,40,2,0,33,1,32,1,32,0,106,33,3,32,0,65,0,74,32,3,32,1,72,113,32,3,65,0,72,114,4,64,32,3,16,5,26,65,12,16,1,65,127,15,11,16,2,33,4,32,3,32,4,74,4,64,32,3,16,4,65,0,70,4,64,65,12,16,1,65,127,15,11,11,35,5,32,3,54,2,0,32,1,15,11,11,200,1,1,0,65,128,8,11,192,1,1,0,0,0,0,0,0,0,130,128,0,0,0,0,0,0,138,128,0,0,0,0,0,128,0,128,0,128,0,0,0,128,139,128,0,0,0,0,0,0,1,0,0,128,0,0,0,0,129,128,0,128,0,0,0,128,9,128,0,0,0,0,0,128,138,0,0,0,0,0,0,0,136,0,0,0,0,0,0,0,9,128,0,128,0,0,0,0,10,0,0,128,0,0,0,0,139,128,0,128,0,0,0,0,139,0,0,0,0,0,0,128,137,128,0,0,0,0,0,128,3,128,0,0,0,0,0,128,2,128,0,0,0,0,0,128,128,0,0,0,0,0,0,128,10,128,0,0,0,0,0,0,10,0,0,128,0,0,0,128,129,128,0,128,0,0,0,128,128,128,0,0,0,0,0,128,1,0,0,128,0,0,0,0,8,128,0,128,0,0,0,128,]);// This file will not run on it's own\n\nconst {\n  Module,\n  instantiate,\n  Memory,\n  Table\n} = WebAssembly;\n\nconst WebAssemblyModule = function(deps = {\n  'global': {},\n  'env': {\n    'memory': new Memory({initial: 10, limit: 100}),\n    'table': new Table({initial: 0, element: 'anyfunc'})\n  }\n}) {\n  return instantiate(buffer, deps);\n}\n\nmodule.exports = WebAssemblyModule;\n\n\n//# sourceURL=webpack://KECCAK/./lib/keccak-tiny-browser.wasm?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://KECCAK/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://KECCAK/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://KECCAK/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n\n//# sourceURL=webpack://KECCAK/./node_modules/is-buffer/index.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack://KECCAK/./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://KECCAK/(webpack)/buildin/global.js?");

/***/ })

/******/ });